Cairo University
Faculty of Computers & Information
Department of Information Systems

A Framework for Governance and Management of the Post-Construction activities in IS Projects


Submitted by:
Esmat M. Abdel Moniem


A Thesis Submitted To The
Faculty of Computers & Information,
Cairo University,
In Partial Fulfilment of the Requirements for The Degree of Ph.D. of Information Systems from Department of Information Systems


Supervised by





Faculty of Computers & Information
Department of Information Systems
Cairo University

Egypt
April 2012
ACKNOWLEDGEMENTS


First and foremost, I would like to thank Allah for giving me the opportunity and the strength to accomplish this work.

I would like to express my deepest gratitude to Dr. Sherif A. Mazen Associated Prof., of Information Systems IS Department- Cairo University for suggesting and formulating the problem of the thesis, and for his constructive guidance throughout the development of the thesis, the opportunity I had to share in his boundless vision, enthusiasm and advice is something for which I shall always be profoundly grateful. 

I would like to thank Dr. Ehab E. Hassanein Assistant Prof., of Information Systems IS Department- Cairo University for being a great advisor. His ideas and tremendous support had a major influence on thesis. He spends a lot of time helping me.

I would like to express my deepest gratitude to my wife and my kids, their support and encouragement. I appreciate their efforts and support so much, and very grateful for all of them.
Last but not least I would like to thank all the contributors for the success of this thesis.










Abstract

Researches continually show that many information systems (IS) projects all over the world have difficulties to be completed on time or on budget or on scope, In fact many are cancelled before completion or not implemented. Project success is affected by many factors such as project team, suppliers, Customers and stakeholders.
Also many organizations that implemented ERP systems have reported not satisfied impacts from these huge investments. According to extensive academic debates, the reasons of ERP systems implementation failures are the disconnection between them and organizational performance.
ERP selection process is an important step which impact on the success of any organization. Empirical research has shown that selecting an inappropriate system is a major reason for ERP implementation failures, in Egypt the success rate of implementing ERP systems is extremely lower than that in western companies.
We present framework for ERP selection and adopt critical factors to provide the organization with the necessary information to make a well-informed, quantitative software selection, toward achieving a successful ERP implementation.
Also we adopted another two implementation frameworks; the first framework for management of IS development software implementation, and second framework for management of success of ERP implementation, including the factors that achieve implementation success. The implementation frameworks covering factors that can be divided into 4 categories (Top management, SW Projects, Organizations, and Systems) to assess the influence of CSF's on the implementation of IS projects on large companies in Egypt. 
Data collection is done through an extensive literary review and many other interviews with IS managers in some of Egyptian enterprises adopting Software development and ERP system and having previous experience in managing ERP and software development implementation with a faculty member having a good background in this subject.

Keywords: 
IS development projects failures, Enterprise Resource Planning (ERP), ERP Implementation success factors, IT/IS Governance, ERP Implementation Failure.











Table of Contents

CHAPTER 1
Introduction

1.1
Introduction ……………………………………………………………………………………

1.2
Problem Statement ……………………………………………………………………….……

1.3
Research Scope …………………………………………………………………………………

1.4
Research Objectives ……………………………………………………………………….…….

1.5
Research Methodology……………………………………………………………..………….

1.6
Research Limitations…………………………………………………………..……………….

1.7
Research Hypothesis…………………………………………………………………………….

1.8
Thesis Structure ……………………………………………………………………..…………

CHAPTER 2
Literature Review About IS Post Construction / Implementation  Activities  

2.1
The Construct (development) Phase ……………………………………………………….…..


2.1.1
The IS construction phase: scope and definition ……………….…………………


2.1.2
The construction phase activities ………………………………….………………

2.2
The IS Post Construction phase…………………….…………………..………………………


2.2.1
The Installation Activity …………………………………………………..…….…



2.2.1.1
Why IS Projects fail at installation activity…………………..………



2.2.1.2
How to avoid Project failure at installation activity? ……………….


2.2.2
Software Training and Support activity ………………………………………......


2.2.3
Delivery Activity ………………………………………..……………………..…


2.2.4
Integration and Test activity ……………………………………..………….……



2.2.4.1
Integration activity …………………………………………….…..…



2.2.4.2 
Test activity ……………………………………….…………...…..…


2.2.5
Implementation activity ……………………………………………………...……



2.2.5.1
Implementation Process ……………………………..…………….…



2.2.5.2
Early planning for Implementation Strategy ………………..…..……



2.2.5.3
Build the Implementation Schedule ……………………………..……



2.2.5.4
Communication as a Key at implementation ………………………....


2.2.6
Software Maintenance and optimizing software activity ……………………..…



2.2.6.1
Operations and Maintenance activity ………………….……………



2.2.6.2
Processes, activities and practices ……………..…………………….



2.2.6.3
Maintenance in ISO/IEC 14764 ………………………………….…


2.2.7
Software Documentation activity ………………………….……………………



2.2.7.1
Project Management Documentation …………………….…….……



2.2.7.2
Software Quality Assurance Documentation ……………………...…



2.2.7.3
Software Configuration Management Documentation ………………



2.2.7.4
Software Verification and Validation Documentation……………….



2.2.7.5
Test Documentation………………………………………..…………



2.2.7.6
Requirements Documentation………………………………..………..



2.2.7.7
Design and Implementation Documentation………………………….



2.2.7.8
Reporting …………………………………………………..……….…


2.2.8
IS Contract and issues related to post construction activity ……………………….



2.2.8.1
Project closing activity ………………………………………………



2.2.8.2
Final Cost Report activity ………………………………………….....



2.2.8.3
Final Payment activity …………………………………………….…


2.2.9
Security policy activity ………………………………………………………..…..


2.2.10
Risk Management activity   …………………………………………………….….



2.2.10.1
Risk Identification and Estimation …………...……………………



2.2.10.2
Risk Factors ……………………………………….…….………….


2.2.11
Disposition activity    ………………………………………………………………

CHAPTER 3
Literature Review  About Common Causes And Effect Of  IS Development  And ERP Systems Projects Failure 

3.1
Introduction ………………………………………………………………………………….….

3.2
Success and Failure of IS development projects ………………………………………..….…

3.3
Common causes and effects of national & International IS development and ERP systems projects failure…………………………………………………………………………………..


3.3.1
International IS development projects failures ……………………………...……



3.3.1.1
Analysis of  Rate of failure at IS development projects……………………



3.3.1.2
Analysis of  the costs of IS Projects development failure…………………..



3.3.1.3
Analysis of Common causes of IS development projects failure…………..


3.3.2
International ERP projects failure ………………………………………………..



3.3.2.1
Analysis of Rate of the International ERP projects failure…………………



3.3.2.2
The Cost of ERP projects failure…………………………………………..




I
Costs of Software …………………………………………………..




II
Costs of Hardware………………………….……………………….




III
Costs of Professional Services (hidden costs of ERP)………….……




IV
Cost of Implementation length …………………………..………




V
Implementation budget …………………………



3.3.2.3
Based on the ERP survey conducted by Meta Group in 2002……………..



3.3.2.4
Results Of 2010 ERP Report Of Panorama Consulting Group……………. 



3.3.2.5
Analysis of the Most of ERP systems failure reasons


3.3.3
National IS Development projects failure ……………………………………….


3.3.4
National ERP projects failure…………………….………………………………

3.4
Samples of failed IS projects…………………………………………………………………

3.5
Conclusion ……………………………………….…………………………………………….

CHAPTER 4
Factors Effect  IS  Post Implementation Activity Failure

4.1
Introduction……………………………………………………………………………………..

4.2
Software as a Service (SaaS) implementations………………………………………………..

4.3
IS development Projects Failure Reasons at post construction activity……………………..


4.3.1
Lack of Project Deployment Methodology…………………………………………


4.3.2
Poor Planning………………………………………………………………………..


4.3.3
Poorly-Defined Project Scope (Unclear goals and Objectives)……………………..


4.3.4
Common scope mistakes…………………………………………………………….


4.3.5
Vague Requirements, Poor User Inputs, Lack of User Involvement………………..


4.3.6
Scope Creep, Objective and Requirements Changes during Project………………..


4.3.7
Poor Architecture which is Inflexible for Any Change


4.3.8
Stakeholders' Conflicts……………………………………………………………..


4.3.9
Lack of Top Management Support and Involvement………………………………


4.3.10
Insufficient Budget and Bad Resources Allocations………………………………..


4.3.11
Poor Schedule Estimation, Unrealistic or Long Timescales………………………..


4.3.12
Communication breakdowns, Failure to communicate and act as a team…………..


4.3.13
Staffing (Inappropriate Skills, Lack of Number of staff)……………………………


4.3.13
Poor Testing……………………………………………………………..…………


4.3.15
Technology Illiteracy……………………………………………………………….


4.3.16
Hidden Costs of going "lean and mean"……………………………………………


4.3.17
Late Failure Warning Signals……………………………………………………….

4.4
ERP Systems Implementation………….……………………………………………………..


4.4.1
ERP systems implementation benefits and outcomes …………………………..



4.4.1.1
Benefits of ERP systems…………………………………………….



4.4.1.2
ERP System Implementation Outcomes……………………………….



4.4.1.3
ERP systems Measurable benefits……………………………………..



4.4.1.4
Some ERP systems Risks……………………………………….. 


4.4.2  
Common obstacles of ERP systems implementation……………………………



4.4.2.1  
Lack of Top Management Commitment……………………………….



4.4.2.2
Inadequate Requirements Definition…………………………………..



4.4.2.3
Poor ERP Package Selection………………………………………….



4.4.2.3
Inadequate Resources…………………………………………………..



4.4.2.5
Resistance to Change/Lack of Buy-in………………………………….



4.4.2.6
Miscalculation of Time and Effort……………………………………..



4.4.2.7
Misfit of Application Software with Business Processes………………



4.4.2.8
Unrealistic Expectation of Benefits and Return On Investment) ROI )..



4.4.2.9
Inadequate Training …………………………………………………..



4.4.2.10
Poor Project Design and Management…………………………………



4.4.2.11
Poor Communications………………………………………………….



4.4.2.12
Poor-advised Cost Cutting……………………………………………..

4.5 
Conclusion……………………………………………………………………………………….

CHAPTER 5
Management And Governance Of Successful IS Development  And ERP Systems Projects Implementation

5.1
Best practices for avoiding IS development projects failures………………………………..


5.1.1
Coding with a specific methodology……………………………………………….


5.1.2
Avoid creating a project plan from a drop-dead system completion date…………..


5.1.3
Building tables with a data model………………………………………………….


5.1.3
Importance of hiring experienced technical lead……………………………………


5.1.5
Faster coding not always by  hiring many developers………………………………


5.1.6
Plan ahead for data migration……………………………………………………….


5.1.7
Develop a test plan…………………………………………………………………


5.1.8
Avoiding Changing the system to support critical new requirements……………….


5.1.9
Selecting suitable ERP systems with little customization…………………………..

5.2
The Proposed Framework for Management Successful IS Development Software Implementation…………………………………………………………………………………..  


5.2.1
literature review………………………………………………………………………..


5.2.2
Role of CMMI , Waterfall and Agile as Software Development Models in implementation activity ………………………………………………………………



5.2.2.1
CMMI Software Development Model…………………………………..



5.2.2.2
Waterfall software development Model………………………………….



5.2.2.3
Agile software development model………………………………………



5.2.2.3
Waterfall Model Vs Agile Model………………………………………..


5.2.3
The proposed Framework for Management Successful IS development Software implementation………………………………………………………………………...



5.2.3.1
Top Management category factors……………………………………….




5.2.3.1.1
F1: Senior Management Commitment………………..




5.2.3.1.2
F2: Leadership………………………………………..




5.2.3.1.3
F3: Competence and BPR……………………………




5.2.3.1.3
F3: SPI objectives and goals…………………………. 

 

5.2.3.2
Project category factors…………………………………………………..




5.2.3.2.1
F5: Staff involvement……………………………………..




5.2.3.2.2
F6: Experience Staff……………………………………….




5.2.3.2.3
F7: Return On Investment (ROI)………………………….




5.2.3.2.3
F8: SPI awareness and Implementation methodology ……



3.2.3.3
Organization category factors …………………………………………..




5.2.3.3.1
F9: Organizational Culture……………………………….. 




5.2.3.3.2
F10: Organizational Politics……………………………….




5.2.3.3.3
F11: Communication and Collaboration…………………..




5.2.3.3.3
F12: Wide Commitment…………………………………...




5.2.3.3.5
F13: Resistance……………………………………………



5.2.3.4
System category  factors………………………………………………….




5.2.3.4.1
F13: Allocation of Resources……………………………..




5.2.3.4.2
F15 : Training and mentoring……………………………..




5.2.3.4.3
F16 : Sustainability………………………………………..




5.2.3.4.3
F17: Ease to use…………………………………………...




5.2.3.4.5
F18: Minimal customization……………………………..

5.3
The Role Governance And Influences On Success Of ERP System Implementation


5.3.1
Organizational Governance…………………………………………………………..



5.3.1.1
The Board of Directors………………………………………………….. 



5.3.1.2
Executive Management………………………………………………….



5.3.1.3
Influences on ERP success (CSFs, Risks and PM issues) ……………….


5.3.2
IT Governance ……………………………………………………………….……..



5.3.2.1
IT Governance role………………………………………………………



5.3.2.2
Influences on ERP success (CSFs, Risks and PM issues )………………


5.3.3
Project Governance………………………………………………………………….



5.3.3.1
Project Governance components………………………………………..



5.3.3.2
Influences on ERP success (CSFs, Risks and PM issues )……………….

5.4
Critical Factors Toward Achieving A Successful ERP Implementation 


5.4.1
Strategic factors……………………………………………………………………..


5.4.2
Tactical factors………………………………………………………………………


5.4.3
Operational factors…………………………………………………………………..


5.4.3
General factors……………………………………………………………………….


5.4.5
Implementation Consideration factors…………………………………………………

5.5
The Proposed Framework For Management ERP Selection …………….………………….


5.5.1
Corporate Vision……………………………………………………………………..


5.5.2
Business processes……………………………………………………………………


5.5.3
Technology and System Architecture…………………………………………………


5.5.3
Database and network………………………………………………………………….


5.5.5
Hardware and software………………………………………………………………


5.5.6
Customization effort implementation………………………………………………….


5.5.7
Service and Support…………………………………………………………………..


5.5.8
Product Functionality ………………………………………………………………….


5.5.9
Product total owner cost ……………………………………………………………..


5.5.10
Supplier Longevity…………………………………………………………………….


5.5.11
Computer Culture…………………………………………………………………….


5.5.12
Organizational Culture……………………………………………………………….. 

5.6
The Proposed  Framework for  Management Successful ERP systems Implementation  


5.6.1
Top Management Category factors………………………………………………….. 



5.6.1.1
F1 : Strategy and Careful package selection…………………………….



5.6.1.2
F2: Leadership…………………………………………………………..



5.6.1.3
F3: Support……………………………………………………………….



5.6.1.3
F3: Competence and BPR………………………………………………...


5.6.2
Project Category factors………………………………………………………………



5.6.2.1
F5: Team…………………………………………………………………



5.6.2.2
F6: Management…………………………………………………………



5.6.2.3
F7: Plan …………………………………………………………………



5.6.2.3
F8: External…………………………………………………………….



5.6.2.5
F9: Return On Investment (ROI)………………………………………..


5.6.3
Organization category factors ……………………………………………………….



5.6.3.1
F10: Culture…………………………………………………………….



5.6.3.2
F11: Change……………………………………………………………



5.6.3.3
F12: Process……………………………………………………………



5.6.3.3
F13: Communication…………………………………………………….



5.6.3.5
F13: Wide Commitment…………………………………………………



5.6.3.6
F15: Resistance…………………………………………………………


5.6.4
System Category factors ……………………………………………………………



5.6.4.1
F16: Technology………………………………………………………...



5.6.4.2
F17: Training……………………………………………………………



5.6.4.3
F18: User………………………………………………………………



5.6.4.3
F19: Empowerment…………………………………………………….



5.6.4.5
F20: Ease to use…………………………………………………..	



5.6.4.6
F21: Minimal customization……………………………………………..

Chapter 6 
Questioner & Results 

6.1

Questioner that related to the proposed Framework for Management Successful IS Development Software implementation……………….……………………………………….


6.1.1
Top Management category factors…………………………………………………….


6.1.2
Project category factors…………………………………………….………………….


6.1.3
Organization category factors…………..………………………….…………………


6.1.4
System category factors……………………………………………………..…………

6.2
Questioner That Related To The Proposed Framework For Management Successful ERP Systems Implementation……………………………………………………………………


6.2.1
Top Management Category factors…………………………………………………… 


6.2.2
Project Category factors……………………………………………………………….


6.2.3
Organization category factors…………………………………………………………


6.2.4
System Category factors………………………………………………….……………

6.3
Results……………………………………………………………………….………………….


6.3.1
Results of Organization O1……………………………………………………………


6.3.2
Results of Organization O2……………………………………………………………


6.3.3
Results of Organization O3 …………………………………………………..………





Chapter 7
Conclusion & Future Work

7.1 
Conclusion ………………………………………………………………..……………………

7.2 
Future Work…………………………………………………………………………………..


References


















List of Figures
No 
Figure 
Figure description
P.No.
1
Figure [2.1]
Systems_Development_Life_Cycle

2
Figure [2.2]
Software Integration 

3
Figure [3.1]
ERP Systems Failure Reasons

4
Figure [3.2]  
Saas VS Premise ERP Results

5
Figure [3.3]
ERP Systems Failure Reasons

6
Figure [3.4]
Some Erp Systems Risks

7
Figure [5.1]
Cmmi Model Diagram

8
Figure [5.2]
Waterfall Model Diagram

9
Figure [5.3]
Agile Model Diagram

10
Figure [5.4]
The Proposed Framework For Management of Successful IS Development Software Implementation.

11
Figure [5.5]
The Proposed Framework For Management of ERP Selection.

12
Figure [5.6]
The Proposed Framework For Management of Successful ERP Implementation.

13
Figure [6.1]  
Sample Of Success ERP Implementation

15
Figure [6.2]
Sample Of Failed ERP Implementation

16
Figure [6.3]
Sample Of Success ERP Implementation

17
Figure [6.4]
Summary Of ERP Implementation 





















List of Tables:





No 
Table 
Table description
P.No.
1
Table[2.1]
Vital aspects of project initiation and integration management

2
Table[2.1]
Sample Checklist for Unit & Integration Test Activities 

3
Table[2.2]
Comparison of Requirements Project Management 

5
Table[3.1]
A classification of short and long-term objectives.

6
Table[3.2]
Standish Findings By Year Updated for 2009 

3
Table[3.3]
Statistical data over the rate of failure of IS development  projects over the last 15 years 

4
Table[3.4]
Some of the results of The Standish Group survey (1995), The CHAOS report 

5
Table[3.5]
Differences between IT projects in public and private sectors (Intellect, 2000)

6
Table[3.6]
Common causes of IS development projects failure

7
Table[3.7]
Rate of the International ERP projects failure through the last 10 years

8
Table[3.8]
Time and budget frequently exceed planned levels

9
Table[3.9]
Top 7 short listed vendors

10
Table[3.10]
Top 5 Selected Vendors

11
Table[5.1]
Critical success factors (CSFs)

12
Table[5.2]
A Framework for Developing an M & E System














Glossary





























































CHAPTER 1
1.1 Introduction:
Some of IS projects have a bad reputation for going over budget and schedule, not realizing expectations and for providing poor return on investment [1],[2],[3],[4],[5].Surveys and reports on the acceptability of new IS systems seem to highlight constantly the same problems and probable causes of failure yet businesses, large and small, continue to make mistakes when attempting to improve information systems and often invest in inappropriate or unworkable changes without proper consideration of the likely risks.
Some Information systems projects frequently fail. Depending upon published which academic studies the failure rate of large projects is reported as being between 50%-80% [6]. This is due to the natural human tendency to hide bad news; the real statistic may be even higher. This is a catastrophe.  
Based upon past experience, when undertaking a large, complex, systems project, the realistic expectation should be that the project will fail. In particular, business process reengineering (BPR) projects have an even higher failure rate because of their expanded scope. Hiring a large, established consulting company is not a guarantee of success; neither is buying packaged software and implementing it [6].
So, what really causes these system projects to fail? Is it some technical issues that most system engineers don’t know?  Are software projects so drastically complex that only the most talented teams have a hope of succeeding? The sad fact is that software projects fail because we do not recognize that good engineering principles should be applied to software projects just as they are to building office buildings, because software construction is “different” [6].
It was reported that 75% of the ERP projects are classified as failures [7]. 51 % viewed their ERP implementation as not fully completed. Based on the ERP survey conducted by many researchers, the average cost of ERP ownership were $15 millions ranging from half millions to $300 millions [7]. The average cost per user per year could be as high as $20,000. However, there are also frequent reports of ERP failure: "between 50 percent and 75 percent of U.S. firms experience some degree of failure. Many survey's revealed that 65 percent of executives believe ERP implementation has at least a moderate chance of hurting their business [6],[7],[8]. "Three quarters of the ERP projects are considered failures and many ERP projects ended catastrophically" [9].
1.2 Problem statement:
Researches continuously show that many information System (IS) projects all over the world are failed before completion or not implemented. The most common reasons for the failure of  IS projects are rooted in the project management process itself [10].
To quantify the cost of software failures, studies generally agree that the number is at least 50 to 80 billion dollar range annually [11]. Most IS failure researches that seek to determine the percentage of projects that run over-budget are late, or do not deliver expected results. While those numbers are important, they do not convey a concrete sense of the overall impact created by failed IS projects and did not find the proper solution for solving the Post Construction Problems in IS Projects.
Even ERP systems, not all ERP systems successfully implemented or best fit organization's need .Some of implementation failed in terms of normal management failure, unclear scope work, unclear business process and procedures, budget overruns or resistance from end user.
1.3 Research scope:
Information systems projects can be divided into three phases: 
    • Pre-construction phase (the pre-development phase)
    • Construction phase (the developmental phase )
    • Post construction phase (the deployment phase). 
Our study will be concerned with the third phase (post construction activities).The activities which we will be talking about starts from the end stage of development (the year following the process of software development) to the sustainability of the project.
1.4 Research objectives:
Our first aim in this work to explain what is The IS projects post construction/ implementation  phase  ,  what is the causes of IS projects failure , The effect of IS Projects failure , what is the Most important Ways to avoiding IS  projects failure and what is the Critical Factors toward achieving a successful IS projects  implementation. 
The second aims in this work is to explain the reasoning behind the development of a new three frameworks for IS development projects implementation, ERP selection and ERP implementation to achieve the success of an IS projects at an early stage. To begin, we will look at the scale of the problem by reviewing evidence of the remarkable costs and frequency of IS projects failure over the past 10 years.  
Then we will consider the findings of certain important reports on IS projects failure and capture the factors or pointers, according to these reports, most influence success of IS projects in frameworks. Next my work will explore concepts of success and failure before commenting on some of the wider issues that caused problems in a variety of case studies. 
We present framework for ERP selection and adopt critical factors to provide the organization with the necessary information to make a well-informed, quantitative software selection, toward achieving a successful ERP implementation.
Also we adopted another two implementation frameworks; the first framework is for managing success of ERP implementation and the second framework is for management of success IS development software implementation, including the factors that achieve implementation success. The implementation frameworks covering factors that can be divided into 3 categories (Top management, SW Projects, Organizations, and Systems) to assess the influence of CSFs on the implementation of ERP systems on large companies in Egypt. 
The other objective is to generate better understanding of success factor influencing IS projects Implementation in some sectors in Egypt covering service providers and manufacturing organizations.

And we can summarize the other research objectives in the following points:
    • Looking at the scale of the problem by reviewing evidence of the remarkable costs and frequency of project failure over the last 10 years.  
    • Avoiding failure of information system projects at the post-construction phase 
    • Reducing failed and challenged projects cost , schedule and performance risks
    • review the total cost of IS projects ownership includes the costs of packaged software, the costs of hardware, the costs of professional services (hidden costs of ERP ),the cost of implementation length and  the cost of implementation budget.
    • Studying the Key reasons why projects get failed at deployment phase. 
    • Studying the economic impact of the information system.
    • Studying the cost of information system and return on investment.
    • Reviewing the post Construction issues that should be addressed in the contract for the deployment phase.
    • Increasing probability of IS projects to be completed successfully according to planned budget and time schedules by Governance the post-construction activities.
    • Evaluation of IS projects Implementations.
    • Defining factors of the effective IS projects Implementation.
    • Performing a Risk Management for the post construction activities.
    • The general frameworks developed in this thesis can be a core for building an expert system.
1.5 Research Methodology
Both qualitative and quantitative measures will be used in this research. This study will be designed to identify the main causes for project failure at Post Construction phase. Interviews with Project Managers and stakeholders during deployment phase will be conducted. Data gathered from interviews will be analyzed and corroborated with previous surveys and case studies on IS projects failure and projects success at implementation phase.
Sample Selection
In order to find out common reasons for IS projects failure; Project Managers and stakeholders during deployment phase will be interviewed. Participants will be composed from a diverse socioeconomic background including. Their ages will range from 30 – 55 years old. Each participant will have at least five or more year’s experience in his or her profession.
1.6 Research Limitations:-
A larger sample of information system that faced failure at the post construction phase is required whether government or private IS projects. The research will include companies in the other countries that transferred to the ERP systems. 
There are still some limitations in generalizing the research to a larger population due to the small surveyed sample. Another presumptive test was the (sample selection method) where only one questionnaire was sent to each company, thus the person who answered the questionnaire may not be representative for all users in the company. So the researchers in most cases get the answers for research questioners by self meeting with the managers and other stockholders to get the accurate answers. It is recommended to conduct in-depth case studies to gain more information about IS projects implementation in Egypt.
Also some of the answers may be addressed truly and honestly because stakeholders my want to show that everything is fine and other refuse to confirm and changes afraid from any responsibility especially concerning with their attitude during IS projects implementation.



1.7 Research Hypotheses:-
    1- We will assume that all prior phases (Pre-construction phase and Construction phase are completed.
    2- We will resort to reverse engineering in case of failure of any prior phase for the necessity and assess of the workload and cost.
    3- Investment in information systems is an investment with economic returns.
    4- An information system is the one of the assets of the company. 
    5- Assets of information system projects and rules should be protected. 
6- The method for producing both scheduled and unscheduled updates to IS projects plan and how the new information is disseminated. 
7- Mechanisms for placing the baseline version and future revisions of the plan under configuration control are described. 
8- Interfaces to entities outside the IS projects are described, the internal IS projects structure is identified, and roles and responsibilities for the IS projects are defined
9- The organizational boundaries between the IS projects and external entities are described. Communication with all IS stakeholders is defined and described.
10- The internal structure of the IS projects organization, including interfaces between the units of the software team is described. 
11- The IS projects management plans and activities for the project should be defined as Start-Up Plans that including  the Estimation Plan , Staffing Plan ,Staff Training Plan ,Resource Acquisition Plan and Project Commitments plan.
12- It is assumed that the political condition and the external environmental factors are fixed.
13- Other assumptions upon which our study is based should be including:
    • Clearly defined goals 		.  .
    • Competent project manager.  		.  
    • Top Management Support. 		
    • Competent project team members.		
    • Trouble-shooting. 
    • Sufficient resource allocation
    • Adequate communication channels
    • Control Mechanisms.
    • Feedback capabilities
    • Responsiveness to client
    • Client consultation
    • Technical tasks.
    • Client Acceptance
1.8 Thesis structure:
We started by review the IS post construction / implementation phase and related failure avoidance, we review. The Construct (development) Phase and present the IS Post Construction activity or Deployment Phase that include the following activities:
    • The Installation Activity 
    • Software Training and Support activity 
    • Delivery Activity 
    • Integration and Test activity  
    • Implementation activity  
    • Software Maintenance and optimizing software activity  
    • Lessons learned & best Practice activity  
    • Software Documentation activity  
    • IS Contract and issues related to post construction activity  
    • Security policy activity  
    • Risk Management activity   
And after this we covering the following Topics
    • Factors effect  IS  post implementation phase failure
        ◦ Introduction
        ◦ Software as a Service (SaaS) implementations
        ◦ IS development Projects Failure Reasons at post construction phase
        ◦ ERP  systems implementation and failure reasons
    • Published reports about common causes and cost of  IS development Projects and ERP systems  Failure 
        ◦ Success and Failure of IS projects 
        ◦ Statistics about national & International IS projects failure
        ◦ International IS developed projects failures  
        ◦ International ERP projects failure  
        ◦ National IS Development projects failure  
        ◦ National ERP projects failure
        ◦ Samples of failed IS projects
        ◦ Conclusion 
    • Management and Governance of Successful IS development  projects and ERP systems  Implementation
        ◦ Most important Ways to avoiding IS  development projects failure
        ◦ A Framework for Management of Successful IS Development Software implementation  
        ◦ The Role Governance and Influences on success of ERP System Implementation
        ◦ Critical factors toward achieving a successful ERP implementation 
        ◦ A framework for management of ERP selection 
        ◦ A Framework for Management of Successful ERP Projects Implementation  
    • Conclusion & future work 































 
CHAPTER 2
Literature Review About IS Post Construction / Implementation Activities
Many people have worked on IS projects where the final deliverables did not meet client expectations. In many cases, the IS project team did not adequately understand the expectations of the client. Understanding the expectations cannot be done while we are constructing and testing the solution. The expectations must be understood up front - first in the high-level IS Project Charter, but more importantly in the more detailed business requirements. 
2.1 The Construct Phase
2.1.1 The IS construction phase: scope and definition:
The construction phase of an IS project involves building the application using the agreed-upon environment and specialized tools. Developers create the application by using the design document as their guide [12].
During the construction phase, the project manager (PM) doesn't actually take part in conducting the components, but must have an understanding of each, so that he or she can oversee the IS project in a monitoring role. The components of the construction phase of the IS project life cycle are described below: 
1- Inputs: The only input needed for the construction phase is the design document created during the design phase of the life cycle.  
2- Key activities: The key activities for the construction phase are preparing the detailed design and performing the programming. The steps for completing the detailed design are listed below 
    • Complete the technical design. Complete any outstanding design work and estimate the impact of any design changes.  
    • Design the work units. Review the technical design and plan the individual work units for the application. 
    • Complete the database design. Document the logical data structures and data areas used in each programming work unit and make this documentation available to the project's programmers. 
    • Review the performance design. The complete project team, along with end users, conduct a review of the programming work unit design to ensure that the design meets functional and quality requirements.
    • Iterate the detail design. After the design review, the preceding steps are conducted as many times as necessary to enable the project team to refine the design.
    • Prepare the common test data.  Construct a master test database with which to test each work unit. The database may contain the testing methods, test data, expected results, user instructions, and possible sample documents for use in the testing.  
3- Tools: The primary tools needed to conduct the construction phase of the IS project life cycle are the specific programming languages and compilers that the programmers will use to create and test the programming code. 
3- Outputs: The outputs of the construction phase of the IS project life cycle are the code, programming work units, test database, and unit/string test results.  
5- Code: Using a programming language, programmers write a sequence of instructions that translates the product design into a language that a computer can understand.
6- Milestones: The final component of the construction phase for the IS project life cycle, the milestones, must be met before the project can move on to the next phase of the life cycle. The milestones that must be reached during the construction phase of the IS project life cycle are the code review complete form and the string test sign-off.
The Construct Phase is the point in the project when we actually start to construct the solution. In an IS development projects, this is the time to start writing program code.  If we followed the Lifecycle Step process so far, our construct team has a lot of guidance. They have a complete set of design specifications showing how the application should be structured and organized. They have design specifications for all screens, reports and programs. At this point, then, the project manager should be able to start handing out the various design specifications and the construct team can start to build the solution.
Different projects are going to execute the Analysis and Design Phases in different manners. If some of the design work appeared trivial, it may have been bypassed with the assumption that the construct team will be able to figure it out. For instance, if our organization has a good set of predefined screen layouts and screen standards, perhaps the screens were not formally defined for our solution. The designers may have confidence that the constructors can use the organization standards to easily build the required screens [12].
Likewise, on many teams, the same people are doing both the design and construct work. In many cases, the team members feel it is redundant to spend too much time on detailed design specifications since they will be the ones receiving the design specs anyway. While the detailed design specifications would be valuable when turning over the work to a separate group of people doing construction, they are not as valuable if the same people are on both the creating and receiving end. 
We will note from the outline below that there are a few activities completed during the Construct Phase that are not directly related to programming [12]. First, the initial unit testing is considered a part of Construct. Even if we have a separate group that will do the detailed testing, the original people constructing each component should also make sure that the component passes a simple unit test. Unit testing validates that the component appears to meet the minimum requirements for features and functionality and does not contain any known and obvious bugs.
The Construct Phase is also where we will create support documentation such as a Disaster Recovery Manual and User's Manual. In essence, these documents are also being "constructed," and so the logical place to create them is the Construction Phase Depending on the type of document, the support material can also be tested in the Test Phase and then executed or implemented in the Implementation Phase.
Lastly, there is some construction work going on that is not directly related to the solution [Error: Reference source not found], but is related to the needs of the lifecycle. For instance, we may need to construct some components to assist in the testing process. It is also likely that we will need some custom programs written to support the data conversion requirements we may also need to create some training content. These four areas started off with strategy documents, which were further developed into lower level plans. Now any supporting material will be constructed in this current phase so that it will be ready to be tested and executed in the rest of the lifecycle. It is too late, for instance, to be creating training content in the Implementation Phase. We need to execute training at that point. The training needs to be created now and tested in the Test Phase, perhaps through an initial pilot class.
Now that we are in the Construct Phase, we need to understand how we are going to manage all of the components we are creating. The components are stored, organized and tracked using a source code management tool. Although our analysis and design components may need to be managed as well, in the Construct Phase, it is vital to do so. If we are tracing requirements from the Analysis Phase, we must continue to do so now as well in the Construct Phase Depending on our Implementation Plan, many solutions will be turned over to a support organization after implementation. If we have not done so already, now is the time to make sure that the support organization starts to get involved in the project.
2.1.2 The construction phase activities:
According to [Error: Reference source not found] the construction phase including the following activities 
1- Validate Standards and Guidelines.
2- Construct the Solution.
    • Construct the Solution - Program Components.
        ◦ Use Caution When Downloading Components from the Web.
        ◦ Overview of XML.
    • Construct the Solution - Reusable Components.
    • Construct the Solution - Physical Data stores.
3- Unit Test the Components.
3- Review the Components.
    •  Code Reviews .
5- Construct Support Documentation.
    • Create Application Maintenance Manual .
    •  Create User's Manual .
    •  Create Disaster Recovery Plan .
    •  Create Service Level Agreement.
6- Construct the Elements of Solution.
    •  Construct Testing Environment and Data .
    •  Create Training Content .
    •  Construct Data Conversion Components .
    •  Construct Implementation Components.
7-  Re-plan for the Remainder of the Project.
8-  Obtain Approval to Proceed.
9- Supporting Templates.
    • Application Maintenance Manual.
    • User's Manual.
    • Disaster Recovery Manual.
    • Service Level Agreement.
2.2 The IS Post Construction phase 
Part of the Software Development Life Cycle (SDLC) figure [2.1], after the system has been tested during the Testing Phase, and accepted by the user, the system is installed and made operational in a production environment, in accordance with the requirements. The Post Construction activities (also called the project close out), [14] is the activities in which the IS manager establishes a comprehensive list of Incomplete activities that may potentially delay completing and turning over the IS project. This list of incomplete activities is referred to as the punch list. The IS manager needs to pursue the appropriate subcontractors and vendors to ensure that all punch list items are corrected and completed as quickly as possible.
Deployment activities Deployment starts after the code is appropriately tested, is approved for release and sold or otherwise distributed into a production environment. Software deployment is all of the activities that make a software system available for use. The IS Post Construction activities (deployment activities) can be divided to:-
    I- Software Deployment activities
    II- IS Deployment activities
I- The Software Deployment activities 
The Software Deployment activities covering the following [14] Activities:
Release: The release activity follows from the completed development process. It includes all the operations to prepare a system for assembly and transfer to the customer site.
Install and activate: Activation is the activity of starting up the executable component of software. For simple system, it involves establishing some form of command for execution for complex systems, it should make all the supporting systems ready to use  
Deactivate: Deactivation is the inverse of activation, and refers to shutting down any executing components of a system. Deactivation is often required to perform other deployment activities.
Adapt: The adaptation activity is also a process to modify a software system that has been previously installed. It differs from updating in that adaptations are initiated by local events such as changing the environment of customer site, while updating is mostly started from remote software producer.
Update: The update process replaces an earlier version of all or part of a software system with a newer release.
Built-In:  Mechanisms for installing updates are built into some software systems. Automation of these update processes ranges from fully automatic to user initiated and controlled 
Version tracking: Version tracking systems help the user find and install updates to software systems installed on PCs and local networks.
    1. Web based version tracking systems 
    2. Local version tracking system 
    3. Browser based version tracking systems 






























Figure [2.1] Systems_Development_Life_Cycle [15]

Uninstall: Uninstallation is the inverse of installation. It is a remove of a system that is no longer required. It also involves some reconfiguration of other software systems in order to remove the uninstalled system’s files and dependencies. This is not to be confused with the term "reinstall" which is not actually a word.
Retire: Ultimately, a software system is marked as obsolete and support by the producers is withdrawn It is the end of the life cycle of a software product.
II- IS Post deployment activities:
The IS a deployment activity or the post Construction activities covering the following activities [14]:-
	2.2.1	The Installation Activity   
	2.2.2	Software Training and Support activity 
	2.2.3	Delivery Activity
	2.2.4	Integration and Test activity 
	2.2.5	Implementation activity
	2.2.6	Software Maintenance and optimizing software activity 
	2.2.7	Software Documentation activity
	2.2.8	IS Contract and issues related to post construction activity
	2.2.9	Security policy activity 
	2.2.10	Risk Management activity   
	2.2.11	Disposition activity    
2.2.1 The Installation Activity
The installation activities represent the steady state of the software on the computer Administrators want the software installed correctly on the users' computers to manage this steady state, software is:
    • Installed: This includes copying the necessary files, initial configuration of the registry, and the creation of the desktop and Start menu shortcuts that allow users to find and use the software.
    • Modified:  This involves adding or removing features after the initial installation.
    • Repaired: This involves keeping the software in a working state without regard to what happens.
    • Removed: This involves completely and safely removing the software from the computer when it is no longer needed, including the removal of all the files, registry entries, and shortcuts.
2.2.1.1 Why IS Projects fail at installation activity?
After installation the staffs were found still using their old workstations. Many of these users had been with the firm their whole working lives, and found it difficult to adjust to the new way of working. Long established procedures, status and areas of responsibility were changed without proper consultation. Staffs were resistant to change, they found the new system threatening, and they had not been involved in the development of decisions and were not trained adequately.  Problems during implementation caused delays and overspend. There were difficulties connecting it to (integrating it with) existing systems. The analysis of requirements had also underestimated the take up demand in other departments.
 2.2.1.2 How to avoid Project failure at installation activity? 
A- Develop a Maintenance Plan 
Maintenance is a key part of every installation plan. Some sustainable practices have specific maintenance requirements. Addressing these issues at this stage of development will ensure that adequate resources are directed towards this important component of design. Comprehensive and effectively designed maintenance plans can make or break a project as this will determine the capability to continue with the installation. Projects may be implemented with no problems but if maintenance plans are not established may create negative feedback from the local community. This may make future development more difficult. Proper site maintenance will also preserve the function of the installation, increasing the likelihood that we will meet the quality and quantity goals and requirements.
B- Develop a set of evaluation metrics and measurements for installation and maintenance 
Part of project design should include methods for measuring progress towards attaining goals – during installation and also during implementation and operation. A monitoring and evaluation plan allows us to determine whether (or when) we meet establish project goals – during both the installation and implementation phases.
C- Get feedback 
With a clear picture of what the installation will look like and how it will function, check in with all stakeholders to ensure that no issues were overlooked and that no new information has become available that may impact project design or requirements. This is a good way to maintain contact with our extended project team and increases the likelihood that our final installation will be supported by the community.
D- Revise and finalize Using Rainwater to Grow Livable Communities: Sustainable Storm water Best Management Practices.  
Take the comments and feedback from all parties and revise our plan as necessary. Perhaps some ideas are not feasible at this time. Have supporting documentation to backup any decisions we make. Return to the client with suggestions for change if appropriate. Our design is done when all parties have reached some sort of agreement.
E- Final review and approval 
This is the time to get final sign off and approval on our designs and implementation plans Keep those stakeholders close, new suggestions should be considered as they arise and their feasibility assessed continuously as we go along. 
Now we are ready to build! 
F- Build/Installation Phase 
Now that we’ve done all of our planning and have an approved project plan and design our home free, right? Not exactly the build and installation phase is a critical time. During this phase, we will: 
    • Implement construction best management practices as specified in the development plan.
    • Perform evaluation as specified in the monitoring and evaluation plan (as necessary).
    • Perform maintenance tasks as specified in the maintenance plan (as necessary).
2.2.2 Software Training and Support activity:
 Software Training and Support is important because a large percentage of software projects fail because the developers fail to realize that it doesn't matter how much time and planning a development team puts into creating software if nobody in an organization ends up using it. People are often resistant to change and avoid venturing into an unfamiliar area, so as a part of the deployment activities, it is very important to have training classes for new clients of the software.  Software training including training the users, administrators and technical stuff.
2.2.3 Delivery Activity:-
    • In these Activities after the project is done the client informed that the project is completed.
    • This is called as the Software Delivery Note 
    • The project is tested by client and is called as the User Acceptance Testing 
    • The project is installed in client environment and there, testing is done and called Port Testing in Software Testing
    • While installing, if any problem occurs, the maintenance people would write the Deployment Document (DD) to Project Manager (PM) 
    • After some time, if client wants to have some changes in the software, these changes are done in Maintenance activities 
    • A White and Black Box tested application installed in a production environment  Other deliverables that can be started at this point (depending on the size/scope of the project):
        ◦ Post-Implementation Review 
        ◦ Change Implementation Notice 
        ◦ Version Description Document  
2.2.4 Integration and Test activity:
Part of the Software Development Life Cycle (SDLC) the Testing and Integration Phase is when the various disparate components of the system are integrated together and systematically tested as a whole 
Not only is the product tested by final end users to ensure the product meets the specified functional requirements, but it is also tested by the developers and Quality Assurance staff (Test Engineers) to ensure that it is resilient, and capable of sustaining the amount of projected use as specified in the requirements 
2.2.4.1 Integration activity:
State the integration of developed and legacy systems: For customers who depend on legacy systems, must system deliver integration four ways? 
Products: Providing innovative features and technologies such as managed data providers for other databases Bridge for host systems, 
Community: Working together with customers, partners, and competitors to develop cross-platform solutions that meet customers’ shared interoperability needs, promote technology innovation, and promote competition in the IT industry  
Access: Licensing technology assets to and from other companies and offering key technologies including Web services standards under the Open Specification Promise  
Standards: Supporting industry and technical standards for data formats and messaging protocols and actively participating with leading standards-setting organizations to promote technology adoption  
The Agile Platform is used by IT teams to quickly develop and manage flexible web applications and business processes using agile methodologies It includes all tools needed to integrate figure [2.2], develop, Deploy, Manage and Change web applications and business processes By using a model-driven development approach, it increases developer productivity by at least 25% and reduces the time needed to create and change web applications to weeks instead of months 


Figure [2.2] software integration
a- Project Integration Management
To avoid IS projects failure at this phase the following table [2-1] [16] addresses vital aspects of project initiation and integration management such as the project charter, the importance of project stakeholders, and project life-cycle phases and milestones 
 
Priority
Area
3
Minor investment, informal schedule goals, low organizational priority and visibility 
3
Moderate investment, definite schedule target, some organizational priority and visibility 
2
Significant investment, important schedule goals, medium organizational priority and visibility 
1
Major investment, critical schedule goals, substantial organizational priority and visibility, significant technical and cost risks 
Project Charter
Prepare a one page memo of understanding between the sponsor and the PM outlining project objectives, resources, commitments, and constraints 
Identify quantifiable objectives, cost and schedule targets, outline staffing commitments, funding, and assets 
Define specific performance goals and cost and schedule thresholds, describe PM authority and organizational commitment 
Define PM responsibilities and authority, describe specific objectives and make express commitments of staffing, funds, and assets 
Life Cycle Phases and Milestones
Define basic phases, milestones, decision points, accomplishments, and deliverables 
Prepare project plan inputs with discussion of phases, deliverables, objectives and success criteria, establish immediate milestones within project phases 
Include in project plan linkages between milestone approval reviews and documents, updated estimates, test results, etc 
Define event-based milestones, establish milestone exit criteria, link to deliverables, baseline document updates, test results, and management reviews 
Project Stakeholders
Identify project stakeholders (customers, sponsors, users, etc ) and bulletined their interests and objectives on one page, review the project plan to ensure stakeholder satisfaction will be achieved 
Map stakeholder interests to specific initiatives to ensure satisfaction, develop, maintain, and post team success metrics, plan proactive stakeholder communications 
Prepare stakeholder management plan, and allocate staff and budget to periodic reassessments and corrective actions, focus specific initiatives to achieve stakeholder satisfaction 
Prepare and update a structured stakeholder analysis supporting a stakeholder management plan, map to the quality plan, risk management plan, and to project reporting initiatives 
The Project Plan
Summarize project objectives, approach, time constraints, cost estimates, and staffing plan, ensure these fit together and are realistic and achievable, define milestones, and link tasks to owners and deliverables 
Employ planning process to build team ownership and facilitate peer review, apply systematic methods to assess cost and schedule realism, plan more heavily in risk areas, apply all PM principles in plan 
Prepare a plan that links the requirements, task plans, timelines, cost estimates, staffing, deliverables, and test plan, make sure cost, scope, and time are bounded, define success criteria for milestones 
Produce an integrated family of documents defining all project activities and disciplines, plan for mapping and traceability throughout major documents, systematically address all (Project Management Body of Knowledge areas 17].
Project Management Methodology
Apply sound project management principles such as: clearly documented requirements, a realistic plan, project baseline controls, and periodic reviews, maintain a PM notebook 
Include outline of proposed project management methodology in project plan document, identify vital PM systems and procedures 
Document PM approach, including baseline management, reviews, data collection, project metrics, and control responsibilities, monitor and report status of PM implementation 
Prepare project management plan describing methodology, reviews, baseline controls, and organizational roles and responsibilities, establish metrics to track integrity of PM disciplines 
Table [2.1]: vital aspects of project initiation and integration management [16]
2.2.4.2 Test activity:
Most full-time software developers like nothing better than sitting down and writing code Many can sit down early in the morning and write code for hours at a time of course, along with the coding comes the testing, which many developers have never enjoyed as much But it is during the testing process that we really find out what kind of programmer we are Were the hundreds, or thousands, of lines of code just so much garbage, or did testing prove the beauty and logical strength of our code? In fact, the software testing process shows much more than what a good programmer we are it also shows how well we captured our business requirements and how well we designed our application  
It is worth stating the obvious about the reason we perform testing at all. First, we want to ensure that the solution meets the business requirements. For instance, if a specific business transaction follows a logical path from A -> B -> C -> D, we want our testing to prove that this, in fact, happens. Second, we test to catch errors and defects. These may be programming errors or errors that were introduced earlier in the development lifecycle  In other words, we need to prove that our solution is correct, while at the same time proving that there are no errors or defects  We may not catch many errors, but we still need to prove that the solution meets the business requirements. 
1- The Testing Process
The Test Phase is toward the end of the traditional waterfall development process. However, hopefully this is not the first time we have thought about testing. Depending on the characteristics of our project, we may already have created an initial. Testing Strategy in the Analysis Phase and a Testing Plan in the Design Phase. We would have already performed initial unit testing in the Construct Phase. Now, however, we are ready for the standalone testing process that belongs in the Test Phase.  
Note again that some methodologies combine the testing process into the Construct Phase Lifecycle Step breaks out the formal testing process into its own phase to provide emphasis on the focused testing that takes place at this time. If the testing process uncovers error and bugs, the team will need to correct them, which will mean briefly going back to the construct and unit test process. However, some errors may also require us to backtrack further and make design changes. In fact, we may encounter major errors that could impact our requirements. This could be caused by determining that certain requirements were missed or that certain stated requirements need to be modified to accommodate problems that were uncovered in the testing process. 
There are a number of specific tests that can be part of the testing process the specific ones our solution needs will be defined in our testing strategy and plan.  
The Testing Process including the following activity: [18] 
1- Validate Test Coverage
2-  Integration Testing
3-  System Testing 
    •  Performance Testing 
    •  Stress Testing 
    •  Security Testing 
    •  Requirements Testing 
    •  Usability Testing 
    •  Documentation Testing 
    •  Training Testing 
    •  Interface Testing 
    •  Disaster Recovery Testing 
    •  Multi-Site Testing 
    •  Installation Testing 
3-  Acceptance Testing
5-  Re-plan for the Remainder of the Project
6-  Obtain Approval to Proceed
2- The essence of testing 
The essence of testing is to: 
    • Catch as many errors as possible
    • Correct the errors
    • Track the errors to understand their causes and any patterns that may exist
    • Revalidate the stability of the solution, including ensuring that the correction of one error does not lead to the introduction of another error somewhere 
In some organizations [19] the testing process is handled by a separate team of testing specialists. This test team is usually much disciplined in their testing approach, and they are able to thoroughly test because they do not have any preconceived notions of how things "should" work. They only know how the solution "does" work.  The construct team passes their programs and test data to the test team for testing and validation. The test team performs the actual testing and provides feedback to the construct team on the success and errors encountered.  
However, it is more typical for the Test Phase to be completed by the same group of people who worked on the Construct. This has some benefits in terms of their familiarity with how the solution is supposed to work. They also have the advantage of being able to quickly go from testing error to code correction and then back to testing again. Both organizational models are valid and are used successfully in many companies.  
3- Some Basic Tenets of testing 
Regardless of the type of project we are on, we want to catch as many errors as early in the lifecycle [19] as possible. There are projects that purposely blast through the Analysis, Design and Coding Phases with a philosophy that they will fix all the problems in testing.  This is usually disastrous.  It’s not so bad to correct programming errors that we discover in our testing.  It is much more difficult when we realize that a design error resulted in information missing from our database.  It is even harder if we discover that our analysis missed an entire business process.  
At the same time, you cannot ensure that our software is perfect. Even with the best tools, it is impossible to test every logic path of every program. Therefore, we cannot ever be sure that our code is bug-free. 
Since we cannot build the perfect, bug-free system, the project team needs to understand the cost of testing and when the cost exceeds the benefit.  We can get into a lot of trouble if our testing is not rigorous enough. However, testing too much can be a waste of precious resources as well  we can’t deliver a perfect system, but we can determine how much testing makes sense given the characteristics of our project. 
3- Bug Tracking System  
Bug Tracking System dealing with bugs related to experimental operation, Bug tools are often deployed at this stage of the process to allow development teams to interface with customer/field teams testing the software to identify any real or perceived issues These software tools, both open source and commercially licensed, provide a customizable process to acquire, review, acknowledge, and respond to reported issues.
Test activity including also the following:
    •  Resolving Bugs 
    •  Testing Metrics 
    •  Managing the Test Environment 
    •  Regression Testing 
    •  Automated Testing 
    •  Managing Test Cases 
5- Sample Checklist for Unit & Integration Test Activities
To avoid IS projects failure at Integration and test Activities we can follow the following checklist table [2.2] [20].
 
Sample Checklist of Unit and Integration Test Activities
Type
Action
Yes
No
N/A
Remarks
Inspection





Documentation Artifacts
Have we compared code to relevant documentation, e g , Software Requirements and object model design documents?




Interface
Have we manually inspected interface methods signatures?




Implementation
Have we manually inspected the body of all methods?




Quality





Compiled
Has all code been successfully compiled?




Standards
Is all code properly formatted?




Black Box





Requirements
Are there tests for each requirement that is [partially] allocated to the object?




Messages
Are there tests for all messages to the object?




Boundary Values
Are there tests for the boundary ranges for the object input/output parameters?




Errors & Exceptions
Are there tests for generation of all specified errors and exceptions for the object?




Stress





Combinations of Messages
Are there combinations of test messages and exceptions sent to an object to test for unexpected synergistic interactions?




Large Number of Messages
If needed, have we defined a test to send a large number of messages to test an object if it has many potential states?




Performance





Timing
Have we devised a means to capture timing information for the object?




Instance





Single
If class has only one instance, is a test specified for that instance?




Multiple
If class has multiple instances, has a test been specified for a representative instance?




White Box





Every Operation
Has every operation been tested?




Every Exit
Has a test of every exit from every decision point of every operation been specified?




Every attribute
Has a test of every variable and constant attribute by appropriate operation been specified?




Every contained class
Has a test of every message that is to be sent to all contained classes for appropriate response been specified?




Every object-internal scenario
Has a test of every object internal scenario involving multiple operations and attributes been specified?




Every out-going exception
Has a test of every out-going exception been specified?




Every in-coming exception
Has a test of that every in-coming exception is handled correctly been specified?




Every exception handler
Has a test of every developer defined exception been specified?




State Model





Every state
Has a test that every state is achieved been specified?




Every operation in each state
Has a test of every operation in each state for appropriate action with prohibition of inappropriate operations been specified?




Every state transition
Has a test for every state transition to test all preconditions, post-conditions, and invariants involving the state been specified?




Table [2-2]:  Sample Checklist for Unit & Integration Test Activities [20 ]

2.2.5 Implementation activity: 
Part of the Software Development Life Cycle (SDLC): after the system has been tested during the Testing Phase, and accepted by the user, the system is installed and made operational in a production environment, in accordance with the requirements.  Projects, especially software development projects, can be a challenge from start to finish [19].  We know the scenario at the beginning, we don’t like to take the time to plan well, and we rush through the business requirements since we already know what the client wants. We have fun initially with the design work, but then we discover the technical environment is more complex than we thought and we start to get a headache. 
Implementation refers to the final process of moving the solution from development status to production status. Depending on our project, this process is often called deployment, go-live, or installation for the purposes of Lifecycle step, and all of these terms are synonymous with "implementation" 
There is no single way to implement an application. It depends on the characteristics of each IS project and the solution. Implementation can work when the solution is brand new and we are developing and testing in what will become the production environment. For instance, we may have a software application that needs to be deployed to our division offices all around the world. This could take months to accomplish and require a full lifecycle of planning, analysis, design, etc In this case; we might structure the implementation as a separate project. 
When we think about implementation, we should always start by understanding the level of complexity involved if the implementation is relatively straightforward, and then there is no reason for elaborate implementation processes. However, most projects have a number of implementation events to plan for and execute successfully.  
2.2.5.1 Implementation Process
Often, IS projects not run  smoothly because of problems in implementation The major overall problem with implementation is that we don’t always realize the complexity associated with deploying the solution. Therefore, many of the implementation details need to be planned ahead of time. We cannot start planning for implementation at the same time that we are actually implementing Depending on the size and nature of our project, the following areas should be considered:
1- Prepare for Implementation
2- Perform Training
3- Convert Data
3- Implement the Solution
3-1 Pilot Test the Solution 
5- Monitor the Solution
6- Turnover to Support
7- Obtain Final Approval
8- Terminate the Project
2.2.5.2 Early planning for Implementation Strategy
One of the key best practices for the project lifecycle is to plan early.  In fact, if our implementation were large enough, we would actually start by creating an Implementation Strategy in the Analysis Phase. This document should describe the overall approach to implementation, the scope, assumptions, risks, etc. We can make some fundamental decisions here in terms of how the implementation will take place - for instance, whether we will be running tests in parallel during implementation, whether the system will be down during implementation, etc. 
The next time we should think about implementation is in the Design Phase. Here, we will create a lower-level Implementation Plan. If we created an initial strategy document, the Implementation Plan will simply fill in many of the details. If we did not create the strategy document, we will need to mentally start at the higher level to understand what we wanted to accomplish, but then we would quickly jump into the planning details. The Implementation Plan is used to lay out the overall timeframe for implementation, who will be doing the work, what organizations are involved, the estimated effort and duration, etc. If the implementation involves new processes, we will need to account for how we will train the users, who will do it, etc. If the implementation needs to occur in multiple locations, we should describe the overall sequence. It is important to note that the Implementation Plan provides detailed information that can be shared with our stakeholders and project team. However, it is not to the level of the actual schedule.  
2.2.5.3 Build the Implementation Schedule
So far, we have completed an Implementation Strategy (during Analysis) and an Implementation Plan (during Design) However, we still have to actually build the schedule activities for deployment. This should be done during the Construct or Test Phases. At this point, we have already worked our way from high-level to low-level, so our remaining work is to actually define the activities, dependencies, timing, responsible person, etc.  
When we actually hit the Implementation Phase, we will have a schedule ready, and we can be reasonably sure that it will accomplish what we need since we have validated a high-level and low-level plan already. 
2.2.5.4 Communication as a Key at implementation:
In addition to planning, the other critical element of implementation is communication (Again, we are talking about a complex implementation. If our implementation is small, we might just throw the solution into production and explain what we did) If we follow an approach similar to what was previously described, we will have been communicating all along. The Implementation Strategy is meant to focus on the process from a client perspective and should have his or her approval before proceeding. The Implementation Plan should be circulated to everyone involved.  We need to communicate continually to reinforce the messages and make sure everyone is ready when implementation occurs.  
If we do not prepare an Implementation Strategy and Plan, we still need to at least communicate with people as far in advance as possible. For instance, a project team may be ready to implement a client-server application, and then they realize they need the workstation support group to install the application on the desktop. Of course, if the workstation support group is not prepared and communicated with ahead of time, they will not be happy. Other potential friction points include giving advance warning to the Help Desk when applications are deployed or when major changes occur, since they take many support calls from users if things don’t go right. 
            2.2.6. Software Maintenance and enhancing software activity:
2.2.6.1 Operations and Maintenance activity:
The installed system is monitored to ensure it performs as defined in the requirements, and any modifications needed to do so are incorporated. In addition, the system is being periodically assessed through In-Process Reviews to determine how the system can be improved.
Maintenance and enhancing software to cope with newly discovered problems or new requirements can take far more time than the initial development of the software. It may be necessary to add code that does not fit the original design to correct an unforeseen problem or it may be that a customer is requesting more functionality and code can be added to accommodate their requests.  
Software maintenance in software engineering is the modification of a software product after delivery to correct faults, to improve performance or other attributes, or to adapt the product to a modified environment [14].
Describes the six software maintenance processes as:
    • The implementation processes
    • The problem and modification analysis process, 
    • The process considering the implementation of the modification itself  
    • The process acceptance of the modification, 
    • The migration process 
    • The retirement of a piece of software  
To avoid project failure at Operations and Maintenance Phase there are a number of processes, activities and practices that are unique to maintainers and we must follow the Categories of maintenance in ISO/IEC 13763.
2.2.6.2 Processes, activities and practices:
Processes, activities and practices those are unique to maintainer for example:
    • Transition
    • Service Level Agreements 
    • Modification Request and Problem Report Help Desk
    • Modification Request acceptance/rejection
A common perception of maintenance is that it is merely fixing bugs.  However, studies and surveys over the years have indicated that the majority, over 80%, of the maintenance effort is used for non-corrective actions this perception is done by users submitting problem reports that in reality are functionality enhancements to the system. 
2.2.6.3 Maintenance in ISO/IEC 13763
E.B.Swanson initially identified three categories of maintenance: corrective, adaptive, and perfective [21] .These have since been updated and ISO/IEC 13763 presents:
    • Corrective maintenance: Reactive modification of a software product performed after delivery to correct discovered problems.  
    • Adaptive maintenance: Modification of a software product performed after delivery to keep a software product usable in a changed or changing environment.  
    • Perfective maintenance: Modification of a software product after delivery to improve performance or maintainability.  
    • Preventive maintenance: Modification of a software product after delivery to detect and correct latent faults in the software product before they become effective faults.  

2.2.7 Software Documentation activitiy
Preparing and transmitting documents connected with final payment, the organization of operation and maintenance manuals, assembling record drawings, Contractor follow-up, Owner move-in or start-up, Contractor call-back, and Contractor close-out. 
Documentation Recommendations 
Project documentation may include many kinds of documents (e.g., plans, task reports, development products, problem reports, phase summary reports)[22].  Project size, criticality (i.e. , the severity of the consequence of failure of the system), and complexity are some features that may affect the amount of documentation a project should need.  For example, the design documentation may consist of a single document describing both the system architecture and the detailed modules or it may consist of separate documents for the architecture and subsystems. The purpose of this section is not to specify how many documents should be required. Rather, this section identifies the information content needed for any project and the timeliness of requirements so that the information can be used by the vendor, the utility, and the NRC (National Research Council) reviewers.  Because the NRC reviewers cannot determine the characteristics of the software product without substantial technical specifications, project plans, and reports, NRC should specify the technical products of the vendor that the utility must provide NRC.  
This report expands upon the documentation requirements in [ASMENQA2]. While minimum content requirements are provided for several documents (which include the [ASMENQA2] requirements), some documents may be presented together as a single document.  Each of the planning documents may be kept simple and short, but the basic information identified in the recommendations should be addressed. Issues not addressed include the mechanics of document preparation, the medium of the documents (e.g., paper, disk), and requirements for modifying or updating documents. The impact of modern methodologies (e.g, information engineering) on documentation is also not addressed.  
2.2.7.1 Project Management Documentation
PMP's should include project organization, methods, tools, reporting, assurance activities, cost and scheduling estimates. Some of this information may be included in the SQAP (Software Quality Assurance Plan).  The vendor may have a generic PMP but every project will have some specific information which must be provided  
The following recommendations for a PMP are based on [IEEE1058] [23]  
    • Introduction  
        ◦ Project Overview  Summary of the project and its goals, the product, major work activities, major work products, major milestones, required resources, and master schedule and budget  Statement of requirements for assurance (e.g , SQAP, SCMP, SVVP)  
        ◦ Project Deliverables  Description of all items used by the developer and items delivered ultimately to the customer  
        ◦ Evolution  Procedures for reviewing and producing updates to the PMP  
        ◦ References, Definitions, and Acronyms.

    • Project Organization  
        ◦ Process Model  Relationships between project activities  Specification of timing of major milestones, baselines, reviews, work products, project deliverables, and sign-offs  Definition of project initiation and termination activities  
        ◦ Organization Structure  Description of the internal management structure including authority, responsibility, and communication  
        ◦ Organizational Boundaries and Interfaces  Project boundaries with other entities (customer, subcontractors, other system components)  Interfaces of SCM, SQA and SV&V  
        ◦ Project Responsibilities  Description of major project activities and who has responsibility for each activity  
    • Managerial Process  
        ◦ Management Objectives and Priorities  The philosophy, goals, and priorities for management activities such as reporting mechanisms, priorities among requirements, schedule, and budget, risk management procedures, and, procedures relating to existing software  
        ◦ Assumptions, Dependencies, and Constraints  Assumptions the project is based upon, events on which the project is dependent, and constraints the project is to be conducted under  
        ◦ Risk Management  Project risk factors including contractual, technological (e g , ability of technology to support the safety requirements), size/ complexity/criticality, personnel acquisition and retention, and customer acceptance risks  Mechanisms for tracking the risk factors and implementing contingency plans  
        ◦ Monitoring and Controlling Mechanisms  Tools and techniques used in monitoring and controlling adherence to the PMP including reporting mechanisms, report format, information flows, and review and audit mechanisms  
        ◦ Staffing Plan  Types and numbers of personnel assigned, required skill levels, and training necessary  
    • Technical Process  
        ◦ Methods, Tools and Techniques  Methods, tools, and techniques used to conduct project activities  References to standards, policies and procedures used  
        ◦ Software Documentation (may be included here or in SQAP)  The documentation requirements, milestones, baselines, reviews, and sign-offs  
        ◦ Project Support Functions  Reference to (or include here) the SCMP, SQAP, and SVVP  Responsibilities, resource requirements, schedules, and budget for the SCM, SQA, and software verification and validation (SV&V)  
    • Work Packages, Schedule and Budget  
        ◦ Work Packages  Description of the work packages (i e , task grouping) for the project activities  
        ◦ Dependencies  Interdependencies among work packages and dependencies on external events  
        ◦ Resource Requirements  Estimates of project resources including numbers and types of personnel, computer time, support software, computer hardware, office and laboratory facilities, travel and maintenance requirements  
        ◦ Budget and Resource Allocation  
        ◦ Schedule  
    • Additional Components  
        ◦ Reference to additional items such as subcontractor management, security for the project, independent V&V, training, facilities, installation, or product maintenance plans  
2.2.7.2 Software Quality Assurance Documentation
The recommendations for the SQAP are listed in Table [2.3]  
[ASMENQA2] and the IEEE standards are intended for specific projects, and therefore do not address a vendor's quality management program. A plan based on [ASMENQA2] may reference the vendor's general quality management program (e.g. one based on [ISO9000]),[24],[25] 
Requirements
[ASMENQA2]
[IEEE7301]
Assurance Activities 
SCM
SV&V

yes
yes

N/A
N/A
SQA Plan Elements
organization for quality responsibilities
identification of applicable software products
standards, practices, conventions
metrics
reviews
audits
documentation
error reporting and corrective action
access control
procurement/supplier
records management
training
tools, techniques, methodologies
risk management
yes
yes
yes
no
yes
no
yes
yes
yes
yes
yes
no
yes
no 
yes
yes
yes
yes
yes
yes
yes
yes
no
yes
yes
yes
yes
yes 
Required Documentation
Project Management Plan
SQA Plan
SCM Plan
Configuration Identification Documents
Configuration Change Control Documents
Configuration Status Accounting Documents
SCM Audits and Reviews Documents
SV&V Plan
SV&V Reports (includes Test Reports)
Software Requirements Specification
User's Manual
Software Design Description
Source Code Documents
Installation and Checkout Document
O&M Manual
Maintenance Documents
Stds & Procedures Manual

no
yes
no
no
yes
yes
no
yes
yes
yes
yes
yes
no
no
no
yes 

no
yes
yes
yes
yes
yes
no
yes
yes
yes
yes
yes
no
no
no
no 
Required Reviews
Management Reviews
Software Requirements Review
Software Design Review
Source Code Review
Test Report Review
Development Documentation Review
Installation & Checkout Review
none
yes
yes
no
no
yes
no 
SVVP, SCMP
yes
yes, 2 reviews
no
no
no
no
Table [2-3]:  Comparison of Requirements Project Management 
2.2.7.3 Software Configuration Management (SCM) Documentation
There are several SCM documents that should be produced.  The SCMP should describe how the SCM activities (configuration identification, configuration control, status accounting) will be conducted and documented.  The other documents report on the SCM activities.  The Software Configuration Management Plan (SCMP) may exist as a generic plan which can be referenced by any project.  Even on a small project it is easy to lose track of the relationship between tested software modules and modules in which software units have been changed. The following recommendations for an SCMP are based on [IEEE828] [IEEE828] is used not only because of its merits but also because it is serving as the base document for an international standard in ISO/IEC JTC1 SC7 on Software Engineering.  
Software Configuration Management Plan (SCMP).
    • Introduction  Overview of the SCM process, the purpose and scope of the SCMP  
    • Management  Procedures for establishing SCM organization, and for assigning tasks/responsibilities to all units in the organization  
    • SCM Activities  Includes configuration identification, configuration control, configuration status accounting and report, and audits/reviews  Include in the description how these activities are to be implemented, which units are responsible for which activities, etc  
    • Tools, Techniques, and Methodologies  Tools and methodologies to be used for implementing SCM activities  
    • Records Collection and Retention  Procedures for identifying, assembling, filing, storing, maintaining, and disposing of SCM documentation  
    • SCMP Maintenance  How the SCMP will be reviewed, updated, or revised while in use  
The following recommendations for the other SCM documents are based on [IEEE828]  
    • Configuration Identification Documents Items that comprise a baseline and the procedures for identification of configuration items.  
    • Configuration Change Control Documents Changes to the software. A description of the change, the rationale for the change, and the identification of affected baselines.  
    • Configuration Status Accounting Documents Information that is needed to manage a configuration item including the following information: status of specifications, status of proposed changes, status of product versions or revisions, reports of approved changes, and, reports of the implementation of installed updates or releases.  
    • Software Configuration Management Audits And Reviews Documents  
2.2.7.4 Software Verification and Validation (SVVP) Documentation
For large or long term projects, the SVVP and the detailed test documentation should be separate documents. For small projects, while the initial planning and SVVP should be completed during the requirements phase, additional information regarding the SV&V tasks, test designs, case, and procedures may be added to the SVVP later. There are several types of SV&V documents that should be produced. 
The following recommendations for an SVVP are based on [IEEE1012]  
Software Verification And Validation Plan 
    • Objectives  The objectives of performing SV&V should be stated  Sometimes thorough SV&V on every software requirement, design feature, and line of code may not be possible and specific objectives must be selected (e g , to show that critical performance objectives have been met, to examine software interfaces to the system, especially during failures external to the software)  
    • Management Activities  Review of V&V Plan, review of SV&V results, monitoring of SV&V activities, policies for iteration of tasks, etc  
    • Schedule of SV&V Tasks  Includes milestones and completion dates  
    • Organizations  Organizations involved in the SV&V activities and specific responsibilities  
    • Communication  Communication procedures between design team members, code team members, SV&V team members, and others involved in the project  
    • Summary of Resources  Staffing, tools, facilities, and finances needed to perform SV&V tasks, etc  
    • Facilities  Planning of facilities, especially tools for test activities (e g , simulation, test case generation) that require acquisition, staff training, and test  Planning and providing for test facilities may take as long as software development itself, so adequate time should be allotted  Delayed facility planning may result in inadequate test strategies and execution  
    • Testing  Distinction among the different types of tests, their objectives, and documentation  
    • Lifecycle SV&V  Detailed descriptions of SV&V tasks throughout lifecycle  Identifies the following: 
    • SV&V tasks and objectives for each lifecycle phase (e g , the specific safety objectives as a focus of each task)  
    • Methods and criteria used in performing the SV&V tasks  
    • Inputs and outputs required for each task  
    • Schedule for SV&V tasks  
    • Resources for performing SV&V tasks  
    • Assumptions concerning schedule, resources, or approach  
    • Responsibilities for performing the tasks  
    • SV&V Reporting  Description of how results of implementing the SVVP will be documented  
    • Anomaly Reporting and Resolution  Description of method for reporting and resolving anomalies, and tracking anomaly resolution  
    • Policy for Reiterating a SV&V Task  Description of criteria used to determine the extent to which a SV&V task should be repertories when input is changed  
    • Policy for Deviating from the Approved Plan  A good reviewer during final product evaluation may pick up some differences between planned and actual activities and ask many questions about the deviation  If procedures were in place and were followed, vendor may be able to demonstrate that the deviation did not detract from quality of the software, or its SV&V  
    • Configuration Control Procedures  Configuration management procedures on the documentation examined by SV&V tasks, if this information is included only in a SCMP, then reference to the SCMP should appear in the SVVP  
The following recommendations for other SV&V documents are based on [IEEE1012]  
Task Reports  Report on the status, interim results, or final results of a single well-defined task performed during a lifecycle phase  May include information about the relative efficiencies and difficulties of certain tasks, which may lead to adjustments in the development process, such as choice of methodologies or tools, reallocation of SV&V resources, alteration of schedules, etc  
Software Verification And Validation Phase Summary Reports Summary of interim or final results of all SV&V tasks performed during a lifecycle phase Should be issued for each lifecycle phase  If SV&V tasks are performed by different organizations, the phase summary report will help to consolidate the evaluations of the different organizations  
Anomaly Reports The location, impact, cause, criticality, and possible recommendations for each anomaly. Should be generated throughout the lifecycle Procedures for reporting anomalies might include using key words to characterize each anomaly, severity scales to assess its significance, and procedures for reviewing, approving, and dispatching of the reports. 
Software Verification And Validation Final Report A summary of all SV&V tasks, summary of task results, summary of anomalies and resolution, assessment of overall software quality, and recommendations This summary may be issued at the end of Installation and Checkout Phase or at conclusion of SV&V effort It can be used as the baseline for maintenance, to help improve the development process for the next project, and to call attention to outstanding unresolved anomalies  

2.2.7.5 Test Documentation
Although test plans for component, integration, and system testing are usually separate documents, for small projects they may be presented together in one document.  In these cases, the document should contain separate, complete sections for each type of testing, since the objectives and test strategies for each type of testing will still differ.  If more than one organization is responsible for testing (e.g., developer performs component and integration tests, but an independent agent performs system tests), then separate documentation should be maintained. Such an arrangement should be specified in the SVVP. The following recommendations for test documentation are based on [NASA2100], [DOD2167A], and [FUJII]. 
Test Plans  Includes: objectives and requirements, basic strategy (e g , how each type of testing will satisfy specific objectives, an example may be to state what design modules will undergo control flow analysis or data flow analysis), location and schedule of briefings, formal testing, and debriefings, facilities/tools, staff/resources, tentative schedule, review of test cases and procedures, configuration management, procedures for releasing test results, data reduction and analysis, and, review of test results  
Test Designs/Cases Includes: objectives of classes of tests (e g, logic tests, coverage, and boundary tests), traceability to requirements, constraints, initialization, termination, inputs, expected outputs, criteria for evaluating results, and, interfaces exercised  
Test Procedures Description of all test execution procedures including: equipment preparation, support software preparation, and, detailed test procedures (test scenario description, step by step instructions to perform test, actions required by equipment, action to perform in case of error, data reduction/analysis procedures)  
Test Report Summarizes test execution and results Includes: test records (date, time, location of test, test team members, witnesses, problems encountered, recovery procedures attempted, outcome of attempt), test results, and, evaluation and recommendations  
a- Installation and Checkout Documentation
During installation and checkout the software system is installed and tested to ensure that it performs as required in its operational environment Documentation for this phase should include the approval of the software for operational use and may include the user's manual, if installation and checkout is to performed by the end-user, rather than the vendor The following is a minimum content for an installation and checkout document based on [IEEEP1059].
Installation and checkout document 
    • Instructions for installation at each site, which accurately and completely represent the actual configuration and are appropriate for the expertise level of the expected installer  
    • SV&V activities during installation and checkout  
    • Schedule for installation, if software is to be installed at a large number of sites  
    • Procedural flowchart or checklist  
b-  Operation and Maintenance Documentation
O&M documentation should describe procedures (e.g., preparation, monitoring, fault recovery) executed to operate the software, as well as all modifications made to the software during this phase. The following recommendations for the operational procedures manual is based on [NASA2100] and [DOD2167A].  
Operational Procedures Manual 
    • System Preparation and Set-up Procedures  
        ◦ Power on and off  
        ◦ Initiation  Description of the following: 
            ▪ Equipment setup and the procedures required for pre-operation  
            ▪ Procedures necessary to bootstrap the system  
            ▪ Procedures for loading software and data  
            ▪ Procedures for initializing files, variables, or other parameters  
            ▪ Commands typically used during initiation  
    • Standard Operating Procedures  Detailed description of standard operating procedures including: 
        ◦ Input and output procedures  Description of the following: 
            ▪ Input and output media (e g , magnetic tape, disk, or cartridge)  Explain procedures for reading and writing on these media  
            ▪ Operating system control language  
            ▪ Operator procedures for interactive messages and replies (e.g. , which terminal to use, passwords, log on/off)  
        ◦ Monitoring procedures  Description of procedures for monitoring software during operation, including: 
            ▪ Applicable trouble and malfunction indications  
            ▪ Evaluation techniques for fault isolation  
            ▪ Conditions requiring computer system shutdown  
            ▪ On-line intervention, abort, and user communications  
        ◦ Off-line Routine Procedures  
        ◦ Daily operating procedures (e g , system back-ups, and logs for maintenance)  
        ◦ Standard safety and security procedures  
        ◦ On-demand procedures (e g , in response to user requests)  
    • Fault and Recovery Procedures  Description of automatic and manual procedures to be followed in case of a fault or abnormal condition in the software  Describe the immediate actions and subsequent recovery procedures for every anticipated trouble condition  
    • Emergency Procedures  Description of procedures to be conducted in emergencies, including: 
        ◦ Procedures for critical system failures  
        ◦ Environmental emergency procedures (e g , fires, hurricanes, or thunderstorms)  
        ◦ Safety or security emergency procedures  
    • Diagnostic Features  
        ◦ Diagnostic Procedures  Identification of each procedure and its purpose  Also description of the following: 
            ▪ Hardware, software, or firmware necessary to execute the procedures  
            ▪ Step-by-step instructions for executing the procedure  
            ▪ Diagnostic messages and the corresponding required action  
        ◦ Diagnostic Tools  Description of each tool and its application  
The following recommendation for maintenance documents is based on [EWICS2] and [IEEEP1219]  
Maintenance Documents Description of changes made to the software as a result of corrective, adaptive, or perfective maintenance The modifications should be documented as appropriate in new documents or in addenda to development documents (e g, SRS, SDD) Various documents are needed to record, track, and implement maintenance The following are examples of documents that may be used to perform maintenance  
    • Anomaly Report  Issued by the operations staff to initiate corrective maintenance  
    • Modification Feasibility Request:  Request issued by the user management to carry out a feasibility study on a proposed modification  Initiates perfective or adaptive maintenance  
    • Feasibility Report  Issued to user management to report on results of the feasibility study  
    • Validated Modification Request  Issued by user management either to reject the proposed modification or to proceed  
    • Maintenance Action Report  Issued to the user management after completion of the required preventive maintenance detailing the work done  
    • Revalidation Request:  Request to retest the system after completion of the required preventive maintenance, or implementation of a modification  
    • Revalidation and Configuration Management Report  Issued to user management after the necessary revalidation is performed, so user can decide if system should be returned to service  
2.2.7.6 Requirements Documentation
a- Software Requirements Documentation
There may be functionality in the system whose sole purpose is to prevent a safety hazard from occurring  Such functions need special attention throughout the software development, especially in its documentation  The same holds for computer security requirements, if computer security is not an issue for a product, the SRS should include a statement to that effect  In an SRS that requires a quality attribute, a quantified description of that attribute should be included in the SRS, for characteristics of quality attributes see [SOFTENG]  The following recommendations for an SRS are based on [NASA2100], [ASMENQA2], NIST180, [IEEEP1059], [IEC880], and [IEEE830] . 
Software Requirements Specification (SRS)
The purpose of the SRS is to provide a description of the software However, the SRS should also describe the relationship of the software component with the rest of the system The description may include a graphical representation and an overview description of the services the software provides for the system However, this information is not sufficient for any reviewer to judge the capability of the software to fulfill the overall system requirements  
    • Functionality  Functions the software is to perform, and how inputs are transformed into outputs  
        ◦ Functions  Description of all operations, equations, mathematical algorithms, logical operations, etc  Safety and security functions should be flagged  
        ◦ Inputs  Definition of inputs: specify sources of inputs, types, formats, units of measure, timing, and ranges of valid inputs, including accuracies and tolerances, disposition of illegal values, error messages  
        ◦ Outputs  Definition of outputs: specify destinations of outputs, units of measure, timing, range of valid outputs, including accuracies and tolerances, disposition of illegal values, error messages  
        ◦ Data Handling  Requirements for database or dictionary  
    • Performance  Specification of each performance requirement in testable and quantitative terms  The following should be addressed: 
        ◦ Timing and sizing requirements  
        ◦ Sequence and timing of events, including user interaction tolerances  
        ◦ Throughput and capacity requirements  
        ◦ Error detection, isolation, and recovery requirements for data and processes  
        ◦ Fail-safe requirements  
    • Quality Attributes  Non-time-related requirements that software must meet such as usability, efficiency, reliability, maintainability, and portability  
    • Design/Implementation Constraints imposed externally (e g , technical standards, marketing department), hardware limitations (e g , use of a specific compiler, limits on memory), and by project requirements (e g , safety features)  
    • External Requirements  
        ◦ Interfaces (to other systems within or outside nuclear power plant)  User, hardware, software, and communications interfaces  The purpose, requirements (e g , performance, safety, security), and implementation constraints for each interface  For example, requirements for user interface may include screen descriptions and report descriptions  
        ◦ Environment  Operating conditions (e g , plant commissioning, refuelling)  
    • Safety Requirements  
        ◦ Identification of the stable modes and error conditions of the software  
        ◦ Software requirements identified from hazard analysis  
        ◦ User Interactions (e g , requirements for signals that indicate safety problems and for information that notifies user of the status of other safety functions)  
    • Security Requirements  Includes access limitations to the system (e g , log-on procedures and passwords), data protection and recovery methods  These requirements should be prioritized  Security issues may also be identified by hazard analyses  
    • User Documentation  Description of requirements for content of user documentation  
    • Man-Machine Specifications  Description of requirements for appropriate and timely signals between system and operator, automatic system actions to prevent danger or damage, etc  
b- User Documentation
[ASMENQA2] identifies the minimum content for user documentation including a description of the following: user interaction with the software, training, input and output specifications and format, system limitations, anticipated errors and user response, and user and maintenance support  However, requirements concerning security and safety (e g , threats, how to override problems, how to respond to warning signals) are not specifically addressed  The following recommendations for user documentation are based on [NASA2100], [ASMENQA2], and [DOD2167A]  
User's Manual 
    • Overview of Purpose and Functions  The purpose and main capabilities of the software, and its overall operation in terms of functions, options, and restrictions and limitations  
    • Installation and Initialization  The procedures for installing, tailoring, and initiating the software including the following: 
        ◦ Equipment setup  
        ◦ Power-on and power-off  
        ◦ Bootstrap and load  
        ◦ Initiation commands  
        ◦ Initialization of files, variables, or other data  
        ◦ Tailoring, reconfiguration, adaptation  
    • Restart  Procedures for restarting software after initialization failures, abnormal termination  
    • Termination  Procedures for terminating operation, and determining whether normal termination has occurred  
    • Recovery Steps  Recovery procedures in terms of: check points, collection of failure data, restoring files, and, restoring devices to operational mode  
    • Inputs  
        ◦ System inputs  Description of system inputs to the software that may occur while the software is in use and may affect the software's interface with the user (e g , inputs from a remote sensor)  Include applicable attributes of the input such as format, frequency, effect on the software state or mode, allowable range, and units of measure  
        ◦ User inputs  Description of user inputs including commands, data, and option selection  
    • Outputs  Description of expected outputs of the software including results of functions, and error messages  
    • Potential Hazards  Description of user response to unexpected events or problems that could cause serious hazards if user does not respond, description of activities that could cause the need for user response or override  
    • Functions and their Operations  Description of each function in terms of: purpose of function, step-by-step procedures for execution, and, related functions  
    • Error Messages  Error messages output by the software, the meaning of each error message, and the corresponding corrective actions to be taken  
2.2.7.7 Design and Implementation Documentation
In general, design rules will also be implemented by the source code (e g, the modularity features and complexity of the design should transfer to the source code) It is important to ensure that the vendor's plans for modularity and complexity are stated in the design documentation and the modularity and complexity of the design are not lost during implementation This report addresses design and implementation/source code in two separate documents  
a- Design Documentation
The following recommendations for a design document are based on [NASA2100], [DOD2167A], [APPGUIDE], P1059, and [ASMENQA2]  
Software Design Description 
    • Architectural Design  
        ◦ The role of the software within the system and the relationships between this software and other software components  
        ◦ Assumptions about the environment including operating system, user interface, program, data management, data interchange, graphics, and network services, especially assumptions on which safety functions and computer security needs may be based  
        ◦ Architectural Design Description  The design of the software including: 
            ▪ Logical or functional decomposition  
            ▪ Description of the modules including mention of the safety and computer security functions  
            ▪ Design of the modules in terms of execution control and data flow including flagging safety and security functions  
            ▪ Design requirements/constraints on the modules  
            ▪ Relationships and interactions between the modules  
            ▪ A schema for the allocation of functions to modules  
            ▪ Logical data design - conceptual schema  
            ▪ Entity/data identification and relationships  
            ▪ Timing and sequencing  
            ▪ Implementation constraints  
            ▪ Each state and mode the software operates in and the modules that execute in each state and mode  
            ▪ Execution control and data flow between modules in the different states and modes  
            ▪ Memory and processing time allocation to the modules  
        ◦ External Interface Design  Allocation of the software's external interface requirements to modules  The design of each interface in terms of: 
            ▪ Information description  
            ▪ Initiation criteria  
            ▪ Expected response  
            ▪ Protocol and conventions  
            ▪ Error identification, handling and recovery  
            ▪ Queuing  
            ▪ Implementation constraints  
            ▪ Requirements relative to safety and computer security  
        ◦ Software requirements allocation to modules  
        ◦ Database description  Reference should be made to the document describing the database, its platform, dependencies, etc , or described it here  
        ◦ Human interaction  Screens, types of alert mechanisms  
        ◦ Tracking to any other systems in the plant that have safety functions  
    • Detailed Design  
        ◦ Modules Design and Traceability to Architectural Design  The design of the software into its modules and traceability between the architectural design modules and software modules  The traceability with flags on safety features and computer security requirements  Descriptions of the modules should include: 
            ▪ Inputs and outputs  
            ▪ Functions  
            ▪ Data descriptions and relationships  
            ▪ Diagrams  
            ▪ Control and signal flow  
            ▪ Error handling/messages  
            ▪ Interfaces between modules  
            ▪ Packaging details (placement of modules)  
            ▪ Flags on safety, computer security functions  
        ◦ Detailed Design of Modules  Design information necessary to code the modules  The information should include: 
            ▪ Detailed design to the lowest level  
            ▪ Functions or operations  
            ▪ Algorithms  
            ▪ Specific data definitions including data conversions  
            ▪ Local and global data  
            ▪ Parameters for initiation and adaptation  
            ▪ Logic flow (control flow, timing variations, priority assignments, interrupt priorities and handling)  
            ▪ Error detection and handling  
            ▪ Physical data design (internal schema, query language, access method, key, record, and data element definition and structure)  
            ▪ Device interface  
            ▪ Interrupts and signals  
            ▪ Limitations that restrict performance of modules  
        ◦ External Interface Detailed Design  The traceability of the external interface design of the software into its modules  A description of each external interface including: 
            ▪ Type and purpose  
            ▪ Description of the data transmitted across the interface including purpose, source and destination, data type, data representation, size, units of measure, limit/range, accuracy, precision/resolution  
            ▪ Messages transmitted and the assignment of data elements to each message  
            ▪ Priority of interfaces and messages transmitted across them   
            ▪ Protocol (fragmentation and reassembly of messages, error control and recovery procedures, synchronization, flow control, data transfer rate and minimum transfer rate, routing, addressing and naming conventions, transmission services, status, identification, notification and other reporting features, security)  
            ▪ Description of user responses to system/software safety/security violations  
        ◦ Coding and Implementation Notes  Information such as stubs for incremental development and use of compiler options  
        ◦ Information on Planning, Designing, Executing Tests  
b- Source Code Documentation
A source code manual should be developed for a project, unless it already exists within the vendor organization, in which case it should be referenced by the SQAP The source code manual, which may be very general, is used by the programming staff, and possibly also by reviewers when evaluating a product  
Source Code Manual Description of the standards and practices for coding, including rules on issues such as the format of the code, maintaining the modularity, complexity, data flow of the design, and commenting the code (e g, explanations of inputs and outputs) Deviations from the rules stated in the manual should be justified in the source code where deviation occurs and in the accompanying documentation  
The purpose of supporting documentation for source code is to describe the source code and enable traceability to requirements, design, and test cases this documentation is especially useful to the development staff, to new staff members, and to the maintenance staff Examples of information that might be included in this documentation are the following: 
Supporting Documentation for Source Code 
    • Explanation of deviations from the design  
    • Explanation of deviations from the source code manual  
    • Explanation of deviations from the programming language standard (e g , the use of a dialect of the language)  
    • Charts showing the relationship of code modules to design components, or a listing of subroutines that support one design module  This is helpful if the design is at a higher level than the code  
    • Interface information, if the design is at higher level than code  
    • Identification of the most critical modules for safety and security  
    • Comments within modules  
    • Description of how "controlled practices" are used (e g , use of techniques to offset risks of using pointers) [NIST190]  
2.2.7.8 Reporting
The purpose of reporting is to communicate to others information on specific deficiencies in the software or to summarize specific tasks or groups of tasks performed during development (e g , SQA activities and SV&V activities)  These reports should be used during formal reviews that assess the current product and development activities, as well as to improve the development process for future projects  Reports should be generated as necessary (e g , for each anomaly or at the completion of each major task)  There is no set number of required reports, however, the vendor should avoid producing an overabundance of unnecessary reports  Examples of necessary reports for an activity during a particular lifecycle phase include task reports and anomaly reports  
2.2.8   IS Contract and issues related to post construction activities? 
Reviewing the post Construction issues that should be addressed in the contract 
2.2.8.1 Project closing activities 
Co-ordinate and expedite the completion of project  submittal requirements prior to contract close-out, including certificate of substantial completion, completion of punch list work, guarantees/warranties, and final payment application  work with the Client in final IS Project cost accounting, providing Project cost records and general Project documentation as required and established at the outset of the Project 
2.2.8.2 Final Cost Report activity
 Final Cost Report summarize total Project costs in a final report, listing all change orders and identifying any unresolved issues which may have a cost impact All reports that have been issued during the design and construction activities will be prepared in final form, summarizing the Project history Cost accounting will be prepared with the final resolution of all expenditures These reports should officially note the dates of substantial completion and commencement of warranties 
2.2.8.3 Final Payment activity
When the project manager has completed all punch list items, we will arrange with the software house and the Client for a final inspection of the facility When the Client is satisfied that the work has been satisfactorily completed; we will make recommendations, in writing to the Client, for final payment to the Contractor  
2.2.9 Security policy activity
This policy refers to the integrity, availability, confidentiality, Non-repudiation, Risk management and accessibility Of information and communications systems, software and associated data 
Information security means protecting information and information systems from unauthorized access, use, disclosure, disruption, modification or destruction  
2.2.10 Risk Management activity:
Risk management is the process of assessing risk, taking steps to reduce risk to an acceptable level, and maintaining that level of risk. Managers analyze risks for many aspects of their business, they consider alternatives and implement plans to maximize returns on their investments   A risk management process for information systems enables managers and their organizations to build an in-depth knowledge about their systems and how they are interrelated   
Many of the documented approaches to risk management advocate a process or cycle of stages 26], [27], An overview of the main stages recommended in most of these approaches is given below 
1	Risk Prioritisation ranking the list of main dangers by creating a list of important risks (those of high probability and severity) 
2	Risk Management Planning   Deciding how to address each of these items and developing contingency plans for co-ordinating these individual plans into the overall project plan before the start of the implementation stage 
3	Risk Resolution   Attempting to eliminate or resolve the important items of risk before they can have a negative impact 
3	Risk Monitoring and Control  Once the project is underway the project manager should track the success of reassessing, minimising and resolving risk items and take further corrective action    
The apparent popularity of, and agreement about, this type of staged lifecycle indicate that it has been accepted by many as a sensible way to approach risk management. One of the biggest problems with these approaches is their tendency to summarise the processes of the stages   Many of them do not give useful guidelines or information for an analyst or manager to follow   For example the first stage is usually labelled: “identify hazards”, or “list all possible failure causes”, or “danger spotting”, yet there are few explanations of how to achieve this objective   Subsequently most of these approaches advise the reader to estimate the consequences and importance of each risk   Again, how one carries out or arrives at this assessment is not clear  It might be helpful to provide more specific and detailed help with these stages 
2.2.10.1 Risk Identification and Estimation
While many of the authors and studies mentioned in this research have reported on statistics about, and typical causes of, IS projects failure and several have recommended ways to try to improve things, none of them seem to have related their work to the development of clear frameworks that provide linked risk analysis tables  
According to [26] research that done by Malcolm Bronte-Stewart. This paper considers the costs of failure, compares views of why IT projects go wrong, looks at some examples of IT project failure and presents a three phase technique for estimating an IT project’s risks before too much effort and money is spent.

2.2.10.2 Risk Factors 
This group of researchers [28] discussed and reviewed common mistakes, assumptions, delays and disruptions that can cause an IS projects to fail.  From this analysis of causes of IS projects failure it is argued that we can establish a better overall picture of the factors that involve the greatest risk of problems such as cost and time over-run in IS projects.  The following risk list is an attempt to capture the most important issues that typically contribute to IS projects failure   It includes hints and questions that are supposed to help to explain each issue:
    • Executive management and user commitment to change and their sense of stability in their jobs (to what extent are they happy with the way things are?) 
    • Clear measurable business case objectives linked to organisational strategy (is there agreement about the aims and deliverables of the project?) 
    • Project size (the larger the project, the greater the risk) 
    • Project definition and plan, (how clear and precise are the Terms of Reference?)
    • Competence of consultant or manager (has he/she managed this before?) 
    • Importance given to necessary cultural and organisational changes (the client may not realise their significance) 
    • Health and vulnerability of the organisation (is it in desperate need of change?)
    • Number and quality of competing projects (and availability of resources)
    • Users experience of technology (less risk if using systems that they are familiar with) 
    • User's ability to identify and explain their requirements and their involvement in the project (the more they can specify needs and take part in the project the more they are likely to want and support the implemented solution) 
    • Number of system interfaces between the proposed system and other systems which the consultant may have less control over (co-ordination and testing are important factors as well) 
    • Potential inaccuracy of time and cost estimates (how reliable are they?) 
    • Functional complexity, known (and any suspicion of, as yet, unknown) complexity must be allowed for 
    • Number of user departments, (the more departments and bosses there are, the more problems there will be)
    • Newness of technology, try not to deal with unknowns since it is risky to be the first to pioneer or try something (fools rush in where angels fear to tread) 
    • Project team’s experience of area, (are the development team members familiar with these applications?)
    • Care to be taken over project monitoring and control (quality assurance)
    • Learning curve, (how long will it take to adapt, and is the company used to change?)
    • Reputation and reliability of suppliers (can one trust them?) 
    • Number of vendors / contractors, (incompatibility, interdependence and delivery date problems)
    • Number of sites, (is the installation scattered and are there many remote locations?)
    • Project duration and number of phases, (long projects are more likely to hit problems and later phases may be dependent on the completion of earlier ones and/or earlier phases may require re-work as a result of testing)
Not surprisingly, it turns out that this list of factors that seem to contribute most to project success and failure is long and rather messy At first glance it is difficult to see how the list could easily be used as a tool for project risk estimation.  There are plenty of issues to be taken into account and questions to be asked but few guidelines on how to apply them.  Apart from bearing these factors in mind, how should a risk analyst make use of the list?  
Different factors will be of different significance in different situations at different times - it may be useful to provide for a way to give relative weightings to the various issues   Some factors may be easier to judge and measure than others - suggestions of scales and/or a range of values or references may help the analyst to make assessments.  Some factors are more dynamic than others and are likely to fluctuate more quickly in their importance depending on issues such as market conditions and IT system options - it may be better to divide the list into sections to take account of this.  Some factors concern the organisation, some concern users and stakeholders, some concern project management and the development team, some concern project objectives, scope and constraints, some concern technology.  Furthermore all of these factors are not always applicable or meaningful and a risk evaluation of one project probably cannot be compared directly to another.  To summarise, it may be most useful to categorise and subdivide the list and provide for a way to attribute subjective values and weightings to each of the different factors for any project under consideration. 


2.2.11 Disposition activity:
When the system is terminated it must be done in an orderly fashion, in order that it can be reactivated in the future if needed Particular emphasis is given to either migrate the data to another system, or archiving the data in accordance with applicable records management regulations and policies, for potential future access. 
A project initiates disposition activities at the conclusion of its lifecycle when determination is made to retire the system. When retiring the system, the project team typically performs the activities identified in next section.  Each activity is subsequently decomposed into the main tasks that the project team should execute to ensure that it successfully and efficiently accomplishes the activity.  The activities and tasks are listed in the recommended order of completion; however, the actual order will depend on the particular system. 
Disposition key Activities including the following [29]:
a- Plan system disposition
b- Publish Notice of Deletion in the Federal Register
c- Retire system and archive system components, data, and documentation
d- Close out the project
A- Plan system disposition
1- Determine the scope of the disposition effort 
2- Identify key disposition milestones and chart a detailed schedule of tasks 
3- Send out a broadcast message notifying the user community, technical personnel, and other affected stakeholders of the planned disposition include any pertinent instructions 
3- Determine approach for disposing system components, data, and documentation 
5- Identify equipment to be designated as excess 
6- Prepare the Disposition Plan 

B- Publish Notice of Deletion in the Department works to record Egyptian software
 1- Contact the Department works to record Egyptian software.  The Privacy Act requires that a notice of deletion be published in the Department of artistic works Egyptian recording software when a system of records is discontinued, combined with another system of records, or determined to be no longer subject to the Privacy Act. 
2- Provide the Department works to record Egyptian software with the following information to ensure that it has the information needed to complete the Notice of Deletion:
a- System name
b- System identification number
c- Most recent date and page of the publication of the System of Records
d- Reason for the deletion of the System of Records 
3- Download the relevant technical architecture standards documentation 
C- Retire system and archive system components, data, and documentation
1- Send out a broadcast message update notifying the user community, technical personnel, and other affected stakeholders of the specific day and time that the system will be removed from production 
2- Terminate system operations 
3- Remove the system from the production environment 
3- Coordinate with other project teams to migrate any system software or data to be used by other systems 
5- Archive the system software: Copy the system software onto permanent storage media and store the media in the location designated in Disposition Plan 
6- Archive the system data: Copy the system data onto permanent storage media and store the media in the location designated in the Disposition Plan 
7- Archive the system documentation and store the documentation in the location designated in the Disposition Plan 
8- Dispose of the excess equipment as stipulated in the Disposition Plan and in accordance with ICE policies for disposing of excess equipment 
9- Dispose of the media in accordance with the security requirements 
10- Notify the System Owner and any other key project stakeholders when the system disposition has been completed and all system components, data, and documentation have been archived 
11- Update the Disposition Plan to reflect the actual disposition
D- Close out the project
1- Plan the project close out 
2- Coordinate the transfer of project staff 
3- Archive or dispose of project records 
3- Transfer or dispose of facilities used by project staff 
5- Update the Project Management Plan 
Disposition Document Artifacts
The project team records the evidence of its work in a set of document artifacts:
    • Disposition Plan
    • Notice of Deletion
    • Project Management Plan
    • Disposition Letter 










































Chapter 3
Literature review about common causes and effect of IS development and ERP system Projects Failure 
3.1 Introduction:
Much has been written about the extent and causes of IS projects failure and numerous studies have discussed a range of recognised risk factors including those concerning: project leadership and management, organisational culture and structure, commitment and patterns of belief, user involvement and training, developer expertise, technology planning, scope and objectives setting, estimation and choice/use of methodology,[30][2][4]. 
Despite this Information systems projects continue to fail at an alarming rate, according to a  Standish Group study, only 16% of all projects are fully successful, 83% fail. Failed IS projects cost US companies an estimated $135 Billion per year causing serious business problems. Many research studies have been conducted to determine the reasons for project management failure [31] [32].
Project Managers (PMs) are usually held responsible for the success or failure of their projects; therefore, most studies revolve around PMs Skills. The development and design of a project requires skills that range from soft people skills to sophisticated technical skills. This study looks at the main reasons for project failure, and analyzes whether they pertain to soft or hard skills. Before discussing the reason for project failure, it is important to define “failure” in the context of project management [31] 
Researches continually show that many information technology (IS) projects all over the world have difficulties to be completed on time or on budget or on scope, In fact many are failed before completion or not implemented. Project success is affected by many factors such as project team, suppliers, Customers and stakeholders; the truth is that they can all provide a source of failure. 
Surveys, research and government reports show that IS projects tend to go wrong and those developers and those in charge continue to underestimate risk.   
The category definitions for the Standish Group research [32] are as follows:
• Successful projects were completed on time and on budget, with all the features and functions that initially specified. 
• Failed projects were cancelled before completion or never implemented.
• Challenged projects were completed and operational, but over-budget, over the time estimate, and with fewer features. 
The Standish Group research confirms that large projects are more likely to fail than small projects [32]. That is likely because large projects tend to be more complex. Although success rates increased, and failure rates decreased during the six years of the study, the numbers still indicate a problem. It is an obvious question to ask “why” when confronted with data such as the Standish data. Before answering this question, it is important to consider a failure example of an IS projects.

3.2 Success and Failure of IS development Projects:
Software projects fail when they do not meet the criteria for success. Most of the IS projects run over budget or are terminated prematurely and those that reach completion often fall far short of meeting user expectations and business performance goals33].
So far we have looked at raw statistics and typical or common causes of failure with little attention to the assumptions and complexity that underlie notions of success and failure. 
Projects are often defined as having particular characteristics ([26]. A project is likely to:
    • Be a unique set of coordinated activities, a one-off programmed,
    • Have a few, clear, specific objectives,
    • Have a life-cycle, usually categorized into manageable stages,
    • Have an identifiable start and end,
    • Have defined budget, schedule and performance parameters,
    • Require the use of many resources that may also be needed on other projects,
    • Need a special team of people 
These tangible characteristics distinguish projects from ordinary, routine operations and they may be used as criteria against which to measure a project’s success. 
Success and failure may vary over the life of a project and it is not always obvious when we should make a yes/no assessment [34]. 
Furthermore it may be almost impossible to find agreement about whether a project succeed or failed. When trying to make sense of the ambiguity of notions of success and failure it may be useful to view them as being subjective judgements. The notion that a project failed may mean that it did not meet certain people’s objectives or that it produced what were seen by some as undesirable outputs [35].
Suggest that IS project success can be classified by four views [36] (the system, the users, the organization and the strategic view) of short-term and long-term objectives, Table [3.1].



System
User
Organisational
Strategic
Short-term Objectives 

Reliable (bug-free) system 

Satisfying user needs 

Improving the effectiveness of business operations
Improving customer service
Long-term Objectives

Easily maintainable system
Improving productivity of managers
Generating operational benefits
Enabling cooperative partnership
Table [3-1]: A classification of short and long-term objectives [36].
Ewusi-Mensah [37] states that IS projects are unique in that they are conceptual in nature and require the intense collaboration of several different groups of stakeholders including IS staff, users and management. IS projects are usually undertaken in teams and therefore subject to the vagaries of group dynamics, interactions, coordination and communication. The diverse backgrounds and training of the various team members and other people associated with the project make the ability to communicate and coordinate the activities of the group extremely important.
From the above it seems that arriving at simple and agreeable definitions about objectives, timescales and measurements of what constitute success and failure in IS development  projects is problematic.  On the other hand there appears to be wide recognition that IS development projects are often complex, involving many viewpoints and agendas. 
3.3 Common causes and effect of national & International IS development and ERP systems projects failure 
In this section I'll introduce some statistics about national and international IS projects failure, in these statistics I'll differ between the development software projects and the ERP software projects as follows:
3.3.1 International IS development projects failure:
3.3.1.1 Analysis of  Rate of failure at IS development projects: 
Many surveys provide statistical data over the rate of failure of IS a development project over the last 15 years as follows: 
At year 1993 
    • According to Chaos Report (1993) – only 16.2% of projects were successful by all measures. Of the 70% of projects that were not successful, over 52 percent were partial failures and 31% were complete failures.
At year 1995: 
    • According to The Chaos Report [38], 1995, The Standish Group research predicts that 31.1% of projects will be cancelled before they ever get completed. Further results indicate 52.7% of projects will cost over 189% of their original estimates.
    • The OASIG Survey [38]:   7 out of 10 IS projects “fail” in some respect and the IT project success rate quoted revolves around 20-30% based on its most optimistic interviews.
    • According to an often-cited report called “CHAOS” from The Standish Group International [38]surveying 365 companies found that of the 3,682 technical projects (involving change and information technology) undertaken (across a range of industries) only 12% to 16% were fully successful. These few successful projects were on time, within budget, and delivered with the full complement of promised requirements. Nearly 53% were “challenged”, had cost overruns and impaired functionality or were completed unsuccessfully. Of these, the average cost overrun was 189%. The average time overrun was 222%.  Overall, only 61% of their required features were delivered. The balance, the remaining 31%, was cancelled at some point in the development cycle. Their research aimed to discover the main reasons why IT projects fail.
    • At year 1996: 
According to the OASIG [26], a DTI-supported special interest group (SIG) concerned with the organisational aspects (OA) of IT headed by Professor Chris Clegg of the University of Sheffield, studied the extent to which investments in IT in the UK were meeting their objectives. They interviewed a group of leading researchers and consultants who between them had over 900 years of professional work in the field, and were drawing on the experiences of over 13,000 organisations. The report to the UK’s Economic and Social Research Council published the following disturbing findings on the eventual outcomes of IT projects:
    • 80% to 90% do not meet their goals 
    • 80% are delivered late and over budget 
    • 30% fail or are abandoned 
    • Over 60% do not address training and skills requirements sufficiently 
    • More than 75% do not integrate business and technological objectives properly 
At year 1997: 
According to KPMG [Error: Reference source not found39] Canada Survey: Over 61 % of the projects that were analyzed were deemed to have failed.

At year 1998: 
According to Bull Survey [40]: the French computer manufacturer and systems integrator, BULL, requested an independent research company, Spikes Cavell to conduct a survey in the UK to identify the major causes of IS project failure in the finance sector. The main IS project failure criteria identified by the IS and project managers were: 
    • Missed deadlines (75%)
    • Exceeded budget (55%)
    • Poor communications (30%)
    • Inability to meet project requirements (37%) 
At year 2001: 
    • The Conference Board Survey (2001):  30 % of the projects failed.
    • A survey for the British Computer Society in 2001 [41], found that only around one in eight projects (130 out of 1,027 projects or 13%) were successful (i.e.  Delivered on time, cost and to specification. For development projects the figure was even worse with less than 1% succeeding. The survey found that poor management of the requirements and scope of a project were the most common reasons for failure. Risk, communication and the change process were also badly managed. 
    • Conference Board Survey (2001) – 30 % of the projects failed to achieve their business case within one year of going live.
    • Robbins-Gioia Survey (2001) – 51 % viewed their ERP implementation as unsuccessful.

At year 2003: 
    • According to Oxford University Regarding IT Project Success (Saur & Cuthbertson, 200342])  
        ◦ Successful: 16%
        ◦ Challenged: 73%
        ◦ Abandoned: 10%
    • According to the British Computer Society 2003 (Jaques, 2003) [5] only 16% Successful projects.
    • According to the Standish “Chaos” reports. The 2003 report shows [43]:
    • Successful Projects: 29%
    • Challenged Projects: 53%
    • Failed Projects: 18%.
At year 2006:
    • Chaos Report (2009) – Only 32% of projects have been defined as being ‘successful’ compared with 35% in 2006.
At year 2007: 
According to TCS (Tata Consultancy Services) 2007[44][45].
    • 62% of organizations experienced IT projects that failed to meet their schedules.
    • 39% suffered from budget overruns.
    • 37% had higher-than-expected maintenance costs.
    • 31% failed to deliver the expected business value and ROI.
    • 33% file to perform against expectations.
According to Avanade Research Report (2007) [45]
    • 66% of failure due to system specification.
    • 51% due requirement understanding.
    • 39% due to technology selection.
According to ESSU (European Service Strategy Unit) Research Report 2007 [46]
    • 57% of contracts experienced cost overruns.
    • 33% of contracts suffered major delays.
    • 30% of contracts were terminated.
    • 12.5% of Strategic Service Delivery Partnerships have failed.

According to Dynamic Markets Limited 2007 Study of 800 IT managers across eight countries show that: [45]

    • 62 % of organizations experienced IT projects that failed to meet their schedules
    • 39% budget overruns
    • 37% higher-than-expected maintenance costs
    • 31%  failed to deliver expected business value and ROI
    • 25%+ of all software and services projects are cancelled before completion
    • up to 80 percent of budgets are consumed fixing self-inflicted problems
” Gartner also reports that “testing consumes 25% to 50% of the average application life cycle and often is viewed as adding no business value” 11 percent of business organizations consider technology a “strategic weapon,” study by Info-Tech Research Group.
    • According to Dr. Dobb’s Journal (DDJ) Survey (2007) – 72% of all Agile projects were successful, compared to only 63% of traditional of Data Warehouse projects
  At year 2009: Standish is probably the most referenced. They define success as projects on budget, of cost, and with expected functionality [43]. There are several updates to the Standish “Chaos” reports. The 2009 report shows table [3.2]:
Table [ 3.2] Standish Findings By Year Updated for 2009 [43]
 
1993
1996
1998
2000
2002
2003
2009
 
Succeeded
16%
27%
26%
28%
33%
29%
32%
 
Failed
31%
30%
28%
23%
15%
18%
23%
 
Challenged
53%
33%
36%
39%
51%
53%
33%
 

At year 2010: 
According to Bob Lawhorn presentation on software failure [33]. Poorly defined applications (miscommunication between business and IT) contribute to a 66% project failure rate, costing U.S businesses at least $30 billion every year (Forrester Research)
    • 60% – 80% of project failures can be attributed directly to poor requirements gathering, analysis, and management (Meta Group)
    • 50% are rolled back out of production (Gartner)
    • 30% of problems are found by end users (Gartner)
    • 25% – 30% of all spending on projects is wasted as a result of re-work (Carnegie Mellon)
    • Up to 80% of budgets are consumed fixing self-inflicted problems (Dynamic Markets Limited 2007 Study)

At year 2011: According to New Standish Group report at March, 2011 shows more projects are successful and less projects failing [4743]. In the just-released report, CHAOS Manifesto 2011 [45]. The Standish Group's shows a marked increase in project success rates from 2008 to 2010. These numbers represent an increasing in the success rates from the previous study, as well as a decrease in the number of failures. The low point in the last five study periods was 2003, in which only 28% of the projects were successful. 
From all the pervious rates and reports we found that percent of success IS development projects are increased year by year in last 15 years.
From all the pervious reports we can summarize the statistical data of the rate of failure of IS development projects over the last 15 years as follows: 
Table [3.3] Statistical data over the rate of failure of IS development projects over the last 15 years 
 
1993
1995
1996
1998
2000
2002
2003
2003
2006
2007
2009
  2010
Succeeded
16%
16%
27%
26%
28%
33%
16%
29%
35%
25%
32%
35%
Failed
31%
31%
30%
28%
23%
15%
10%
18%
19%
30%
23%
25%
Challenged
53%
53%
33%
36%
39%
51%
73%
53%
36%
35%
33%
30%
  From the pervious data and the following charts Graph [3.1], Graph [3.2] we found that the rate of the IS development projects failure still very high although. According to New Standish Group report at March, 2011 shows more projects are successful and less projects failing 47][45]. In the just-released report, CHAOS Manifesto 2011[47][45], The Standish Group's shows a marked increase in project success rates from 2008 to 2010. These numbers represent an increasing in the success rates from the previous study's, as well as a decrease in the number of failures. The low point in the last five study periods was 2003, in which only 28% of the projects were successful due to decreasing project challenged rate. But the rate of IS development projects frailer still very high.

Graph [3.1] Statistical data showing the rate of failure, success and Challenged of IS development projects over the last 15 years


Graph [3.2] statistical data showing the rate of IS development projects over the last 15 years.
3.3.1.2 Analysis of the costs of IS Projects development Failure:
There are so many studies [10] attempting to quantify the cost of software failures.  They don’t agree on percentages but they generally agree that the number is at least 50 to 80 billion dollar range annually.  In this section I'll introduce many statistic reports and researches that proof that the Software Project Failure Costs Billions [11].
Planning and organising projects, establishing requirements for change, selecting and purchasing suitable software and hardware and designing effective web sites are important business decisions. Yet firms often do not take adequate precautions before spending large sums of money on what turn out to be badly implemented IS Projects [10].  Many large IS systems contracts are in dispute or have been suspended over the last 10 years.
Many surveys provide statistical data over the Cost of IS projects failure over the last 15 years as follows:
At year 1990: An estimate of the combined annual cost of cancelled IS projects in the late 1990s were $81 billion [Error: Reference source not found28].
At year 1993: 
Computer world published a list of the failures. Computer World 10 Worst US Commercial Project Failures of the ’90s this list of failures includes hundreds of millions of dollars of losses to organizations including not just the cost of the software, infrastructure and services but losses to the business as well   For example, according to the article a failed reservations system caused Greyhound to loos their status as a transport powerhouse and cause a $61 million loss for the first half of 1993 and lost over $150 million due to a SAP / Seibol deployment and according to the Oxford Health Care: Nearly $300 million in overstated revenues.
At year 1996: 
As many as 75 percent of all large systems may be considered to be operating failures [Error: Reference source not found48]).   In many of these systems the problems appear to lie, not with the technology, but rather with the lack of attention paid to the needs of people who had to use the technology.
At year 1997: 
    • A report by Critical Research found that three quarters of small businesses think that IT systems are not providing a return on their initial investment and executives are wasting considerable working time which could be saved if they made better use of IT. While 9 out of 10 small businesses said IT had a positive benefit for business, only 7% of the 1,000 small enterprises sampled thought they were using IT effectively [28Error: Reference source not found].
    • An older research  encompassing failures, primarily in Canada follows: “Considering that an estimated $25 billion is spent each year on IT application development in this country [Canada], the KPMG findings paint an alarming picture of projects mismanagement in both private and government sectors ” [28]. In the area of project management, the project teams ranked number two in contributing to project failures when the failure was mainly due to schedule and cost overruns   
    • When the failure was mainly due to budget overruns, the project manager was a significant factor. The lack of the necessary skills and/or expertise ranked second in the major factors that contributed to failed projects [4]. The turnover of essential personnel who were part of the project team, such as the project manager, was identified as one of the major problems   
    • The study performed by KPMG stated that 38% of the respondents identified the change in essential personnel as a risk, and they ranked this factor as number four.   
    • The project size usually has a direct relationship to the team size Sixty percent of the small projects failed, where a small project is a project that was scheduled for completion within 12 months. Almost all of the respondents reported these 60% of failed small projects went over schedule (KPMG).
At year 2001: 
    • Firoz Dosani, vice president of Mercer Consulting claims “When the true costs are added up, as many as 80% of technology projects actually cost more than they return.  It is not done intentionally but the costs are always underestimated and the benefits are always overestimated” [49].
    • when the true costs are added up, as many as 80% of technology projects actually cost more than they return  It is not done intentionally but the costs are always underestimated and the benefits are always overestimated  [49].
At year 2002: 
    • According parliamentary office of science and technology reported that the government had 100 major IT projects underway, with a total value of £10 billion [50].
    • The Spending Review of 2002 allocated around £6 billion over three years to government electronic service delivery, (Office of the e-envoy, 2002), however Computing Magazine (2003) calculated that the cost of cancelled or over-budget government IT projects over the previous 6 years had been greater than £1.5 billion [50].
    • Research conducted by KPMG among 133 listed companies in the UK, USA, Africa, Australia and Europe showed that over half of them admitted to suffering a failed IT project in the past 12 months costing each of them as much as £8M   [3].
    • A study of 50 government projects over 20 years found that those involving technical innovation and systems development historically ran over budget by up to 200% and over the original contract duration by 53%.  This led the Treasury to issue a warning that the public sector is over-optimistic when evaluating IT project costs and time scales [Error: Reference source not found26].
At year 2003: 
    • An Oxford University survey reported that only 16% of IT projects were successful, around 73% were ‘challenged’ and 10% were abandoned [42].
    • In January 2003 “Libra”, a new IT system for Magistrates Courts that was to include upgraded infrastructure, office automation facilities, a national casework application and electronic links with other criminal justice agencies, was described by the chairman of the Public Accounts Committee as, “One of the worst IT projects. I have ever seen” [51]. The original PFI contract for £183m over 10.5 years was awarded in 1998 but by May 2000 the price had been revised to £319m over 13.5 years.  The deal subsequently collapsed and was renegotiated at a price, for the infrastructure alone, of £232m. The total system would now take 8.5 years to develop and cost around £300m. The department was forced to procure new contracts with other suppliers for software and systems integration.
    • According to a report from the Royal Academy of Engineering and the British Computer Society billions of pounds are wasted every year on badly managed IT system deployments  “The UK public sector alone spent an estimated £12.3 bn  on software in the past year and the overall spend on IT is projected to be 22.6 bn”   The study suggests that only about 16% of projects can be considered successful and even conservative estimates put the costs of failures into the tens of billions of pounds across the EU ” [5].
    • According to British Computer Society 2003: The UK public sector spent an estimated 12.3 bn on software overall spend on IT about 22.6 Billion British Pounds [5].
    • Successful: 16%
    • Failure Costs Tens of Billions of British Pounds in the European Union.
    • The average organisation spends around 20% of their total budget on IT procurement, maintenance, operation and development and approximately $500 billion is wasted worldwide each year on IT purchases that fail to reach their objectives.[Error: Reference source not found26]. 
    • According to the Standish “Chaos” reports. The 2003 report shows: that Canceled projects cost $55 Billion annually [43]. 

At year 2005 : 
    • A project to replace the British Army, Navy and Air Force inventory systems with a single system was brought to a halt after £130m had been spent  Hardware worth just over £75m was used elsewhere but the remaining £118m was written off  [52].
    • In July 2005 MPs in the parliamentary intelligence and security committee stated that SCOPE, a communication system linking UK intelligence agencies, was going to be have less capability, take 3 years longer and cost 50% more than original estimates [53][26].
    • Commons Public Accounts Committee (PAC) reported that nearly a third of high-risk government projects are not using the Gateway review process, introduced in 2000, to check properly for potential budget and system failures.  Chairman of the PAC, Edward Leith, said that “far too often major IT enabled projects in government departments are late, well over budget, or do not work at all – an enormous waste of taxpayers’ money” 2626].
    • E-government developments should be managed better than this. Plans for reforming public services depend on many large new IT systems.  A recent analysis claims that the government already spends £13bn a year on computer systems and services, the highest figure in Europe and double the sum spent in 1999 [54]. There are many examples of failed IT projects in other countries, indeed the record cost-overrun in a civil IT project is probably the US internal revenue service’s $30bn tax modernisation system in the mid 1990s. However a study to be published soon of the performance of IT projects in seven countries from 1990 to 2003 indicates that Britain has the worst record for cancelled or non-functioning government IT systems   The public sector accounts for 55% of the whole UK market for IT 2626].
At year 2007 :
    • From ESSU (European Services Strategy Unit) Research Report No 3 “Cost overruns, delays and terminations” on IT Projects [46]
This thesis report identifies 105 outsourced public sector ICT contracts in central government, NHS, local authorities, public bodies and agencies with significant cost overruns, delays and terminations. 105 outsourced public sector ICT projects with significant cost overruns, delays and terminations.   
    • Total value of contracts is  29.5 billion
    • Cost overruns totalled 9.0 billion
    • 57% of contracts experienced cost overruns
    • The average percentage cost overrun is 30.5%
    • 33% of contracts suffered major delays
    • 30% of contracts were terminated
    • 12.5% of Strategic Service Delivery Partnerships have failed
 Summary of cost overruns delays and terminations
    1. Contracts with cost overruns 60.57%
    2. Average cost overrun per contract 30.5%
    3. Contracts with delays- 35.33%
    4. Contracts terminated 31.30%
    5. SSP contracts terminated or substantially reduced by 12.5% (of  SSDP contracts)  
At year 2009: 
    6. Roger Seasons BLOG, September, 2009 [11]. lists the costs of IT project failures based on several reasonable assumptions: we are already losing over USD 500 billion per month on IT failure and the problem is getting worse  
    7. According to the World Technology and Services Alliance, countries spend, on average: 6.3% of the Gross Domestic Product (GDP) on Information Communications Technology 33% of this spent on hardware, software, and services. This means that, on average, 6.3 X 33 = 2.75 % of GDP is spent on hardware, software, and services.  I will lump hardware, software, and services together under the banner of IT. 
    8. According to the 2009 U.S Budget 66% of all Federal IT dollars are invested in projects that are at risk. The study assumes this number is representative of the rest of the world. A large number of these will eventually fail. The studies assume the failure rate of a risk project is between 50% and 80%. For this analysis, the study take the average: 65% [55][11].    
    9. Every project failure incurs both direct costs (the cost of the IT investment itself) and indirect costs (the lost opportunity costs)  I assume that the ratio of indirect to direct costs is between 5:1 and 10:1  this analysis  takes the average: 7.5:1  [55][11].     
    10. Based on this study the following gives the annual cost of IT failure on various regions of the world in billions of USD:  
REGION GDP (B USD) Cost of IT Failure (B USD}  
World		 69,800        		      6,180  
USA		 13,830        		      1,225  
New Zealand 	33     		    	       3.90  
UK 		2,260                 	         200  
Texas 		1,250             		         110  
    11. According Roger Sessions research The IT Complexity Crisis: [Error: Reference source not found56]  68% of IT Projects Fail: primary cause identified as poor requirements by Michael Krigsman referring to a study by IAG Consulting Key findings from the report, The Impact of Business Requirements on the Success of Technology Projects from IAG Consulting, include (emphasis added). 
    1. Companies with poor business analysis capability will have three times as many project failures as successes. 
    2. 68% of companies are more likely to have a marginal project or outright failure than a success due to the way they approach business analysis. In fact, 50% of these groups' projects were runaway which had any 2 of: taking over 180% of target time to deliver, consuming in excess of 160% of estimated budget, or delivering fewer than 70% of the target required functionality[57]. 
    3. Companies pay a premium of as much as 60% on time and budget when they use poor requirements practices on their projects 
    4. Over 31% of the IT development budget for software, staff and external professional services will be consumed by poor requirements at the average company using average analysts versus the optimal organization 
    5. The vast majority of projects surveyed did not utilize sufficient business analysis skill to consistently bring projects in on time and budget  The level of competency required is higher than that employed within projects for 70% of the companies surveyed 
At year 2010:
According to Bob Lawhorn presentation on software failure. Poorly defined applications (miscommunication between business and IT) contribute to a 66% project failure rate, costing U.S businesses at least $30 billion every year (Forrester Research) [11] [33].
Table [3.3] Analysis of the costs of IS Projects development Failure on last 20 year by billion dollar 
Year 

1990
1992
1993
1996
1998
2000
2002
2003
2006
2008
2010
Cost of IS Projects failure (B USD)
81
70
61
80
36
65
60
33
50
29.5
30


Graph [3.3] Costs of IS Projects development Failure on last 20 years by billion dollar
From the pervious table [3.3] it seems that the costs of IS Projects development Failure on last 20 years and according so many studies [10] attempting to quantify the cost of software failures. They generally agree that the number is at least 50 to 80 billion dollar range annually.  Many statistic reports and researches that proof that the Software Project Failure Costs Billions [11]. As we said before according to the Standish “Chaos” reports, the 2003 report shows: that Canceled projects cost $55 Billion Annually [43]. And we see that the cost decreased in the last 3 years to 30 billion dollar this according to increasing rate of IS development project success on the last 3 years [47].
3.3.1.3  analysis of Common causes of IS development projects failure:
Many surveys provide statistical data over the Reasons of why IS development projects fails over the last 15 years as follows:
At year 1995: 
According to Standish Group Report Some of the results about the Project Success Factors and the Project Impaired Factors as follows in table [3.4]  [38].






Rank

Project Success Factors
% of Responses

Project Impaired Factors
% of Responses
1
User involvement
15.9
Incomplete requirements
13.1
2
Executive management support
13.9
Lack of user involvement
12.3
3
Clear statement of requirements
13.0
Lack of resources
10.6
3
Proper planning
9.6
Unrealistic expectations
9.9
5
Realistic expectations
8.2
Lack of executive support
9.3
6
Smaller project milestones
7.7
Changing requirements and specifications
8.7
7
Competent staff
7.2
Lack of planning
8.1
8
Ownership
5.3
Didn’t need it any longer
7.5
9
Clear vision and objectives
2.9
Lack of IT management
6.2
10
Hardworking, focussed staff
2.3
Technology illiteracy
3.3

Other
13.9
Other
9.9
Table [3.4]: Some of the results of The Standish Group survey (1995), The CHAOS report [38]


At year 1996: 
According to the OASIG [58], the report went on to suggest some of the main reasons why IT projects seem to fail:
        ◦ Management agenda is too limited in that most IT investments are technology led and the main investment motive is only to cut costs. This narrow focus on technical capabilities and efficiency goals means that inadequate attention is given to the human and organisational issues that can determine a project’s ultimate success   
        ◦ Users do not influence development enough   
        ◦ Senior managers do not understand the links between technical and organisational change 
        ◦ Project management techniques and IT approaches are too technical 
        ◦ Companies fail to organise work or design jobs and roles properly.

At year 1996:
According to the OASIG [58],[26][28] a The OASIG study found that successful projects were characterised by an integrated technical/organisational/human approach to change, with strategic objectives for change being set and reviewed. The project managers were given responsibility for incorporating human and organisational factors, and worked to detailed implementation plans.

At year 1998: 
    • According the Bull Survey [40]: The survey reveals that the major causes of project failure during the lifecycle of the project are a breakdown in communications (57%), a lack of planning (39%) and poor quality control (35%)  

    • According the Bull Survey [40] the main success criteria identified were: 
    • Meeting milestones (51%)
    • Maintaining the required quality levels (32%)
    • Meeting the budget (31%) 
 At year 2000:  
    • According to (The Register, 2002 [4]). The survey also suggested that the reason such projects fail is poor communication between company managers and those who build and manage new IT infrastructure, that only 23% of the organisations’ personnel were certified by the Project Management Institute and that 81% used what KPMG deemed a “home-grown” methodology.
At year 2001: 
    • According to Dosani, 2001 [49] 80% of technology projects actually cost more than they return. It is not done intentionally but the costs are always underestimated and the benefits are always overestimated. Successive UK governments have recognised the problems of successfully developing IT systems.  Over the past few years high profile IT difficulties have affected the Child Support Agency, Passport Office, Criminal Records Bureau, Inland Revenue, National Air Traffic Services and the Department for work and Pensions, among others  
    • According to the Schmidt et al (2001) Report.  This group of researchers conducted three simultaneous surveys of experienced project managers in three different settings: Hong Kong, Finland and the United States.  The three panels of experts identified an initial list of 53 IT project risk factors   This list was ranked and pared down to a reduced set of 17, which are shown below[59]:
            ▪ Lack of top management commitment to the project
            ▪ Misunderstanding  the user requirements
            ▪ Not managing change properly
            ▪ Failure to gain user commitment
            ▪ Lack of adequate user involvement 
            ▪ Failure to manage end-user expectations
            ▪ Unclear / misunderstood scope and objectives
            ▪ Changing scope and objectives
            ▪ Number of organisational units involved
            ▪ Lack of  effective project management skills
            ▪ Lack of effective project management methodology
            ▪ Lack of required knowledge / skills in the project personnel
            ▪ Insufficient / inappropriate staffing 
            ▪ Improper definitions of roles and responsibilities
            ▪ Lack of frozen requirements
            ▪ Introduction of new technology
            ▪ Conflict between user departments 
At year 2002:
According to Keil et al (2002) [59], criticise this study because they say it only considers the views of project managers who are usually drawn from the ranks of the information system department and are likely to represent the interests of developers not users  They carry out a separate Delphi study of user views which they compare to the results of the project managers’ responses   Although the rankings of the various factors are different their findings show interesting similarities with the views of project managers.
At year 2003: 
    • According to reports were reviewed and expanded upon in 2003 by the Parliamentary Office of Science and Technology (POST, 2003) [34Error: Reference source not found] which went on to highlight other issues. These included several circumstances peculiar to Government sponsored projects:
    • Public sector projects usually attract more media attention and are more open to scrutiny than private sector projects 
    • Policy changes rapidly in the public sector and legislation may require last minute changes.
    • Government personnel may not be sufficiently familiar with the fundamental concepts and current developments of IT so are unable to judge if suppliers are overselling to them.
    • Advances in technology may occur so quickly that large projects can be obsolete before they are delivered yet state-of-the-art solutions always carry greater risk.
    • User requirements are often unclear at the start and can change at any stage in the project’s lifecycle.
    • Many Government IT projects are large and extremely complex with millions of lines of code and so it is often impossible to guess how big a job will be before it starts.
    • It is difficult for non-technical management to ascertain the quality or completeness of software during the development process.
Public Sector Projects
Successful Private Sector projects
Have multiple aims, so hard to measure success
Focussed on measurable financial and service outcomes
Generally not in competition with other projects
Business Driven by competition
Highly visible to the public and the media
Often not visible to public or shareholders
Constrained by UK and EU legislation
Less constrained by legislation and regulations
Managed in a risk averse culture
Open to risk taking
Difficult to adapt to change due to scale and complexity 
Designed to limit damage when they are in difficulty
Likely to interact with other departments

Table [3.5] Differences between IT projects in public and private sectors (Intellect, 2000 [34])
    • The POST report goes on to recognise the importance of outsourcing and negotiating with the suppliers of IT equipment and services: “Much government IT is now delivered by external suppliers so government needs to be an intelligent client  Departments need a range of skills to scrutinise bids, keep up to date with technology, be realistic about what systems are likely to deliver, understand commercial drivers and actively manage suppliers  IT projects should be tied in to overall objectives and not simply seen as about technology   High quality project management skills and good communications are essential so that problems are identified early when they are more easily solved   Involving the people who will use the final service is also critical to define requirements, reduce resistance and provide for training   Breaking projects down into small manageable steps increases the chances of success and makes contingency planning easier ”  This statement demonstrates the importance they give to factors such as user involvement and training, objective setting that is connected to business aims, project management and sensible scoping.
At year 2003: 
According to the National Audit Office and the Office of Government Commerce have compiled a list of common causes of project failure, (NAO/OGC, 2002 [60]) 
            ▪ Lack of clear link between the project and the organisation’s key strategic priorities, including agreed measures of success  
            ▪ Lack of clear senior management and Ministerial ownership and leadership  
            ▪ Lack of effective engagement with stakeholders 
            ▪ Lack of skills and proven approach to project management and risk management 
            ▪ Too little attention to breaking development and implementation into manageable steps 
            ▪ Evaluation of proposals driven by initial price rather than long-term value for money (especially securing delivery of business benefits) 
            ▪ Lack of understanding of and contact with the supply industry at senior levels in the organization 
            ▪ Lack of effective project team integration between clients, the supplier team and the supply chain 
At year 2005:
According to the  UK Government Reports The select committee on public accounts first report entitled “Improving the delivery of Government IT projects” , [Error: Reference source not found26] draws out lessons from more than 25 cases from the 1990s where badly implemented IT systems have resulted in delay, confusion and inconvenience for British citizens and, in many cases, poor value for money for taxpayers. The report suggests that Government departments must have effective IT systems in place and working so that they can respond to the needs and expectations of citizens and also allow citizens to fulfil their obligations to the state quickly and properly. It claims however that, for more than 2 decades, implementing IT systems successfully has proved difficult. The importance of the timely delivery of IT projects and the effects delays in implementation can have were demonstrated clearly by the long queues for passports and by the fact that many thousands of benefit recipients did not receive their full entitlement. The key conclusions of the report were [26].
Failure to deliver the required IT systems can have a profound effect upon an organisation’s ability to provide services to its customers. Decisions on IT are therefore business decisions, not technical ones, and should involve the commitment of senior management 
    1 Although projects grow from identified business needs, what seems a clear objective at the start can become blurred and confused as the project progresses   End users must be identified before the project begins so that their needs are taken into account throughout 
    2 Large and complex projects are particularly risky endeavours. Managers should give careful consideration to whether a project is too ambitious to undertake in one go, especially if it connects with the operations of other parties  
    3 Skilled project managers are essential for ensuring that IT projects are delivered to time and budget. Successful implementation of IT systems also depends on imagination, well-conceived risk management and sound methodologies 
    4 A high degree of professionalism in the definition, negotiation and management of IT contracts is needed. With large sums of money at stake any lack of clarity, or debateable interpretation, in a contract can lead to expensive misunderstandings, that may even have to be resolved in court 
    5 It is important that staff know how to make full and proper use of IT systems otherwise the anticipated business benefits will not be realised. Training can take up considerable resources as it must address the needs of both the users and those who will operate and maintain the systems 
    6 In addition to planning and managing projects positively, departments should have contingency plans in place to provide adequate levels of service in the event of the project failing 
    7 There should be a post implementation review designed to establish the extent to which a project achieved its anticipated benefits. The review may study whether the project met its objectives, user expectations and technical requirements 

At year 2008: 
According to North American Computer Audit, Control & Security Association (2008) [26] More than 30% of responding government agencies recently killed an IT project prior to implementation 
    • Medicaid System Failures  
    • Cancelled MMIS projects  
    • Major cost overruns  
    • Multi-year schedule slippage  
    • Inability to perform key functions correctly  
    • Throw-away systems that need to be replaced when proprietary  
    • Technology becomes obsolescent  
    • Expensive to maintain and operate  
    • According to the pervious survey we found that the Common causes of IS development projects failure appear in the following table [3.6] and explained in the following chart graph [3.4].

Common causes of IS development projects failure
% of Responses
Incomplete requirements
13.1
Lack of user involvement
12.3
Lack of resources
10.6
Unrealistic expectations
9.9
Lack of executive support
9.3
Changing requirements and specifications
8.7
Lack of planning
8.1
Didn’t need it any longer
7.5
Lack of IT management
6.2
Technology illiteracy
3.3
Other
9.9
Table [3.6] Common causes of IS development projects failure







Graph [3.4] Costs of IS Projects development Failure on last 20 years by billion dollar

3.3.2 International ERP projects failure: 
3.3.2.1 analysis of Rate of the International ERP projects failure: 
At year 2001:
    • According to the Robbins-Gioia Survey (2001): 51% viewed their ERP implementation as unsuccessful. 
    • In 2001, Robbins-Gioia Survey found 51% of the participants viewed their ERP implementation as unsuccessful.  
At year 2002:
It was reported that 75% of the ERP projects are classified as failures [9]. 51 % viewed their ERP implementation as not fully completed.  However, there are also frequent reports of ERP failure: "between 50 percent and 75 percent of U.S. firms experience some degree of failure.
At year 2003:
One recent survey revealed that 65 percent of executives believe ERP implementation has at least a moderate chance of hurting their business "Umble 2003 [8] "three quarters of the ERP projects are considered failures.



At year 2005:
Many ERP projects ended catastrophically" (Rasmy et al 2005 [9]) .Managing knowledge in an ERP implementation project is a complex and difficult task, as a typical ERP system entails many users, both internal and external, ranging from top executives to data entry operators, external consultants to software vendors. 
At year  2006.  
In this article by Bob Lewise in infoworld.com, he even claimed that 70% of ERP implementation failed.
AT Year  2007 
According  Adapted from a response by Nic Harvard on 2007.
    • 80% of customers in the mfg sector are unhappy with their current ERP.
    • 60% of ERP projects fail given the time/budget/deliverable metric.
    • 90% fail to deliver any ROI (in tier1 space).
    • 80% of projects which dedicate 15% or more of total budget succeed according 
to the above metrics. 
    • 95% of companies which (directly or indirectly) dedicate less than 10% of total budget to education/training/change mgt fail to hit any of the above measures. 
At year 2010:
 According to The Prinzo Group [Error: Reference source not found61] nearly 70% of implementations will fail.
    • The following Some Statistics describing failure rates about failed CRM projects:
    • 2001 Gartner Group: 50% 
    • 2002 Butler Group: 70% 
    • 2002 Selling Power, CSO Forum: 69.3% 
    • 2005 AMR Research: 18% 
    • 2006 AMR Research: 31% 
    • 2007 AMR Research: 29% 
    • 2007 Economist Intelligence Unit: 56% 
    • 2009 Forrester Research: 37%
From the pervious survey we explain the rate of the International ERP projects failure in the following table [3.7] and graph [3.5] over the last 10 years as follows:

Year 
Rate of  ERP projects failure 
Rate of CRM  projects failure
2001
50%
50%
2002
51%
70%
2003
65%
69.3%
2003
66%
29%
2005
69%
18%
2006
70%
31%
2007
60%
29%
2008
65%
56%
2009
69%
37%
2010
70%
36%
Table [3.7] the rate of the International ERP projects failure through the last 10 years


Graph [3.5] Rate of ERP and CRM projects failure

From the graph [3.5] we found that the rate of ERP projects failure has increased through the last 10 years, although this rate decreased through year 2007 and year 2008 but this rate increased again in the year 2009 and year 2010, as for the CRM projects; the Rate of CRM projects failure decreased during the years 2003 to year 2007 and increased again through the year 2008 to year 2010.
3.3.2.2 The Cost of ERP projects failure:
The total cost of ERP ownership includes the costs of packaged software, hardware, professional services (for ongoing maintenance, upgrades and optimization) and internal costs Based on the ERP survey conducted by Meta Group in 2002, the average cost of ERP ownership was a $15 millions ranging from half millions to $300 millions The average cost per user per year could be as high as $20,000.
I-   Costs of Software 
The cost of packaged ERP software depends on the scope of implementation (the # of ERP modules and the number of end users), complexity of software and ERP vendors ERP software that involves the integration with external business entities generally costs more ERP vendors offer discount for organizations who invest in a suite of ERP software systems Mid-sized organizations typically commit a few million dollars to packaged ERP software  
II- Costs of Hardware 
Implementation of ERP systems routinely requires purchase of new computer hardware, systems software, network equipment and security software  The cost of hardware varies in a wide range dependent on the scope of implementation and platforms  The hardware typically costs about half million dollars for mid-sized organizations that implements ERP systems  
III- Costs of Professional Services (hidden costs of ERP)
Customization The big chunk of costs of Professional Services is customization  The cost of customization can easily out-run the cost of packaged ERP software, but it is the customization of ERP software that makes an ERP a success or a failure  
Integration ERP systems won't demonstrate its full potentials unless they are properly integrated with other enterprise software application: 
    1. the integration of various functional ERP modules, 
    2. the integration of ERP with other e-business software applications, and 
    3. The integration of ERP with legacy systems  
Data Conversion The cost of data conversion depends on the format and the media that store the historical data. Data conversion from legacy systems to RDBMS is a time-consuming process. Data conversion may lead to further data gathering to fill the missing links in data requirements  
Testing ERP systems are thoroughly tested before they go into production ERP testing includes unit testing, component testing, regression testing, performance testing and user acceptance testing  
Training Workflow and UI design in ERP software are more complex than average business software.  ERP training is expensive because workers almost invariably have to learn a new set of processes of doing their daily tasks besides learning how to use the ERP software.  To reduce the cost of ERP training and to ease the transitions from old processes to new, organizations often seek the help from training companies which are specialized in coaching workers on using ERP software from particular vendors.  
IV- Cost of Implementation length  
The study (New research and statistics By Michael Krigsman 2010) [62] states that more than half the implementations surveyed exceed planned time:
According to Panorama’s study [62], 57% of ERP implementations take longer than expected (see table below (table 3.8).  This challenge is partly attributed to the fact that many companies in our study either had unrealistic expectations regarding timeframes and/or did not account for key project activities in their implementation planning processes. 

As the Table [3.8] indicates, both time and budget frequently exceed planned levels:
METRIC
AVERAGE 
Take Longer Than Expected 
57%
Implementation Duration 
18.3 Months
Total Implementation Cost ($)
$6 2M
Total Implementation Cost(% of Revenue)
6 9%
Total Implementation Cost Exceeds Budget 
53%
V- Implementation budget The report compares implementation budget variance in 2010 to a comparable study performed in 2008: As illustrated in the table above table [3.8] , 53% of ERP implementations go over budget.  This is a slight decrease from the 2008 study, which showed that 59% of implementations cost more than planned.  The finding is attributed to the fact that many organizations in our study failed to identify and budget implementation costs not attributable to software vendors, such as project management, organizational change management, hardware upgrades and the like.

3.3.2.3 Based on the ERP survey conducted by Meta Group in 2002, the average cost of ERP ownership was $15 millions ranging from half millions to $300 millions. The average cost per user per year could be as high as $20,000. However, there are also frequent reports of ERP failure: "between 50 percent and 75 percent of U.S.  Firms experience some degree of failure. One recent survey revealed that 65 percent of executives believe ERP implementation has at least a moderate chance of hurting their business " (Umble & Umble 2003 [8] "three quarters of the ERP projects are considered failures and many ERP projects ended catastrophically" (Rasmy et al 2005 [Error: Reference source not found9]) 

3.3.2.4 Results Of 2010 ERP Report Of Panorama Consulting Group [63],[64]:
    • ERP can deliver huge benefits to organization, but it needs to be a managed effectively
    • Evaluation process is very important and a key point to ensures successful ERP implementation 
    • Most ERP Challenges are related to business and human issues, not technology 
    • Misalignment of expectations is often the first domino to fall early in a troubled implementation 
    • Table [3.9] shows vendors were listed most frequently, with one out of ﬁve companies (20 3%) considering SAP, 13.9% of companies considering Microsoft Dynamics, and 9.8%  considering Oracle eBusiness Suite  The strong presence of listed vendors is most likely due to strong brand awareness and reputation as well as the variety of products offered by these vendors  
    • As might be expected, seven of the most frequently short-listed vendors were also the most frequently selected. The selection rate was based on the frequency of each vendor being elected over the frequency of each being considered in the selection phase Table [3.10]  At 53%, Oracle eBusiness Suite and SAP had the highest selection rate  

Vendor 
Frequency 

Selected vendor
Selection rate 
SAP
20.3%

Oracle eBusiness Suite
53.2%
Microsoft dynamics
13.%

SAP
53.1%
Oracle eBusiness Suite
9.%

Infor.
38.5%
Epicor.
7.%

Oracle JDE
37.%
Infor.
3.%

Epicor
33.%
Oracle JDE
3.%



Oracle PeopleSoft
2.%



IFS
2.2%



Table [3.9]  Top 7 short listed vendors

Table [3.10]  Top 5 Selected Vendors

3.3.2.5 Analysis of Most of ERP systems failure reasons:  
According to the study (New research and statistics [6262] say that a significant number of implementations surveyed did not deliver anywhere near the anticipated benefit or value where: 31% of companies surveyed fail to realize at least half of the business benefits they expected from their ERP systems, and 22% of implementations fail to deliver at least some measurable business benefits from their ERP solutions. In addition, over one in three companies surveyed (30%) realized major operational disruptions after implementation go-live, such as the inability to ship products or to close the books  Finally, only 68% of executives and 61% of employees are at least somewhat satisfied with their ERP solutions  figure [3.1] illustrate this information 

Figure [3.1] ERP systems failure reasons
Industry statistics show that greater than 60% of ERP implementation starts historically fail.  Does this mean that we are doomed from the start?  Of course not, if we learn from the mistakes of others. So the pertinent question is what are the main causes of ERP failure and what can be done to prevent this from happening to we? According to  G. Ligus -2003 from Rockford Consulting Group, Ltd [Error: Reference source not found65] [6666], and their surveys on the Egyptian enterprises adopting ERP system the researchers found that there are twelve major reasons for why companies get bogged down or fail in implementing ERP.
Businesses without a central ERP system spend a lot of time performing redundant tasks, re-entering data, and reconciling duplicate data. Data entered into one system may appear different in another system. These additional tasks result in increased labour and personnel frustration. An ERP system eliminates vertical data in our organization, breaking down the virtual walls between departments. One database contains all company data, and all departments pull data from the same database. 
While the end results of a streamlined system include increased productivity and data availability, the prospect of selecting and integrating an ERP software solution into the business can be daunting.  It is certainly a major undertaking to uproot many of the entrenched systems and train personnel to use the new system, but understanding how the ERP software system will improve the business processes and creating a strategic implementation plan will keep the end benefits in the mind and smooth the integration of the ERP software into the business. 


3.3.3 National IS Development projects failure 
According to the Case Study done by A.H.Yousef, A.Gamal, A.Warda, M. Mahmoud, "Software Projects Success Factors Identification uses Data Mining", Computer and Systems Engineering Department, in Shams University, Cairo, Egypt [67], in this case study Data is collected through direct interview by a team consists of 5 members.  The collected data represents 30 Egyptian software development projects made. The projects were carried out in a number of different software houses ranging from small local companies to large multinational enterprises .About 31% of the projects in the case study are considered failure.
The Egyptian software industry is alive and kicking despite many claims to the contrary. But more needs to be done to help young software companies [68].
The top 10 Egyptian software companies reported revenue growth of around 20 per cent last year, together with operating profit growth of around 25% showing that the Egyptian software outsourcing is "a thriving and highly profitable business", according to ITIDA - The Egyptian information Technology Industry Development Agency [69], There is a tendency to write-off the Egyptian software industry because most of the familiar software companies in Egypt are merely offshore branches for Major US based companies said ITIDA chairman Dr Hazem Y  Abdelazim who warned: "That would be a big mistake" , Egypt is playing a vital role in the development of the major software products and application, and has had an early hand in many of today's most popular applications—from databases and email to computer games and the internet 
According to [6969]. The Egypt failure to produce a global software outsourcing Giant is largely due to a lack of financial backing while the US has ready-made communities of developers working together with leading Investment firms to secure investment, Egyptian software developers often struggle much more to gain access to venture capital funding.
Other factors holding Egypt back include a lack of marketing and management expertise. The tendency to focus on products geared to the Egyptian market rather than considering an international audience, and an overall lack of ambition. 
3.3.4 National ERP projects failure 
Based on Mohammed  H. Rasmy, Assem Tharwat &  Sondoss Ashraf (2005)  [9] research that focuses on ERP implementation in Egyptian context  More specifically, they developed and empirically tested a model that investigates ERP implementation success as a function of interrelated CSFs extracted from literature and Egyptian organizational culture  Using the developed model, ERP implementation success index is predicted for a given ERP implementation case  The study resulted in important theoretical and practical contributions  
That research develop model, the general form of the ERP-ISI is proposed as follows: 

Where ERP Success is the latent variable for ERP Implementation Success, and E[ ], min[ ],and max[ ] denote the expected, the minimum, and the maximum value of ERP Success respectively  The minimum and maximum values are determined by those of the corresponding manifest variables: 
Where are the measurement variables of the latent ERP implementation Success, are their corresponding weights, and kis the number of measurement variables  ERP-ISI is calculated survey sample in order to gain insights about the success rate of ERP implementations in Egypt  As a result, exactly 50% (i e  whose ERP-ISI below 50%) of participating enterprises  
Research results demonstrate that ERP implementation success is a function of a set of interrelated CSFs and Egyptian organizational culture While CSFs positively reinforce implementation success, Egyptian organizational culture hinders its progress Most of the research hypotheses are supported by the returned empirical data. 
Organizational fit to ERP package is proven to be the most important determinant of ERP implementation success  
3.4   Samples of failed IS development projects.
Having reviewed some extensive surveys, major reports and general comments on IT projects a better understanding of the nature of and commonest reasons for failure it may be helpful to look at some other factors that can cause problems.    
Computerization does not automatically increase productivity, but it is an essential component of a system of organizational changes which can As the impacts of IT systems become greater and more pervasive, it is increasingly important to consider these organizational changes as an integral part of the computerization process [70]. Allowing for and managing the power, politics and organisational conflict inherent in IT system change is increasingly recognised as being of critical importance to successful information systems development [Error: Reference source not found28] .
According to [28] and  many case studies range from small to large organisations and summarise the context, problems and impact of failure for each example. 
	a)	The managers of the regional head quarters of a well-known youth club organisation were sold what they thought was a turnkey membership administration IT system costing £35,000.  Three weeks after most of it was delivered the supplier went bankrupt.   The system was not complete, had not been installed properly, the promised training did not materialise and the software did not allow them to do all the things they thought they had agreed upon.   They were forced to ask for expensive, professional advice and were told that substantial changes needed to be made.
b)	A company that manufactures and sells picture frames paid over £50,000 for a Linux based word processing, database and accounts system.  Unfortunately the contract did not include any user training and the database and accounting packages, though apparently specially modified to suit their needs, looked too complicated to the office manager and his staff.  The system was switched on once, no-one knew how to use it, and so it was pushed into a corner and ignored until a new accountant joined the firm twelve months later. He called the suppliers and was told that the company had not purchased a support contract and he would be charged for any assistance.  In the end the company had to pay another £8000 for training and amendments to the software. 
c)	A Scottish port authority decided it was time to modernise its back office clerical work and selected a proven multi-user office automation system carefully.  The company’s small IT department had analyzed the authority’s requirements, produced a technical specification for the proposed computer system, chosen the most suitable system available and installed it under the supervision of the supplier.   The new system provided integrated word processing, spreadsheets, database and internal communication facilities.  They employed an IT manager to oversee the implementation and future operation of the system   Problems began to emerge soon after installation when staff was observed still using their old workstations.  Many of these users had been with the firm their whole working lives, some for 30 years, and found it difficult to adjust to the new way of working   Long established procedures, status and areas of responsibility were changed without proper consultation Staffs were resistant to change, they found the new system threatening, and they had not been involved in the development decisions and were not trained adequately. Problems during implementation caused delays and overspend.  There were difficulties connecting it to (integrating it with) existing systems.  The analysis of requirements had also underestimated the take up demand in other departments.  So a 12 user system had to be replaced within 3 months with one that could accommodate twice that many people 
d)	Plagued by problems such as difficulties in retrieving information and frequent errors in customer records a successful and expanding staff recruitment firm in London took the decision to develop a new computer system.   The firm invited a local software house to provide the specially commissioned database system and asked one of their own young accountants, who had no background in IT but had "once seen a computer system being installed", to manage the project and liaise with the software house.   He wrote a report listing what he thought were the requirements of the new system, however, because his analysis had not been adequately informed or comprehensive a series of changes had to be made to the requirements specification.   These modifications caused the project to over run its budget and schedule dramatically.  After 2 months the person put in charge of the project resigned, feeling he was getting the blame for the obvious problems which were not all his fault.  The firm’s directors, realising the danger of the project collapsing, called in a consultant to pick up the pieces and organise the work.  Originally forecast to cost £30,000 and take 3 months to implement the IT system actually cost more than £100,000 and took 7 months.   
e)	The government's spending watchdog, the National Audit Office, disclosed that a computer system set up to support Britain's training programme for the unemployed had to be scrapped at a cost of £38 million   The NAO said that a series of blunders by ministers and top civil servants led to the commissioning of a national computer "Field System" which plunged the accounts, programmes and collection of information by the 82 Training and Enterprise Councils (TECs) into chaos.  The report states that the project was rushed into without a proper examination, or appreciation, of the risks involved.  Developmental errors uncovered by the report include weaknesses in staffing and management, inadequate support and poorly controlled use of consultants.   Problems were compounded by poor quality software (7000 software bugs and requests for changes were recorded) and insufficiently trained staff.  The highly critical report says the "particularly ambitious and technically complex project" was managed by staff "most of whom did not possess the necessary skills and experience" to run it    More than 200 consultants were called in eventually, but the ministry broke government rules by:
 i) Employing firms without going to competitive tender, 
	ii) Allowing firms to work before they signed contracts, and 
	iii) Extending contracts without renegotiating them 
After another review which showed that redesigning the computer system would cost over £70 million, ministers decided to leave the TECs to work out if they wanted to keep any part of the system and wrote off the £38 million investment.  The NAO regarded this decision as unfortunately not informed by proper cost-benefit analysis 
f)	Essex Police Force awarded a £1 5 million contract to GEC-Marconi before it had finished the user requirements specification for a crime handling and police intelligence system.   Delivery of the system was to be within 2 years, however, because the specification was put out to tender before it was complete and had subsequently been added to and amended substantially, not a single line of program code had been written by then  
g)	Schroder Wagg, a merchant bank, wrote off a million pounds when it sold an IBM mainframe computer that had been bought three years earlier and never used for its intended purpose.  Plans for the IBM 3381 were abandoned following Black Monday's stock market crash and the accompanying changes in City fortunes.  The bank also decided to buy £300,000 worth of packaged accountancy software rather than carry on with developing in-house systems 
h)	Taurus - the multimillion-pound IT project to automate the London Stock Exchange (LSE) share trading operations was abandonment after six years work by up to 350 technicians.  Taurus is one of the most referred to failures in the IT/IS world It was said to have cost between £75m and £300m before it was abandoned   Media coverage about the collapse of the project pointed to the following causes.
    • Political - There was a struggle between organisations, developers and the LSE to maintain power over the system because, if implemented successfully, it would revolutionise the status of the LSE world-wide and everyone wanted to be boss  
    • Ambitious time-scale - The project plan was not based upon a realistic estimate of time and resources. The project was unprecedented  It was one of the largest IT projects to be carried out in Europe, yet there was pressure to complete quickly rather than properly. 
    • Escalation/Requirements Creep - Was the system being built for the LSE, the listed companies, the brokers, the money makers…?  This debate led to Taurus being a complex combination of requirements – attempting to please everyone  As more and more groups got involved with the project, the requirements began to escalate, along with the costs. 
    • Responsibility - There were so many people involved or to benefit from the project that it became unclear who was responsible for managing the project 
    • Poorly defined requirements - The requirements that were put forward were not discussed sufficiently or analysed properly No-one understood what was required of the system.  
    • Constant demands for change - As the system was being developed, there were continual changes in specification.  These changes often meant that parts of the system had to be scrapped and then replaced. 
    • Rhetoric – major problems were ignored when they began to surface as no-one wanted to question progress or authority. 
    • Complex Security Arrangements - A high level of security was required of the system and this added to the complexity of the design. 
i)	The new authority of South Lanarkshire was created by amalgamating several Councils   An audit found that over 800 “information systems” were being used, many of them duplicating work and data, on 60 fileservers and over 2000 PCs   There were conflicts over integration decisions – for example 3 departments used 5 different Geographical Information System (GIS) software packages (Arcinfo, Smallworld, Fastmap, MapInfo and GGP)   
    j) Avon County Council implemented a new computer program to pay staff wages without sufficient testing   Problems became apparent in a small way when the new system paid a caretaker £75 an hour instead of 75 pence   Then the new system didn’t pay canteen workers at all for 7 weeks   Next it paid a janitor £2,600 for a week’s work   A deputy headmistress received her year’s annual salary once a month, heads of department earned less than their assistants and some people had more tax deducted in a week than they earned all year. Within months 280 council employees were out on strike 
    k) British Gas were “submerged in a deluge of complaints” when they sent out incorrect bills and disconnection threats.  Thousands of reminders were posted before the first bill had been sent. Customers paying by direct debit found huge sums of money had been removed from their bank accounts.  For example a doctor from Middlesex had £3,796 deducted from his account even though he had been assured that the real figure was £39   There were even some reports that people had been disconnected despite paying their bills. The rash of errors provoked a huge and angry reaction from consumers   A Gas Consumer Council spokesman reported “British Gas has put too much faith in untried systems and has installed them too quickly, with inadequate backup from too few staff and at the wrong time of year” 
l)	Newspaper articles about the rather unsuccessful attempt to computerise the London Ambulance System said it had ‘put lives at risk’!  The original estimate for the work was £1 25million.  The project was eventually abandoned after £7 5million had been spent.  The main findings of the official report written after the investigation on the reasons why the new system had failed were that:
    • The procurement team was inexperienced
    • Staff mistrusted and opposed the project
    • NHS management and unions were at loggerheads
    • The project’s timetable was over-ambitious 
    • Price was put before quality
    • Systems and requirements analysis was superficial
    • Local, tacit and heuristic knowledge was ignored
    • The software was incomplete and not properly tested
    • The emergency back-up system was untested
    • Training was inconsistent and incomplete 
    • A worrying report by Andersen Consulting, that pointed to problems with the management of the project, had been suppressed
    • Management failed to identify, control and solve problems during the project
    • Users “did things wrong” a faulty system implemented with undue haste, by a management determined to impose its will   ”
m)	The replacement of one of Scotland’s main police computer systems is going to be at least 2 years late and £3m over budget ministers admitted in April 2005   A consultants report said too little attention had been paid to what the new system would do and recommended bringing in outside help costing £3 3m  Stewart Maxwell, MSP, called the project “a complete disaster   With no budget set and no one in charge, five years into the project the whole thing has not surprisingly collapsed” 
n)	Other examples taken from articles in the computer press include:
    • Insurance broker Frizzell scrapped £2m administration system due to under-estimates, a series of missed deadlines and a dispute with its supplier 
    • West Midlands Regional Health Authority wasted £3m on an IT system it never used   Auditors described the development as speculative and unrealistic and said the contract was awarded without competitive tender, potential users were not consulted and changes were made to the specification without proper approval 
    • The cost of the project to computerise the DSS benefits system rose from an original estimate of £700m to over £2600m although the mushrooming nature of this over-run was not calculated until near the end of the project 
    • Consultants were called in after it was found that the working party set up to decide the IT strategy for Watford Council had no priorities and “gave approval to those who shouted loudest and longest”, users had been purchasing incompatible equipment piecemeal, without reference to any standards. 
The frequency, scale, repercussions and fame of these problems seem to point to the need for a reliable approach to predicting, reducing and avoiding as many problems as possible in projects involving changes to business IT systems, information systems consultancy and procurement. 





3.5 Conclusion:
In summary it is apparent that a lot of time and money seems to be spent on IT support and development but, one way or another, a great deal is wasted. The costs of failure are not limited to narrow considerations of budget and schedule.  More IS development projects are seen to go wrong. The more developers may think that much of their work is likely to a waste of effort, and may view any IS development projects as a worry and probably a poor return on investment.  IT staff can become cynical, lose goodwill and follow the advice of managers.  For all these reasons we should be looking for ways to reduce the incidence and effects of failure. 





































CHAPTER 4
Factors effect IS post implementation activity failure
4.1 Introduction
IS projects having a bad reputation for going over budget and schedule, not realising expectations and for providing poor return on investment. Surveys and reports on the acceptability of new IT systems seem to highlight constantly the same problems and probable causes of failure yet businesses, large and small organizations, continue to make mistakes when attempting to improve information systems and often invest in inappropriate or unworkable changes without proper consideration of the likely risks [28].
IS projects can be divided into ERP projects and development software projects. Development Information systems projects frequently fail depending upon which academic study, the failure rate of large projects is reported as being between 50%-80% because of the natural human tendency to hide bad news, the real statistic may be even higher this [1], [2], [3], [4], [5][6]  .
The implementation of IS projects It was reported that 75% of the ERP projects are classified as failures [7]. 51 % viewed their ERP implementation as not fully completed. Based on the ERP survey conducted by Meta Group in 2002, [8] the average cost of ERP ownership were $15 millions ranging from half millions to $300 millions. The average cost per user per year could be as high as $20,000. However, there are also frequent reports of ERP failure: "between 50 percent and 75 percent of U.S. firms experience some degree of failure. One recent survey revealed that 65 percent of executives believe ERP implementation has at least a moderate chance of hurting their business "Three quarters of the ERP projects are considered failures and many ERP projects ended catastrophically" [9].
Managing knowledge in an ERP implementation project is a complex and difficult task, as a typical ERP system entails many users, both internal and external, ranging from top executives to data entry operators, external consultants to software vendors. 
ERP system facilitates the smooth flow of common functional information and practices across the entire organization. In addition, it improves the performance of the supply chain and reduces the cycle times. However, without top management support, having appropriate business plan and vision, re-engineering business process, effective project management, user involvement and education and training, organizations can not embrace the full benefits of such complex system and the risk of failure might be at high level71].
4.2 Software as a Service (SaaS) implementations:
( SaaS is an application hosted on a remote server and accessed through the Internet. A simple and concrete example of SaaS is the "free" email (also called web-based email) systems offered on the Internet such as Microsoft Hotmail, G-mail and Yahoo Mail.  Each program meets the basic criteria of a SaaS application: a vendor (Microsoft, Google or Yahoo) hosts all of the programs, logic and data in a central location and provides end users access to this data and the software which is run and used over the world-wide web). 
The study concludes that SaaS deployments are faster than traditional, on-premise implementations yet are even less likely to deliver expected results this stunning claim demands additional research and detail.
The study [64] reveals that on average, SaaS and hosted solutions are implemented in less time (116 months for SaaS vs.183 for on-premise), at a lower cost (6.2% vs. 6.9% of annual revenue, Figure [3.2] and at a slightly higher level of executive satisfaction (52.6% vs.  50.0%) than traditional on-premise solutions. However, as with any ERP solution, SaaS has its drawbacks. SaaS implementations are significantly less likely to deliver the expected business benefits (23.5% vs  32.9%) than on-premise solutions. In addition, SaaS implementations are significantly more likely to exceed budget than on-premise initiatives (70.6% vs.  59% for other delivery options) figure.


 Figure [3.2] SaaS vs. premise ERP results

4.3 IS development Projects Failure Reasons at post construction activity:
IT Project fails when it does not meet one or more of the following criteria for success [72]. 
• It is delivered on time 
• It is on or under budget 
• It satisfies user requirements 
Only a few projects achieve all three. So what are the key factors for IT projects failure? Organizations and individuals have studied a number of projects that have both succeeded and failed and some common factors emerged. A number of these factors are involved in any particular project failure and they are interacting with each other. Here are some of the most important reasons for failure [10] [62].
4.3.1 Lack of Project Methodology:
Project Methodology or project lifecycle describes the approach that will be taken to carry out a project. Lack of project methodology will force project manager to make on-the-fly decisions, based more on gut reactions than factual and objective analysis [10].
Project should follow a well thought-out route to avoid going in circles, getting lost, and hitting countless roadblocks. Taking unstructured approach is a risk that will lead to unstable results because things rarely fall into place by themselves.
Methodology varies greatly from project to project, taking into account environmental factors and project specifics and, of course, methodology is relative to the size of and the complexity the project. The bigger the project, the more important it is to have this methodology but regardless of size, every project methodology must address three core issues: planning, development, and implementation. By following a pre-defined set of guidelines and a migration path, we have something concrete to which we may refer to and measure progress against. 
4.3.2 Poor Planning:
Planning is one of key factors that affect success of any project because "Fail to plan is a plan to fail" [10] Project manager should pay a lot of attention to this area and give it enough time and effort regardless of time pressure He should be aware of bad results when project plan is none-existent, out of date, incomplete or poorly constructed. 
To plan for a project is to set the foundation for project work by defining the tasks to be accomplished, and the timeframe, resources, staffing, communication, and costs involved in completing these tasks. 
The competence of defining a detailed plan about how work is to be done depends on the project manager technical expertise.  Lack of such expertise will lead to much generalized, in this case the project should have a technical leader whose responsibility is to cooperate with project manager to make detailed plans. 
Here are some kinds of plans that should be done for any successful projects are: 
a- Risk Plans
Every IT project involves some degree of risks not doing an explicit risk assessment is one of the major problems with project planning 
Projects that do not have plan for handling risks are hit by sudden surprises and are left floundering with promised schedules and deliverables and can end up losing the client, because of that we realize the importance of an adequate risk plan  
Nowadays risk management becomes very prime issue especially when the project gets bigger, success here means creating a plan to assess the risks, the 'which', the 'what' and the 'why' of each risk identified and planned for.
b-  Quality Assurance Plans
Projects must develop a QA plan as part of the overall project plan to explain the planning, implementation, and assessment procedures they will put in place to ensure that project outputs comply with business standards and best practice, as well as any specific quality assurance and quality control activities  QA plan integrates all the technical and quality aspects of the project in order to provide a "blueprint" for obtaining the type and quality of environmental data and information needed for a specific decision or use. 
The project's QA plan should cover the listed issues [10]:
• Fitness for Purpose
Deliverables should be fit for purpose  For example, Projects should be internally consistent, up to standard, free of bugs, and perform well  This doesn’t necessarily mean perfection, but fit for purpose consistent with the level of funding and project resources. 
• Best Practice for processes
Projects should follow best practice for creating their deliverables, e g  technical design and architecture, programming, web sites, and data capture  This should include processes, workflow, tools, equipment, and methods. 
• Adherence to Specifications
Projects will be asked to develop their own specifications this might involve requirements specifications, functional specifications, and/or technical specifications. Once specifications are agreed, deliverables must conform to them. 
• Adherence to Standards
Projects must ensure that their deliverables conform to company standards for content, metadata, interoperability, terminology, learning, linking. 
• Accessibility legislation
It's related to provide resources that are accessible to a diverse range of users In order to achieve it we advise that all resources meet good practice standards and guidelines pertaining to the media in which they are produced. 
When deliverables are supplied, project should provide documentation describing the QA tests performed and evidence of compliance. 
The more forward, future-oriented and in-detail planning the higher the chances of success  Each and every activity that is expected down the line gets due attention. 
Not only is this pre-planning well-documented, but also even after the project has taken off, if things don't exactly pan out as planned , the project manager does not hesitate to re-plan, avoiding project management failure, and readily incorporates the changed circumstances in their new version, so that future events are controlled. 
Project plans should consider cost, resources, and requirements to succeed  Indeed these plans should be classified according to the time schedule, means that there should be a monthly plan, weekly plan, and a daily task schedule so that we can follow the progress of the project step by step. 
4.3.3 Poorly-Defined Project Scope (Unclear goals and Objectives)
Project manager should understand the compromise between what they want to accomplish and what they are actually able to accomplish72] when goals exceed the ability to deliver timely results project will fail for sure. 
Successful projects always have a well–defined scope that states realistic goals, and attainable objectives, establishes clear milestones, defines benefits and deliverables, and conducts regular technical reviews and measurements. By this we can ensure that the project will be visible for all parties such as upper managements and clients. 
Scope should be clearly defined as part of the project definition. Much of the work at that time is directed at agreeing the optimum definition of the project - both in terms of its deliverables and in terms of how it will operate. This scope definition will form the baseline against which potential changes are assessed and against which the project's performance is measured. 
The concept of well-defined scope is affected by many factors, for example sometimes the goal of the project maybe partially clear because of poor requirements gathering in the definition stage of project, despite defining clear requirements need time and lots of communications, goals and objectives might be unclear because project users lack the experience to describe what they really require. 
4.3.4 Common scope mistakes:
 The project problems start with the three most common scope mistakes [10]:
• Overrunning initial cost estimations 
• Over- or underestimating project schedule (This is a double-edged sword: Set a large timeframe and run the risk of the project becoming obsolete by the time it's completed  Set a small timeframe in relation to the amount of work required will put a strain on personnel) 
• Miscalculating work to personnel ratio 
4.3.5 Vague Requirements, Poor User Input, Lack of User Involvement:
Nothing kills projects faster than giving users something they didn't ask for and then pretending they did.  IT teams may be given a vague and informal set of requirements, and they, in turn, may not bother to follow-up with users or ask any questions, as a result they will build what they believe is needed not what users need. 
Lack of user involvement causes a great deal of resentment among the corporate user-community, projects may be seen as something forced upon them by developers who only want to test out their new toys  Don't ever forget that projects are built to support end-users, not developers. 
Requirements need to be worked out on both sides because there's a symbiotic relationship between users and developers.
• Users -who know the business processes best- need to clearly express their requirements and provide feedback on each project deliverable. 
• Developers -who know what technology can be used to put those business processes into place- need to ask the right questions and not make any assumptions on what they think the users mean. 
4.3.6 Scope Creep, Objective and Requirements Changes during Project:
IT projects suffer from two classical problems in project management:
• Scope creep 
• Feature creep 
Scope creep refers to uncontrolled and unexpected changes in user expectations and requirements as a project progress, while feature creep refers to uncontrolled addition of features to a system with a wrong assumption that one small feature will add nothing to cost or schedule The project manager should understand project trade-offs and make the right decisions related to resources, features and time schedule even though requirements changes  He should be aware of the risks of change and the risks of not change and should have the ability to balance these risks before deciding what to do. 
One obvious solution is to establish a reasonably stable requirements baseline before any other work goes forward  But even when this is done, requirements may still continue to creep  No one can design a process that assumes requirements are stable  In virtually all projects, there will be some degree of "learning what the requirements really are while building the project  Projects could be headed for trouble if architectures and processes are not change-friendly, or if there are poorly established guidelines that determine how and when requirements can be added, removed, and implemented and who will bear the cost of the changes.  
On the other hand, is that if we architect a project from small, iterative phases instead of mammoth, serial deliverables, we will deliver more quickly, leaving less chance for change to overcome the work, and less risk of large projects failure. 
Another key recommended solution for scope creep is change control process; the change control process will involve a combination of procedures, responsibilities and systems. The key to success is to have a well-controlled but efficient process. 
Define and agree:
• On what basis changes should be approved,
• Who does what?
• The membership of the change control board(s),
• The detailed procedures, forms, etc,
• Protocols for levels of authority, e.g what types of change can be approved without reference to the project's business owners,
• Linkage to other management procedures, e.g the issue management process, configuration management,
• Which tools will be used to support and manage the process?
• How to communicate and promote the process and its importance to all participants 
4.3.7 Poor Architecture which is Inflexible for Any Change:
Any environment usually develops, and according to this development many issues may change such as strategies aligned to this environment objective, requirement…etc. The concept of what we are using today may be useless tomorrow is clear and understood. This concept should be considered when building any project. If the project architecture is inflexible for updates, then this project may die by time because of daily changes and rapid developments. 
People must think ahead about what is likely to change. If we do architecture right, we will not have to restart from zero again and rebuild the project from the beginning as nothing is existed because we are able to add and modify features that caused by any change any time, but if we do it wrong, we will suffer death by a thousand cuts. Bad choices show up as long-term limitations, aggravation, and costs. 
4.3.8 Stakeholders' Conflicts:
All the stakeholders of the project should share similar business interests. It’s a problem when the stakeholders work under the illusion that everyone is going to get everything that they want. They will contradict each other by their differences rather than going through conflict resolution in the early stages  The developers will expose the stakeholders’ irreconcilable differences because.
Stakeholder conflicts can play many different roles in project failures. Often, stakeholders have personal reasons for not being able to work together. 
Other projects, especially smaller projects within larger projects, never go anywhere because the internal stakeholders never agree on priorities.  This is called "pretend projects," [10] meaning a few developers work on them half time or quarter time, and nothing is ever delivered, but what ever the case is, we should always think like this if we start any fixed-fee project we should end it according to a specific deadline, because it is important to allocate budget ahead of time. 
4.3.9 Lack of Top Management Support and Involvement
Few projects have the chance of getting off the ground without the support of those high up in the corporate food chain [73].
Without executive support the project managers in the organization will find a difficulty in aligning business with their projects. 
No one can deny that it's a problem when developers do not know who the "real" sponsors are, and keep progressing without sponsor involvement. For the best true sponsors need to be shown up and communicate with the team, follow the project step by step, hear good and bad news in "small pieces" rather than in "one chunk",[10] this way we will avoid losing their support if any surprise comes on the way. 
Non-sponsored projects are taken less seriously and may sometimes be viewed upon as someone's self-interest pipe dream. Without the backing of senior management to lend credibility to these projects, originators will have a difficult time recruiting employees to participate in development and testing, reason for that is because teams are usually made up of people from different departments who all have their own set of priorities and of course, they all have their own bosses, it's natural that those involved in any project will have tendency to keep the best interests of their own department in mind, and there's nothing wrong with that  In fact, that's why they are on the team, to represent the needs of their department.  However the risk is in having a selfish person or group who may control project, ignoring requirements of others. 
4.3.10 Insufficient Budget and Bad Resources Allocations:
Financial threats are the result of poor budget forecasting and tracking, lack of interdepartmental charge backs, and ineffective tracking of resource and cost allocations 10 of 16 Insufficient budget is still a major reason for missing goals and objectives of projects within the quality framework that is required [10]. The concept for any project is like that project Y always need to be delivered tomorrow within X budget. 
When we talk about budget we should be aware of what may happen if there is no enough funding, so a resource assessment should be made carefully by conducting complete and accurate financial analysis. 
A resource assessment describes the people, skills, hardware, software, and network resources needed to complete a project Resource assessment is sometimes a practical first step to making staffing decisions for a project. 
The project manager is typically responsible to assess resource needs and to decide whether a formal, documented assessment is necessary. 
4.3.10.1 What kinds of projects need a Resource Assessment?
Although every project undergoes some kind of resource assessment, they are frequently informal and undocumented Large, complex projects, and those working with new technology, will benefit most from formal assessment of resource needs 
A resource assessment needs to consider and document each of the following items [73].
• Project Name 
• Staffing & Skills Inventory (What staff are already assigned to the project? What skills do they have?) 
• Roles/Skills Needs (What roles and skills are needed that aren't covered by project staffing?) 
• Staffing Needs (What staff is needed to address roles and/or skills not covered by staff already assigned to the project?) 
• Training Needs (What training is needed to cover skill gaps?) 
• Hardware & Network Needs (What hardware and network resources does the project require?) 
• Software Needs (Does the project require any specialized software?) 
• Support Needs (What kinds of support are needed from other C&C units to address needs for skills and/or roles not covered by project staffing?) 
4.3.11 Poor Schedule Estimation, Unrealistic or Long Timescales:
Scheduling project work is an essential element of project management.  A project schedule makes clear to all participants when work is expected to be completed. It also shows the time-related dependencies between different project tasks. 
In a complex project, several schedules may be necessary, covering different levels of detail or different parts of the project Bad time estimation causes project related problems one common problem.
The schedule and increase the cost to approximately the same degree. In reality, doubling the staff produce a non-linear result. 
In general, every project has a minimum achievable schedule. Many managers are well aware of the need for fast delivery, leading to other problem of unrealistic timescales. These are set without considering the volume of work that needs to be done to ensure delivery. As a result these projects are either delivered late or only have a fraction of the facilities that were asked for or they are bug-filled, because of that every project manager should consider volume of work, number of staff, number of working hours, and the duration of each task in parallel to avoid any kind of pressure, its is true that working under pressure can increase the quantity of results one receives, but, after a point, dramatically reduces the quality of those results In fact pressure sometimes produces the opposite of its intended effect [Error: Reference source not found10].
On the other hand if the project manager sets long time scales, the project may be useless as a result of changes in requirements. 
Normally requirements change from time to time due to changes within the project users' environment if the project objective is to serve certain society, it should be parallel to their requirements the key recommendation is that the project time scales should be short, which means that larger projects should be split into separate projects. 
4.3.11.1 Who does Project Scheduling?
Setting overall completion dates must be done by the project sponsor and stakeholders the project manager assists in this by digesting information about scope, deliverables, and resources, and estimating times for completion of project tasks [73]. 
Once an overall schedule is set, the project manager is responsible for monitoring the progress of the project and revising the schedule if needed. This must be done in consultation with project team members who are doing the work. Working with team members to produce accurate time estimates is one of the high mysteries of the art of project management. The project manager must balance the needs for honesty and realism with appropriate motivation to keep the project on track despite inevitable surprises. 
There will typically be give-and-take as a project proceeds among budget, features, and schedule. It is essential for the project manager to keep all participants informed as to current schedule status 12 of 16 Time schedules should be reviewed to see if they are realistic and participants should express their reservations on it. 
4.3.12 Communication breakdowns, Failure to communicate and act as a team:
Projects sometimes fail because of improper communication between teamwork, in such cases they lack the ability to work as a cohesive unit and are in constant disagreement the arguments and infighting causes everyone to move in opposite directions. 
Another common problem is the size of project team, there is a direct relationship between size of project team and difficulty in keeping all members of that team up to date on changes, progress, tools, and issues. Such problems are common on large projects, especially if people are working at different sites In many troubled projects there isn't one person who has an overview of the whole project Each project member needs to know how his or her one piece fits into the entire architecture.  
The key recommendation here is that rarely to form a team of more than five members, instead opting to form multiple teams working on individual objectives. 
The project manager is responsible to identify communication needs and to decide whether a formal communication plan is needed.
Although every project undergoes some kind of communication planning, it is frequently informal determining who needs to attend which meetings, receive which reports, etc Projects of long duration will benefit from formal planning because the project stakeholders are likely to change over time Projects that affect a large number of people or organizations may also benefit from formal planning to ensure full identification of both stakeholders and of communication needs. 

4.3.13 Staffing (Inappropriate Skills, Lack of Number of staff):
Staffing is one of the most critical elements of a project's success. Without staff, there is no project.  Once we have defined the project and are clear about at least some of the project's initial tasks, we can define our staffing needs.  It's important to know the type of staff that the project needs, e.g., database administrator, one or more programmers, and technical writer. Once the type of staff has been defined, we need to get individuals assigned to our project. The best places to go for staffing resources are the projects sponsor and stakeholders. 
We should be prepared to answer the following questions that might come up when we ask for staffing resources [10]:
• What percentage of their time will we need?
• How long will we need this person?
• What are the benefits of this particular person working on the project?
• How do the skills needed and this person's skills match up?
• How many members do we need to share workload?
Most IT projects require a diverse range of skills; the project must have the right people to do the right job 
For example, programmers need to have experience in the technology before counting on them, so they should be selected wisely. Furthermore, managers can perform poorly if they lead projects that do not match their expertise. The project manager should have enough experience and knowledge, preferable passed similar projects before, so that same mistakes will not be repeated  Projects which deal with high technology need managers with solid technical skills  In such projects, authority must reside with people who understand the implications of specific technical risks.  
However, the best technologists are not necessarily always poised to be the best managers. The skill set for management and programming are disjoint. The larger the project, the more need there is for people with excellent planning, oversight, organization, and communications skills, all excellent technologists do not necessarily have these abilities. 
The solution to skill-driven challenges is easy to define but difficult and expensive to accomplish [73]. 
4.3.14 Poor Testing:
The developers will do a great deal of testing during development but eventually users must run acceptance tests to see if the project meets their business requirements and this stage should be before the project implementation.  In fact skip the testing phase because the project is way behind schedule will lead to a downright failure. 
However testing often fails to catch many faults before a project goes live because [10]:
• Poor requirements which cannot be tested 
• Poorly or non planned tests meaning that the project is not methodically checked 
• Inadequately trained users who do not know what the purpose of testing is 
• Inadequate time to perform tests as the project is late 
Users, in order to build their confidence with a project, and to utilize their experience of the business, should do the acceptance testing. To do so they need good testable requirements, well designed and planned tests, be adequately trained, and have sufficient time to achieve the testing objectives 
4.3.15 Technology Illiteracy:
It's related to the failure in aligning business objectives with IT and its processes; this usually occurs when the company's internal controls have material weaknesses or when it is in non-compliance with various processes, because of that each project should have Internal or external auditors who have really an obligation to publicly report facts. 
Sometimes adopting new technology may lead to a failure, even though it is successfully tested, implementing it for the first time in the project is in itself a risk. Will the team use it in the right way? Will they have enough practice while they don’t have expertise? Will it satisfy the project requirements?
4.3.16 Hidden Costs of going :
Any failure will be viewed as a direct result of underperformance, even though underperformance is not often a significant factor in the failure of most projects. 
Instead, failed projects often have goals that were inherently unattainable, poor staff, etc 
4.3.17 Late Failure Warning Signals:
The early project milestones involve diagrams, designs, and other documents that do not involve working code, these and other project milestones then go by or less on schedule, and testing may start more or less on time, so that errors which discovered days before the deadline of the project will cause the project not to be completed even close to its deadline. 
4.4  ERP systems implementation:
4.4.1 ERP system implementation benefits and outcomes 
4.4.1.1 Benefits of ERP systems include [6666]: 
    i. Reduction in time and cost associated with warranty and the returns of processing. 
    ii. Improved communication and coordination among cross-functional teams, including representatives from logistics, production, purchasing, finance, marketing, and research and development (R&D) 
    iii. Improved visibility into capacity, inventory, and labour. 
    iv. Reduction in delivery time and transportation costs through vehicle-routing analysis. 
    v. Providing measurable ERP benefits: According to the study (New research and statistics [6262] say that a significant number of implementations surveyed did not deliver anywhere near the anticipated benefit or value where: 31% of companies surveyed fail to realize at least half of the business benefits they expected from their ERP systems, and 22% of implementations fail to deliver at least some measurable business benefits from their ERP solutions  In addition, over one in three companies surveyed (30%) realized major operational disruptions after implementation go-live, such as the inability to ship products or to close the books  Finally, only 68% of executives and 61% of employees are at least somewhat satisfied with their ERP solutions. 
    vi. Determination of weights of influence over functioning organizations in developing countries : On the research  presented by H Abdelghaffar, and R H Abdel Azim, "Significant factors influencing ERP implementation in large organizations", 2010 [7474]. The researchers examine some of CSFs that are stated in the adopted theoretical framework in an attempt to answer our research question: Which factors have significant impact on the successful ERP implementation in large organizations working in Egypt [74].  The researchers assume that the different CSFs have different weights of influence over organizations functioning in developing countries, example of which is Egypt.  
4.4.1.2 ERP System Implementation Outcomes
Although they are a fairly recent development, ERP systems are already well documented in the Information Systems literature as being difficult to implement within budget, within anticipated time frames and with functionality which is satisfactory to end users [7575]. 
    i. Defining the indicators of difficulties experienced by organizations as they implement their ERP systems :According to Lois Fitz-Gerald, Jennie Carroll, (2003) research [76], based on feedback from 117 companies involved in ERP system implementation, it provides the following indicators of these difficulties:[7777] one in four ERP projects is over budget, approximately 20% of systems are terminated before implementation is completed, 30% of respondents confirm that their ERP project failed to achieve business objectives and Return On Investment( ROI)  is often 6 months to years longer than expected. 
    ii. Understanding and defining ERP success or failure where research in a number of allied fields including information systems, project management, strategic management and software engineering has been examined. 
    iii. Explanation and evaluation of the meaning of the terminology relating to success or failure of ERP implementations, for an organization or a researcher. 
    iv. Defining a successful ERP system implementation as one within budget, on time and delivers anticipated functionality [Error: Reference source not found76].  
    v. Implementation failures may be cancelled before completion, or never successfully integrated into the business on implementation [Error: Reference source not found76].  
    vi. Categorization of Software development project literature as follows: failed (product does not meet customer or quality expectations), low success (above average cost, effort and schedule performance but meeting quality expectations), successful (average cost, effort quality and time), high success (less than average cost, effort and time), exceptional success (meeting all quality, cost effort and schedule expectations) [Error: Reference source not found76]. 
    vii.  Differentiating between success and benefits: where the literature on IS effectiveness highlights that success and measurements of benefits from successful implementation are two different things [76] and that benefits are highly complex to evaluate.  
    viii. Success conceptualization where different stakeholders in the same organization will come to different conclusions about the success of the same system and “IS Success is thus conceptualized as a value judgment made by an individual, from the point of some stakeholder” [78].  
    ix. Giving a clue on evaluating information systems (especially ERP systems) which is much more complex today when the trend towards interactive computing has expanded the overlap between the work system and the information system which supports it [79].  
    x. Determining the basis on which the effectiveness or success of a particular system (which is a combination of a work system and information system) is evaluated since the work system specialists (business focused) and information system specialists (IT focused) may evaluate system effectiveness completely differently [79].
    xi. Differentiating between the complete and incomplete failure of ERP system implementation where a challenged ERP system implementation could be supporting business processes and ensuring business continuity, therefore from an organizational perspective, as a replacement system it has not failed totally. However, it may have been slower and more expensive to implement than expected and may not be delivering the strategic advantage and full business process improvement.  
    xii. Commercial organizations with ERP systems in this category would prefer that their clients and competitors were unaware of these challenged implementations and they are not widely publicized in the literature. The financial costs associated with challenged implementations accrue from provision of additional resources for remediation, data validation and data cleansing, re-programming and re-training. The human costs in time wasted and confidence lost is incalculable. 
    xiii. In that research [76], successful ERP implementations are defined as those that deliver full functionality on time and within budget, failed implementations are abandoned prior to, or during, implementation and so are never implemented. Challenged implementations may have gone over time or over budget or are operational but not delivering full functionality. 
4.4.1.3 ERP systems Measurable benefits  
According to the study (New research and statistics [62] say that a significant number of implementations surveyed did not deliver anywhere near the anticipated benefit or value where: 31% of companies surveyed fail to realize at least half of the business benefits they expected from their ERP systems, and 22% of implementations fail to deliver at least some measurable business benefits from their ERP solutions. In addition, over one in three companies surveyed (30%) realized major operational disruptions after implementation go-live, such as the inability to ship products or to close the books  Finally, only 68% of executives and 61% of employees are at least somewhat satisfied with their ERP solutions  figure [3.3] illustrate this information.

Figure [3.3] ERP systems failure reasons
Industry statistics show that greater than 60% of ERP implementation starts historically fail   Does this mean that we are doomed from the start?  Of course not, if we learn from the mistakes of others   So the pertinent question is what are the main causes of ERP failure and what can be done to prevent this from happening to we? According to G  Ligus -2003 from Rockford Consulting Group, Ltd[6665], and our surveys on the Egyptian enterprises adopting ERP system the researchers found that there are twelve major reasons for why companies get bogged down or fail in implementing ERP 
4.4.1.4 Some ERP Systems Risks 
According to the article published by Tien Tzuo on the CIO Network blog on Forbes’ website suggests that ERP is dead  Although we not at all convinced that ERP is dead, we have  agree that ERP is changing and will look very different in five to ten years[80]. Business intelligence, mobile solutions, social media integration, subscription-based pricing models, and private clouds are all exciting new changes to ERP systems. Companies are also getting smarter about how they implement ERP systems – for example, they understand they have multiple deployment options. However, SaaS and subscription-based solutions are just one of a portfolio of options available to CFOs and CIOs, and traditional ERP systems will continue to be a viable option for a number of organizations now and in the future. Some of the risks of each are illustrated below figure [3.4]:


















Figure [3.4] Some ERP systems risks [80]
The argument over SaaS vs.  Cloud vs.  Traditional ERP is simply noise that masks a bigger and deeper problem: most enterprise software initiatives fail. Call it what you want and use all the cool technologies that we want, but our project will still fail if we don’t address the real differentiator between software success and failure, which is more related to business processes and organizational change than it is to software [80]. The SaaS software in the world doesn’t matter one bit until those bigger issues are addressed. We can’t predict the future and we don’t bet, but if we could or did, we would put big money on that problem not being automated in my lifetime. So instead of discussing whether or not ERP is going to die, we should be asking: “Are enterprise software implementations ever going to stop failing?” 80]. 
4.4.2 Common obstacles of ERP systems implementation:
According to research "An Enhanced Framework For Measuring ERP Implementation Success In The Egyptian Environment" [81] and many other survey's we can summarize the common obstacles of ERP implementation as follows:
4.4.2.1 Lack of Top Management Commitment
The propensity of top management to delegate the oversight of an ERP implementation to lower management levels often results in (1) being "out of touch" with critical events, or (2) the lack of understanding of the size, scope, and technical aspects of the project, and subsequently, the lack of proper commitment of time and resources required for a successful implementation   The result is a failure waiting to happen. 


4.4.2.2 Inadequate Requirements Definition
Surveys have shown that inadequate definition of functional requirements accounts for nearly 60% of ERP implementation failures. This is simply a matter of not comprehensively and systematically developing a quality set of functional requirements definitions This leads to the second greatest cause of ERP implementation failures: poor package selection. 
4.4.2.3 Poor ERP Package Selection
Poor package selection occurs when a company has inadequately developed functional requirements definitions It also occurs when staff members assigned to ERP projects do not take the time to run the screens of the new system, as they would during their daily work tasks, to find out if the software package features are adequate for their needs.  
Another reason the researchers have found is executives, familiar with an ERP system from a last job they held, implement the same system in their new company without defining functional requirements. The researchers have also encountered companies who made major gaffes by selecting a package at the top levels of a company without intimately knowing its characteristics  What often results from this is the ERP package doesn't fit the organizational needs, or that the package selected takes longer to process daily work tasks.  
The researchers have also seen executives select a distribution package for a manufacturing environment, or a manufacturing package for a distribution environment, for obscure reason, such as liking one salesman over another. 
4.4.2.3 Inadequate Resources
The fourth greatest reason for ERP implementation failures is inadequate resources. Many companies will attempt to "save dollars" by doing everything on an overtime basis, whether or not there are adequate skills within the company, extending individual work loads to 150%  This approach can be a "kiss of death" for the program  Time and time again the researchers run across this mistake in ERP implementations. The financial and emotional drain of what seems sometimes to be perpetual extensions, reschedules and delays of implementations takes its toll. People burn out after having put in extensive hours over a long period of time.  

4.4.2.5 Resistance to Change/Lack of Buy-in
The lack of a change management approach as part of the program can prevent a program from succeeding  Resistance to change is quite often caused by (1) A failure to build a case for change, (2) Lack of involvement by those responsible for working with changed processes (3) Inadequate communication (3) Lack of visible top management support and commitment, and (5) Arrogance   A lack of buy-in often results from not getting end-users involved in the project from the very start, thereby negating their authorship and ownership of the new system and processes. 
4.4.2.6 Miscalculation of Time and Effort
Another cause of ERP implementation failure is the miscalculation of effort and time it will take to accomplish the project   Companies who treat an ERP selection, evaluation and implementation comparable to buying a washing machine are doomed to failure. 

4.4.2.7 Misfit of Application Software with Business Processes
 One of the main causes of ERP implementation failure is the misfit of application software with the company business processes this failure -- to examine underlying business process flaws, and integrate the applications with the business processes, causes loss of productivity and time, and ultimate benefits. 
4.4.2.8 Unrealistic Expectation of Benefits and Return On Investment) ROI ) 
Another significant cause for ERP implementation failure is the unrealistic expectation of benefits and return on investment.  Software providers are notorious for overstating the benefits in terms of ROI, when the total costs of the project have been understated.  Often left out of the total costs are costs of planning, consulting fees, training, testing, data conversions, documentation, replacement staffing, and the learning curve performance drop.  When this happens, a company doesn't stand a chance of achieving the ROI it anticipated.  
4.4.2.9 Inadequate Training 
Another of the biggest causes of ERP implementation failure is inadequate education and training, which are almost always underestimated. ERP-related training is crucial as most employees must learn new software interfaces and business processes which affect the operation of the entire enterprise. The corporate culture is impacted by changes in the company’s business processes, and short changing this part of the ERP implementation leads to much pain and suffering downstream. 
4.4.2.10 Poor Project Design and Management
A major mistake is to short-cut critical events in the project plan, such as time for documentation, redefining and integrating processes, or testing before "going live ".
Another common mistake is made when a company leaves out the self-examination of business processes and uses ERP to cover-up weaknesses  It is easier to buy software than to perform the more difficult task of identifying weaknesses and opportunities for improvement.   
4.4.2.11 Poor Communications
One of the causes of ERP implementation failure is poor project communications, beginning with a failure to announce the reason for the up and coming effort, and continuing to advise the organization of the progress and importance of the ERP implementation to the company   Poor communications prevent different parts of the organization from assessing how they will be impacted by changes in processes, policies, and procedures.  Communications are a vital part of managing change in a corporate environment.  
4.4.2.12 Poor-advised Cost Cutting
Another of the key causes of ERP implementation failure is ill-advised cost cutting.  In an effort to avoid temporary conversion costs, some companies take a very risky route and go live at multi-plant sites simultaneously; subjecting all plants or some plants to a total shutdown should there be a false start-up. Others attempt to unrealistically compress the schedule in order to save on expenses, only to eventually overrun both schedule and budget.  The researchers feel that ROI should take a "back seat" when upgrading an important part of a company's infrastructure: the information system.  Instead the implementation should be treated as an upgrade to the company infrastructure that is necessary to maintain or gain a strategic and competitive advantage.




4.5 Conclusions 
In order to ensure software system success [6], there are several factors to keep in mind: 
1- Don’t cut corners, methodologically In the long run, these results in system failure or an inadequate system that doesn’t meet the users’ needs.
2- Audit each major deliverable and step along the way for accuracy and correctness.  
3- Carefully monitor top management support for the project Make sure that managers are aware of the progress of the team.  
4- Secure the correct technical lead for the project.  
There is no free lunch in software engineering if we insist on keeping costs low and hurrying the project along, then quality will be low or the risk of failure will be high no matter how well the project is managed.

As the findings of the 2010 ERP Report 80] indicate, ERP software is a double-edged sword. On the one hand, it has the ability to transform organizations by making them more competitive, decreasing costs, and providing a foundation for growth. On the other hand, the selection and implementation process can be very difficult - or even disastrous - if not managed appropriately. The companies that enjoy successful implementations are those that adhere to the best practices outlined above, have a clear vision of their ERP objectives, and leverage internal and external ERP expertise to reduce business risk.




















































Chapter 5
Management and Governance of Successful IS development and ERP systems projects Implementation
5.1 The Proposed Framework for Management of Successful IS Development Software Implementation   

5.1.1 literature review:
 Based on zaheer habib [82] research , The Software Engineering Institute static's shows that: the development and cost of software projects have become relatively very high due to complexity of systems that make software process more complex to be managed  Thus, it is essential to consider the Software Process Improvement (SPI) factors that directly affect the process and try to explore the best solution that helps in best management of the software process which ultimately produce the desirable results. While in the comprehensive literature review, it becomes obvious that CSFs plays a vital role in the implementation of SPI and change process. However, effective used of factors such as management commitment; staff involvement etc that influence the change process is still an argument questions. Number of research conducted in this regards but this question still un-answered. Literature review also explores that motivators and obstacles both have positive and negative impact on the SPI process respectively. These motivators and obstacles also help in motivating and removing hurdle in the change process, if carefully identify and appropriately used. To answers, the above questions the researcher conducted this study that is based on empirical study that comprises of structure interview with eight SPI practitioners in 5 different organizations across Sweden, Pakistan, Denmark and Norway. The study [82] result shows the lists of CSFs, motivators and obstacles that have positive impact on change management. The finding of study guides the practitioners in the overall process of SPI initiatives program that provides better mechanism to manage the SPI activities. Additionally, helps in enhancing the overall productivity and in the cost effective implementation of the process improvement program 
While in comprehensive literature reviews i.e.  Based on case studies, experience reports, research articles and books .The researcher identified ten critical success factors table [5.1] for details 

Critical success factors (CSFs)
Categories
Priority 
Percentage, N=17 
Senior Management Commitment 
1 
88% 
Staff Involvement 
2 
71% 
Experience Staff 
3 
53% 
SPI awareness and Implementation 
3 
53% 
Training and mentoring 
5 
31% 
Allocation of Resources 
6 
35% 
Communication and Collaboration 
7 
35% 
SPI goals and Objective 
8 
29% 
Organization Culture 
9 
29% 
Organization Politics 
10 
29% 
Table [5 .1]: List of CSFs identified through literature review [82]  

And based on Robert Lahey President REL Solutions Inc., Canada [83].  The author present a framework that identifies four broad building blocks needed for an effective M&E (Monitoring & Evaluation) system: (i) vision, (ii) an enabling environment, (iii) the infrastructure to supply M&E information, and, (iv) the infrastructure to demand and use M&E information table [5.2].

A set of twelve ‘Critical Success Factors’ are identified that recognize the importance of positioning M&E within a broader context than simply a technical one, that is, also recognizing the political support factors needed to launch and sustain an effective M&E system And, for each element of the framework examined, comment will be provided (drawing on standard practices from other countries) to advice on an appropriate strategy for M&E capacity building.  

While cautioning that ‘one size does not fit all’, the framework can indeed serve as a useful guide or ‘diagnostic tool’ to international M&E system development in many ways: in planning, in assessing progress and identifying gaps, and, as a communication vehicle and springboard to inform and educate technical and non-technical personnel alike on the various ways that knowledge-building and innovation are being introduced into public sector organizations. 

Critical Success Factors
             Key considerations for success

Drivers
    • What is driving the demand for M&E?
    • What are the broad goals of the exercise?

Uses
    • How will M&E information be used? By whom? And, for what audience(s)?
    • Are there real needs for information that are currently not being met?

Leadership
    • Is leadership supportive? Leading the way?
    • Is there a ‘champion’ for the M&E exercise?


Commitment
    • Is there commitment to not only launch an M&E exercise, but to also sustain it?
    • What will serve as the basis to ensure that an M&E system gets implemented? Is sustained?

Resourcing
    • Where will the resources ($) to develop systems and hire & train skilled personnel come from?
    • Will organizations be required to internally reallocate? Or, be given new money?

Accountability
    • Who will be accountable for ensuring that an M&E system is a functioning part of the public sector?
    • Have roles & responsibilities been firmly established?


Technical Capacity
    • Is there a capacity (data systems & infrastructure) to collect reliable data & report credible information?
    • Is there an adequate analytical capacity (skilled personnel)?
    • Are there existing institutions that could serve as credible ‘partners’ (e g. National Statistical Office, Research institutes)?



Infrastructure to Supply M&E Information
    • Is there a Policy and a set of Standards in place that describe roles, responsibilities & expectations re the operation of the M&E system and the use of M&E information?
    • Are the organizations & Units that collect & analyze M&E information structured & adequately resourced ($ & HR)?
    • Is the M&E information that gets reported credible, timely & responding to the priority issues? 



Infrastructure to Use M&E Information
    • Are there formal policies or requirements on how performance monitoring & evaluation information gets ‘used’ by organizations?
    • What are the ‘incentives’ within an organization for using M&E information (rewards and/or sanctions)?
    • Are there formal or informal vehicles/mechanisms/fora for reporting, sharing or tabling M&E information?
    • Is results-based performance factored into personnel assessments?


Oversight
    • How will the system be monitored over time to ensure that it is functioning as expected? And, to the level expected?
    • Does the National Audit Office play any role in monitoring the M&E system & the use of performance information across government?
    • Is there a Policy Centre (e g.  Centre of Excellence for Evaluation) to monitor implementation?
    • Will the ‘performance’ of the M&E system itself be measured? Adjusted as necessary?



Values & Ethics
    • Is there a formal code of conduct describing accountabilities & expected behaviour for public servants (e.g.  Transparency, access to information, fair & balanced reporting, accountability)?
    • Is this code well understood and adhered to by all?
    • Is ‘speaking truth to power’ considered appropriate within a public service organization?

Sustainability
    • What requirements/safeguards are there to ensure that an M&E system will be made sustainable (i.e.  Allowed to continue over time)?
Table [5. 2]: A Framework for Developing an M & E System [83]

Also based on the Ahmad A  Rabaa’I [Error: Reference source not found84] while critical success factors (CSFs) of enterprise system (ES) implementation are mature concepts and have received considerable attention for over a decade, researchers have very often focused on only a specific aspect of the implementation process or a specific CSF.  Resultantly, there is (1) little research documented that encompasses all significant CSF considerations and (2) little empirical research into the important factors of successful ES implementation.  This research [84] is part of a larger research effort that aims to contribute to understanding the phenomenon of ES CSFs, and reports on preliminary findings from a case study conducted at a Queensland University of Technology (QUT) in Australia.  This research.  [Error: Reference source not found84] reports on an empirically derived CSFs framework using a directed content analysis of 79 studies, from top IS outlets, employing the characteristics of the analytic theory, and from six different projects implemented at QUT .

The framework on research84] consists of fifteen CSFs, including: Top management support and Commitment (F1), Change management (F2), Business process reengineering (BPR) and system’s customization (F3), Training and Education (F3), Project management (F5), Team composition (F6),Visioning and planning (F7), Consultant selection and relationship (F8), Communication plan (F9), ES selection (F10), Project champion (F11), Implementation strategy and timeframe (F12), ES testing (F13), Post-implementation evaluation (F13), and Empowered decision making (F15). Table [5.3] defines the CSFs of the a-priori framework and provides further evidence of the analysis effort. It also shows the number of citations, reported in the reviewed literature, for each factor. 













Table [5 .3]: Frequency analysis and definitions of CSFs in the literature [Error: Reference source not found84] 
5.1.2 Role of CMMI, Waterfall and Agile as Software Development Models in implementation activity 
5.1.2.1 CMMI Software Development Model:
CMMI (Capability Maturity Model Integration) that is a process improvement approach that provides organizations with the essential elements of effective processes, which will improve their performance. CMMI-based process improvement includes identifying the organization’s process strengths and weaknesses and making process changes to turn weaknesses into strengths.  
CMMI may also be understood as a framework to recognize and improve processes within organization Because of it's abstraction it can be used for all kinds of manufacture CMMI levels is a set of steps which each organization can obtain in order to increase its value on a market It requires a lot of involvement and efforts to get onto level 5 (figure [5.1]). 
Level 1 - Initial (Chaotic) 
It is characteristic of processes at this level that they are (typically) undocumented and in a state of dynamic change, tending to be driven in an ad hoc, uncontrolled and reactive manner by users or events this provides a chaotic or unstable environment for the processes.  
Level 2 - Repeatable 
It is characteristic of processes at this level that some processes are repeatable, possibly with consistent results.  Process discipline is unlikely to be rigorous, but where it exists it may help to ensure that existing processes are maintained during times of stress.  
Level 3 - Defined 
It is characteristic of processes at this level that there are sets of defined and documented standard processes established and subject to some degree of improvement over time  These standard processes are in place (i e , they are the AS-IS processes) and used to establish consistency of process performance across the organization.  
Level 3 - Managed 
It is characteristic of processes at this level that, using process metrics, management can effectively control the AS-IS process (e g , for software development)  In particular, management can identify ways to adjust and adapt the process to particular projects without measurable losses of quality or deviations from specifications  Process Capability is established from this level.  
Level 5 - Optimized 
It is a characteristic of processes at this level that the focus is on continually improving process performance through both incremental and innovative technological changes/improvements  
At maturity level 5, processes are concerned with addressing statistical common causes of process variation and changing the process (for example, to shift the mean of the process performance) to improve process performance  This would be done at the same time as maintaining the likelihood of achieving the established quantitative process-improvement objectives. 





Figure [5.1] CMMI model diagram

5.1.2.2 Waterfall software development Model
Also since the time it was first published by Winston W Royce in 1970, the waterfall model has been used widely in the field of software development.  
Waterfall Model is a Software Development Model. The waterfall model phases of software development are as follows: requirement specification, conception, analysis, design, coding, testing & debugging, installation and finally, maintenance. In this sequentially structured approach, the development team goes ahead to the next stage of development, only after the previous stage is fully accomplished The biggest disadvantage of the waterfall model is one of its greatest advantages85] we cannot go back, if the design phase has gone wrong, things can get very complicated in the implementation phase.  Second thing the client is not very clear of what he exactly wants from the software. Any changes that he mentions in between may cause a lot of confusion. Small changes or errors that arise in the completed software may cause a lot of problem  The greatest disadvantage of the waterfall model is that until the final stage of the development cycle is complete, a working model of the software does not lie in the hands of the client  Thus, he is hardly in a position to mention if what has been designed is exactly what he had asked for 
With the pervious disadvantages of Waterfall Model this model continues to remain one of the most popular models used in the field of software development [85] as shown in figure [5.2].


Figure [5.2] Waterfall Model diagram
On the other hand, the agile model of software development evolved in the 1990s, when developers decided to break away from traditional structured, segmented, bureaucratic approaches to software development and moved towards more flexible development styles  The 'Agile' or 'Lightweight' methods as they were called were formally defined in a research paper by Edmonds in 1973  Some of the most prominent and popular agile methods of software development, that subsequently evolved, are 'Scrum' in 1995, 'Crystal Clear', 'Extreme Programming' in 1996, 'Adaptive Software Development', 'Dynamic Systems Development Method' in 1995 and 'Feature Driven Development'  In 2001, a group of pioneers in agile software development came together and declared the 'Agile Manifesto', which is a set of canonical rules of sorts, for agile software development methods 
5.1.2.3 Agile software development model :
also Agile software development is a group of software development methodologies based on iterative and incremental development, where requirements and solutions evolve through collaboration between self-organizing, cross-functional teams figure [5.3].  It promotes adaptive planning, evolutionary development and delivery, a time-boxed iterative approach, and encourages rapid and flexible response to change  It is a conceptual framework that promotes foreseen interactions throughout the development cycle  The Agile Manifesto [86Error: Reference source not found] introduced the term in 2001 Twelve principles underlie the Agile Manifesto, including :
    • Customer satisfaction by rapid delivery of useful software 
    • Welcome changing requirements, even late in development 
    • Working software is delivered frequently (weeks rather than months) 
    • Working software is the principal measure of progress 
    • Sustainable development, able to maintain a constant pace 
    • Close, daily co-operation between business people and developers 
    • Face-to-face conversation is the best form of communication (co-location) 
    • Projects are built around motivated individuals, who should be trusted 
    • Continuous attention to technical excellence and good design 
    • Simplicity 
    • Self-organizing teams 
    • Regular adaptation to changing circumstances 


Figure [5.3] Agile model diagram

There are many specific agile development methods most promote development, teamwork, collaboration, and process adaptability throughout the life-cycle of the project Well-known agile software development methods include:
    • Agile Modeling 
    • Agile Unified Process (AUP) 
    • Dynamic Systems Development Method (DSDM) 
    • Essential Unified Process (EssUP) 
    • Exia Process (ExP) 
    • Extreme Programming (XP) 
    • Feature Driven Development (FDD) 
    • Open Unified Process (OpenUP) 
    • Scrum 
    • Crystal Clear 
    • Velocity tracking 
    • Kanban (development) 
    • GSD 
5.1.2.3 Waterfall Model Vs Agile Model:
The waterfall model is suited for development of programs that are already stable  That is, their design doesn't need a major makeover  In situations where the designers of a software program can accurately predict the flaws that may arise, in advance, waterfall model is the appropriate choice  Despite all its flaws, a waterfall model design is easier to manage and the development costs can be ascertained beforehand  Waterfall model is a natural choice when the customer has provided a clear list of requirements, which are not likely to be modified  On the other hand, when the customer is not clear about his requirements or expectations from the end product, adopting Agile model makes sense  The experience of the team members in handling the specific type of project should also be taken into consideration  If the developers are experienced enough at handling that project, then Agile approach is a better option. 
Another point of consideration is the time frame within which the project is expected to be finished  When the time frame is long enough[87] [88]  Choosing the Waterfall route is possible, while rapid delivery projects are best handled in the Agile way  Cost of the project is another point of consideration, which may influence your choice. 
Agile models are applicable in every area of software development.  It depends a lot more on the team effort of above average programmers, than relying on a few expert programmers  It's best suited for web based applications where its iterative nature helps in incorporating and correcting the various bugs that arise over time [88]  Choose a model that best suits the experience of your team. 
All the pervious models not concentrated in implementation phase as details and not explained the detailed Critical Success Factors (CSFs) for software development and ERP system implementation 
5.1.3 The proposed Framework for Management of Successful IS Development Software implementation: 
Based on the all the pervious frameworks and models [82], [83], and through an extensive literary review and with studying the CMMI , Waterfall and Agile methods and with interviews with IT managers having previous experience in managing IS projects implementation and with a faculty member with a good background in this subject  Number of eighteen (18) Critical Success Factors (CSFs) for IS projects implementation were identified (figure [5.4]) .

Top Management category factors
F1: Senior Management Commitment
F2: Leadership
F3: Competence and BPR 
F3: SPI objectives and goals 
 
Project category factors
F5: Staff Involvement 
F6: Experience Staff 
F7: Return on investment (ROI)
F8: SPI awareness and Implementation methodology 

Organization category  factors
F9: Organizational Culture
F10: Organizational Politics
F11: Communication and Collaboration
F12: Wide Commitment 
F13: Resistance

System category  factors
F13: Allocation of Resources
F15: Training and mentoring
F16: Sustainability
F17: Ease to use 
F18: Minimal Customization 















































Figure [5.4]: The proposed Framework for Management of Successful IS Development Software Implementation 
Along with a division of the known 18 factors into 3 categories (Top management, Project, Organization and System) our main concern while performing this study was to collect the factors that could be more beneficial to a developing country setting like Egypt. The final list included 18 factors, discussed later.  
This highlights the link applying the factors and a satisfactory outcome of the project, and also for the framework to be as usable as possible; the ratio of total level of factor fulfilment to how many of the final 18 factors were fulfilled is the base of evaluation.  
For instance, if the responding organization fulfils 67% percent of each factor (based on 6 questions per factor (explained in chapter 6 at section 6.1), 4 questions (governing questions) must be replied by yes as a positive reply except factor 13 (resistance) must be replied by no to be a positive reply. The result will be 67%. That is, the probability of success of this project is 67%, and so a text describing what the organization’s strengths and weaknesses will be described according to the different factors, along with a quick-list of possible future managerial actions to strengthen the identified weaknesses. 
Data collection is done using a survey and interviews with major players of the large companies working in the Egyptian market Findings show that certain factors have more significance in these organizations and their influences vary on the ERP successful implementation. 
A description of the 18 factors with the corresponding literary divided to pervious four categories support can be found in the following section:
5.1.3.1 Top Management category factors
5.1.3.1.1 F1: Senior Management Commitment: 
Senior management commitment is most cited factors in the most literatures [82]  These researchers use different key words to define the “management commitment” term, for example, higher management commitment, executive support, top down commitment etc  However, all of researchers tried to share their findings about the role of senior management commitment and its importance in Software process Improvement (SPI). Different group of practitioners belonging to industries with best practice concepts and approaches for successful implementation of SPI and initiative taken, is highlighted in their empirical studies results and, how truly commitment and involvement of senior management a bled them for successful implementation of SPI initiative program was pointed out.  

Management commitment and support is one of the most important factors that can play a vital role in successful implementation of SPI and initiative program [90]. Without management support, progress cannot be granted. It is the level of commitment which higher management ensures to support at all the operating levels of the organization that sponsors the change in order for successful implementation of SPI assessment and, it is also very essential to overcome barriers which are set by staffs and groups against this change. This study also confirmed that the monitoring of the progress by higher management is the most vital factor in successful implementation of SPI.  
5.1.3.1.2 F2: Leadership:
The organization should have a strong and committed leadership that has the ability to motivate the employees to change Error: Reference source not found[Error: Reference source not found92][Error: Reference source not found93].
5.1.3.1.3 F3 : Competence and BPR 
The organization should have individuals with a broad competence of IS Projects, BPR or other IT-related projects involved in both the steering committee and the entire project. BPR is the fundamental rethinking and radical redesign of business processes to achieve dramatic improvements in critical, contemporary measures of performance, such as cost, quality, service and speed" IS Projects are built on best practices that are followed in the industry  Implementing an IS Projects involves reengineering the existing business processes to align the best business standards  [94]Error: Reference source not found[9595].

 
5.1.3.1.3 F3: SPI objectives and goals 
It is necessary for organization to set realistic & relevant objectives and goals for SPI. These objectives need to be crystal clear and, SPI managers need to communicate to all the actions groups within the organization.  
Establishing the realistic objectives means that goals seem to be achieved in the near future and its objectives and goals are not too ambitious  It demand that the expectations should be clear and the expected results need to be communicated at all the levels of the organization (Stelzer and Melis, 1999[82]   “Therefore, successful SPI program is one, in which SPI goals and policies have been clearly aligned with business goals, identifying the nature and direction of any SPI actions” (Dyba, 2005)[82]    The result of this combined effort towards the “common objectives”, ”to focus energy” and “to motivate people”  These factors citied 33% of the ISO cases 127 and 87% of the CMM cases.  Mangers who don’t set the realistic objectives or too much goals merely dishearten their subordinate staff. The organizations that while taking the process initiatives do not defined relevant objectives and goals basically, in the long term, end up on fuzzy goals. This approach neither help fully to motivate the staffs nor for successful improvement efforts  (Stelzer and Melis, 1999)[ 96] [82]    
5.1.3.2  Project category factors
5.1.3.2.1 F5: Staff involvement 
Staff involvement is among a key factor which helps to facilitate successful SPI program  This is agreed by many researchers such as (Niazi et al, 2006 ,[82]    Dorenbos and Combelles, 2003[90], [82]   These authors explore different aspects of staff involvement CSF in their studies and provide some in-depth knowledge and idea about how the staff participation and involvement leads us to successful implementation of SPI and in the evaluation process, and assessment of its initiative in change management.  
The Dyba (2005)[82]    defined staff involvement factor as “the extent to which employees use their knowledge and experience to decide, act, and take responsibility for SPI and this is positively associated with SPI success”. 
So, in the light of above researchers definitions it can be said that staff involvement is the amount of interest taken by the employees in the adoption of responsibility to participate in SPI initiative where they use their skills, experience and knowledge for successful implementation of SPI program and initiative.
5.1.3.2.2 F6: Experience Staff:
The number of researchers on the basis of their collected sample studies data, emphasis on how a software process skills, experience and staff expertise can play a key role in successful implementation of SPI program.  In experienced staffs, practitioners consider hurdle in SPI and emphasize to equip them with the necessary training that transfers the right SPI skills that enable them to mastery it in use. This training should make awareness in the in-experienced staff about the critical technologies that is required for SPI initiatives. The main goal for this training should be to transfer the knowledge of SPI inter-related activities with business objective and organization goals  (Niazi, 2009) [97], [82]    Nonetheless, some of the authors defined lack of experienced staff as a barrier in SPI.
5.1.3.2.3 F7: Return On Investment (ROI)
The organization should have an Achieving expected payoff (Return On Investment) Calculating return on investment, (ROT), which is based on comparing the costs of implementation to the benefits that you will receive by the integration of an ERP software package into your business structure  While the direct costs of the software itself, installation, training, and support can generally be quantified by the vendor, there are other indirect costs that will be generated within the business, such as reduced productivity during the integration process and training sessions. 

Langenwalter claims that the percentage of Software implementations that can be classified as ‘‘failures’’ ranges from 30% to 60% or higher [Error: Reference source not found98]. On this research Ptak defines failure as an implementation that does not achieve the ROI identified in the project approval phase and finds that failure rates are in the range of 60–90%. 
5.1.3.2.3 F8: SPI awareness and Implementation methodology 
According to Niazi (2009)[8297],[97] to fully understand the benefits of SPI, there is need to sponsor the SPI awareness program i.e. “ROI and impact”, practitioner belief that SPI implementation is basically taking on board the organization best practices  Consequently, it is essential to address the SPI awareness activities and transfer the share knowledge among different groups who are actively engaged in process activities (Niazi, 2009) )[8297],[97] SPI awareness is really important because SPI is an expensive and long-term approach and its concrete benefits visible in terms of results take much longer time to appear  Therefore, it is crucial to provide adequate awareness of SPI in organization in order to get continuous support from both management and the practitioner for successful continuation of SPI initiative  (Niazi et al, 2006) )[8297],[97].
Stelzer and Melis (1999) [96], )[82] stressed on how to successfully implement SPI methodology procedure that should be adopted. The authors stated that different teams and departments have certain strengths and weakness, which need to take the improvement initiative. This tailoring increase the well-matched improvement plan that is truly reflected on the basis of existing organization true needs. This aids to implement a realistic organization process improvement infrastructure  The lacks of project management in improvement process move towards adhoc and, inefficient chaotic practices and need to avoid this bottleneck situation  (Stelzer and Melis, 1999).[96][82]
SPI implementation should be well planned, managed and controlled. For successful process initiative, it should be run like software development projects, that they use project management standards, set objectives, monitoring mechanism, milestones, and measurement for success. In addition, there is need to establish return on investment (ROI) or cost benefit analysis.  

5.1.3.3 Organization category factors
5.1.3.3.1 F9: Organizational Culture 
Culture difference exists between different countries that are not necessarily suited or accepted by people living in other countries.  Moreover, specific cultures adopt, without considerations of that organization, original values from these countries customs and practice. Organizations will continuously face problems in implementation and deploying of best practices, majority of these problems belong to “people, group, team and community culture and behavior” (Dorrenbos and [82] All these needs to be considered when SPI improvement initiative steps should be taken. So that any suggestion, implementation and deployment activities do not adopt any such change of management methods which oppose the culture. The failures in consideration of culture impact while designing the change management program, leads towards process adoption by the groups or people in unproductive manner or, totally neglect the adoption  According to[82]Neglecting to anchor change in corporate culture is main reasons for failure in process improvement related change efforts. 

5.1.3.3.2 F10: Organizational Politics
 Several researchers' consider politics as barrier in SPI implementation because SPI aim is to bring a change in the organization and people do often resist the change. This is because SPI initiatives goals may suit to one group’s goals but collide with other groups or teams goals  The reason is that the organization comprises of different groups and they have different priorities and goals that do not match with the SPI initiatives goals and this leads to oppositions from those people  ”There are many factors that can trigger organization politics, such as reallocation of the resources, promotions opportunities, low trust, times pressure, and role ambiguity ” (Niazi, 2009) [8297] 
5.1.3.3.3  F11: Communication and Collaboration
 Communication and Collaboration are considered to be amongst the most influential factors, which affect the SPI process. [8297] defined these factors as: “Degree to which communication efforts precede and accompany the improvement program (communication) and degree to which staff members from different teams and departments cooperate (collaboration)” 

Business executives and Software has required effective communication in order to understand the communication mechanism between these two groups. Researchers and practitioner should need to significantly understand the “share domain knowledge” and “best practices” for effective communication between these groups. In order to establish effective communication between these two groups firstly, each group must understand the importance and the role of other group in their problem domain and also respects the experienced and expertise of other group  Secondly, the each group should have detailed information about other groups e.g.  (The roles and the responsibilities of the group members) and it also need to be clear how problems need to be communicated effectively to other groups [8297]
5.1.3.3.3  F12: Wide Commitment 
The IS Project should be enterprise wide i.e. it should integrate information and information based processes within and across all functional areas in an organization. It’s imperative to get support from all functional segments of the organization. (Every person and department is responsible for the overall system .Key users from different departments are ensured to commit to the project implementation without being called back to their prior functional job position frequently [9]. 
5.1.3.3.5 F13: Resistance:
The organization should have an IS Projects usually introduce large-scale changes that can cause resistance, which may in turn decrease the expected benefits of the system  Previous IS research has made substantial progress in understanding how resistance affect IS.

5.1.3.3. System category factors
5.1.3.3.1 F13: Allocation of Resources: 
the management commitment can be determined by the degree to which management seem ready to make available the resources for SPI and it is considered one of the strong indicator of management commitment towards SPI [82] (Senior management sponsorship is essential for the assessment and recommendations, that means, higher management must show their strong commitments in developing, financing and implementing the actions plan  This again means that senior management should have a broader picture of the resources and time required in order to conduct the SPI initiatives.  


5.1.3.3.2. F15 : Training and mentoring 
The organization should have a clear educational strategy concerning the SPI implementation that involves routines for early hands on training for the employees [8], [75][91]
5.1.3.3.3.F16 : Sustainability
What requirements/safeguards are there to ensure that an M&E system will be made sustainable (i.e.  allowed to continue over time)?
5.1.3.3.3. F17: Ease to use 	
The organization should have a strategy to select the IS system to be ease of use  Ease of to use is the degree to which a particular system is perceived to be relatively free from physical and mental effort   Previous is Research found that ease of use has an impact on the intensions to use IS systems .
5.1.3.3.5 F18: Minimal customization 
Taming the package causes extra additional customization costs, inability to benefit from vendor software maintenance and upgrades, and inability to benefit from the standard best practices encapsulated in the package [9].
5.2  Best Practice activities for avoiding IS development projects failures.
 The following list has been inspired by actual mistakes encountered in real-world systems projects [6].
5.2.1 Coding with a specific methodology:
Using a structured systems development methodology is one of the critical success factors in a systems development project  For this reason, some years ago, Peter Koletzke came up with the CASE Application Development Method (CADM) as a successor to the traditional CASE method pioneered by Richard Barker  CADM is based upon a few core concepts  First, an engineering manufacturing approach to software development was used  This approach pays careful attention to quality control points, identifying where in the Software Development Life Cycle (SDLC) these points occur and what types of checks are necessary to ensure that each phase is successfully completed before the project is ready to move into the next phase  Explicit quality control points must be included in any successful project  For example, the formal model defence after the data model is complete is an often skipped, and later regretted, step  Conversely, within CADM, quality control points were eliminated where unnecessary due to implicit controls  For example, performing data migration helps to validate many aspects of the physical database design 
A second major philosophical component of CADM is an audit trail for system requirements we included the ability to track a requirement throughout the SDLC from its initial gathering during analysis to its impact on user acceptance testing at the end of the process.  
5.2.2 Avoid creating a project plan from a drop-dead system completion date:
Working backwards from a fixed project completion date is a sure way to guarantee project failure and yet, unfortunately, this is an all too common practice in the IT community  Managers may make a decision about when a new or re-engineered system would be useful to have in production without the necessary technical knowledge to determine whether or not it is possible to accomplish successfully in the given time period  No project ever went completely smoothly from Strategy to Implementation  There are many places in the SDLC where schedules can go awry:
    • Failure to perform careful analysis resulting in critical new requirements being uncovered late in the development process
    • Failure to take data migration into account
    • Failure to enlist approval at all levels of the user community
We must set a realistic timetable for the completion of a systems project and expect that some deadlines will slip as unexpected setbacks inevitably arise Forcing a deadline to drive the schedule will cause corners to be cut, greatly increasing the risk of the project. Even if the system gets built, it is usually of very poor quality as application after application is built just to get them completed 
5.2.3 Building tables with a data model  
The data model is the core of the system without a carefully constructed data model; any system is doomed to failure, or at least to not meeting the users’ needs and requirements. 
We always surprised when we hire a developer with several years of experience who has never seen a data model Even if they have worked with data models, they have usually never seen anyone carefully audit one.  
We equally astounded when we go into a large financial institution and find that there is no data model for a system that has several hundred tables When we audit such a system, we find that there are numerous critical flaws in the system that allows bad data to be entered In such systems, data migration to a new system can take many months because so much of the legacy data has to be cleaned up. 
The worst situation we have ever seen had each developer building whatever tables and applications they needed to support those tables the technical lead came in later to try to make the disparate pieces work together Needless to say, the system was never completed. 
Data models should be directly under the control of the technical lead each subsystem should be integrated into the whole prior to development.  
Models should be designed and audited, and re-audited, and re-audited until no more errors are uncovered  The audits should first be done by the technical lead   Then an outside auditor should always be brought in for an additional audit.  
5.2.3 Importance of hiring experienced technical lead:
The person in the role of project Technical Lead must be experienced He/she should have completed other successful similar projects The role of technical lead is like that of a skilled heart surgeon We would not expect a family doctor to perform brain surgery or administer anaesthesia.  It is critical for the person in charge of the technical aspects of the project to have experience with the type of system being built  
Of course, such a resource is quite expensive - not nearly as expensive as a failed project, but still expensive we have to admit that we stiffed by managers that will gladly put 5-10 more $700/day consultants on a project but will refuse to accept that a good project lead will cost several times that amount   So, they have a large team generate a bad system for a great hourly rate.  
My favourite example was a large organization with 80 developers that were unable to bring up a system In fact, according to the project manager, little progress was being made on the system However, the same organization was unwilling to bring in a senior technical lead that could have put a solid development environment in place, and would have made all 80 developers productive.  
5.2.5 Faster coding not always by hiring many developers:
More is not always better  This is especially true in the case of development teams  A project with a few skilled developers, carefully supervised by the appropriate technical lead has a much greater chance of success than one where hordes of developers are cranking out mountains of code each day. 
5.2.6 Plan ahead for data migration:
The data migration phase of a project can consume up to 30% of the total project resources typically, the amount of attention paid to it in existing methodologies is very small. The cost of data migration tends to go unforeseen, until far too late in the project schedule. The most common flaw in data migration planning is that too few resources are invested in it. Many project schedules will list data migration as a single task in a development effort. However, by project’s end it will be evident that data migration was indeed an entirely separate project, highly dependent upon several of the deliverables of the development project. 
Most applications are not brand new, but are enhancements or rewrites of existing applications.  Data migration from the existing data sources is usually a major project by itself  This is not a project for the junior programmers. It is as important as the new application. Usually the new application has better business rules and expects higher quality data  Improving the quality of data is a complex subject outside the scope of this article. 
For these reasons, it is very important to plan ahead for data migration on any project   In particular, implementing generic data structures, which are desirable for increasing the lifetime of the system, can create significantly more complex migration issues than implementing traditional system designs.   
After witnessing a number of failed projects and learning from bitter experience, waiting three months before going production to assign one person to handle data migration will inevitably cause system failure.
5.2.7 Develop A Test Plan
Putting a system into production without adequate testing is like diving into a swimming pool without checking to see if there is water in it No system was ever created completely bug-free  The time spent to thoroughly test any system before placing it into production can save much more time in the long run. 
In the Test phase, we should develop a test plan that should describe not only the tests to be run but also how test failures or variances will be handled Especially for a large system, it is not practicable to wait until the end of the Build phase to start developing this test plan There must be some overlap. As each module is tuned and passes unit-level testing, it is stable enough so that formal tests can be planned. 
It is not necessarily true that every test failure or variance leads to modifications of the system prior to production Within the Test phase, it will be necessary to re-audit the design process, perform system- and user-level tests, audit the quality of the documentation, test the internal controls and backup and recovery procedures, and in all ways ascertain the fitness of the system to move into a production environment. 
The lead QA person needs to develop a test plan  Users need to be involved to identify the test cases, and they can write the test scripts and expected outcomes  There are two components to a test plan: the approach and the design  The approach includes the testing techniques, testing tools, roles and responsibilities, method of error detection and logging, change control process, re-testing process, and testing environment  The design part of the test plan includes the test objectives, cases, and scripts  The test plan is the framework in which the different levels or types of testing are performed, i.e.  System testing and user acceptance testing  We should develop a test plan for each type of testing.
In one system, the company insisted on doing testing by putting the system into production and letting the users find the bugs when the bug filled system was put into production, the users were furious. 
5.2.8 Avoiding Changing the system to support critical new requirements 
It is important to prevent the onset of “scope creep” on a project  There will always be new requirements to support, slightly better ways of modifying our data model and better ways to design an application  Unless we set a formal rule that prevents the majority of well meaning suggestions about improvements from “creeping” into the system, the system will never be completed  Once we freeze a deliverable at any phase in the CADM process, it should not be altered  The only exception to this rule is when a mistake in the design of the system is uncovered that will prevent the system from going into production  If we do not enforce hard and fast rules about what changes are acceptable and when changes can be made, the system can be delayed for weeks, months or never go into production at all.  
Who decides what will get done and when? Throughout the system life cycle, there should be a management team made up of the project leaders, a representative of upper-level management, one or more functional area users and, perhaps, a DBA (if no one else on the team has DBA experience)  This small management team controls the CADM process and either performs all of the review tasks or delegates them to appropriate individuals  The process of review and quality assurance is critical to the success of the CADM process and should be handled by the best talent available  Of course, a key principle is that no one can perform a QA review of his or her own work. 
As we progress through each phase of the project, we have more and more to worry about with regard to changes to earlier phases  In the Analysis phase, we only have to worry about changes to the Strategy phase, whereas in the Design phase, we have to worry about changes to system requirements and changes in scope from the Strategy phase  At each phase, we will identify all of the major deliverables from the earlier phases and discuss the impact of changes to any of those deliverables  Ideally, this information would be displayed in a giant matrix with all of the deliverables lined up on one axis and all of the phases on the other in order to clearly see the impact of changing each deliverable for each phase.  
Systems are not like works of art that, once completed, are hung in a gallery  They are inherently evolving structures that will inevitably need enhancements and subsequent versions.  Every requirement does not have to be included in Version 1  It is much better to have a system that is adequate and running than a perfect system that is never delivered. 
5.2.9 Peer reviews - It is important to review other people's work Experience has shown that problems are eliminated earlier this way and reviews are as effective as or even more effective than testing any artifact from the development process is reviewed, including plans, requirements, architecture, design, code, and test cases. 
5.2.10 Performance testing - Testing is usually the last resort to catch application defects  It is labor intensive and usually only catches coding defects  Architecture and design defects may be missed  One method to catch some architectural defects is to simulate load testing on the application before it is deployed and to deal with performance issues before they become problems. 
5.2.11 Configuration management - Configuration management involves knowing the state of all artifacts that make up project, managing the state of those artifacts, and releasing distinct versions of a system  There is more to configuration management than just source control systems, such as Rational Clear Case  There are also best practices and patterns  for configuration management. 
5.2.12 Quality and defects management - It is important to establish quality priorities and release criteria for the project so that a plan is constructed to help the team achieve quality software  As the project is coded and tested, the defect arrival and fix rate can help measure the maturity of the code  It is important that a defect tracking system is used that is linked to the source control management system  For example, projects using Rational Clear Case may also use Rational Clear Quest.  By using defect tracking, it is possible to gauge when a project is ready to release. 
5.2.13 System operations and support - Without the operations department, we cannot deploy and support a new application the support area is a vital factor to respond and resolve user problems. To ease the flow of problems, the support problem database is hooked into the application defect tracking system. 
5.2.13 Project management - Project management is key to a successful project many of the other best practice areas related to project management and a good project manager is already aware of the existence of these best practices. 
5.2.15 Measuring success - we can measure the development process against an industry standard known as the Capability Maturity Model (CMM) from the Software Engineering Institute at Carnegie Mellon University  Most projects are at level 1 (initial)  If we implement the best practices described above and the guidelines in the companion article, Guide to Running Software Development Projects, then we could be well on the way to achieving a higher maturity level and a successful project[7]
To avoid IS project failure at best Practice activity phase CMMI (Capability Maturity Model Integration) is a set of rules and recommendations which should lead to improvements within the organization It puts best practices used in software development and service management.  



5.3 The Role Governance and Influences on success of ERP System Implementation:
One of the interesting features of the literature on risks and critical success factors for ERP system  implementation is the increasing emphasis over the last few years [76](especially during the same period when ERP systems implementations became more widespread) on top management support and the existence of a project champion[Error: Reference source not found37],[99],[1000] Indeed some of the earlier seminal project management literature did not even mention risks associated with the absence of either of these business-focused influences on success  However, in more recent studies, lack of top management support or commitment is the risk which has the greatest impact on project implementation success and overshadowed all other documented risks [100]. 
    • A lack of leadership and commitment from top management was cited as a major reason for failure by 73% of respondents in a recent survey [8] 
    • The importance given to both top management support and executive/project champion is a clear indication that implementation of enterprise .wide systems are very different from normal software development projects – even large ones  
    • ERP projects in Egypt are actually business transformation projects, rather than straightforward large software development projects [101] and their implementation will significantly change work processes and organizational structures, together with the daily activities of the majority of staff  Because of the business transformational nature of ERP systems, their failure in Egypt is more likely to be due organizational, social or even political reasons that than to technical or software based causes.  
    • Top management support is also important in each phase of development, from planning through project implementation and enhancement [10776]. A clear explanation of exactly what would constitute top management support is absent in the literature. Even the constituents of top management and their roles, with respect to a system implementation, are not well defined  The researchers suggest that governance is a crucial issue here. 
    • Governance is about providing strategic direction, planning and controlling projects and people, and is delegated to project leaders (project governance), those responsible for IT (IT governance) and senior executives (organizational governance) by the Board of Directors. 
    • Using the lens of governance, existing critical success factors, risks and project management issues have been allocated to the three levels of governance (organizational, IT and project), in order to provide a framework for examining the role of governance in ERP system implementations In Egypt [76].
5.3.1 Organizational Governance:
 There are two key groups who constitute “top management” in organizations: 
    i. The Board of Directors 
    ii. Executive Management 
5.3.1.1 The Board of Directors:
  of an organization has a governance role which is described in various ways in the literature: from the very narrow perspective as “the way to ensure that managers follow the interests of shareholders”  to more general descriptions such as “the way in which companies are directed and controlled, and encompasses issues such as the responsibilities of directors, and the relationship between shareholder, directors and auditors” [76]. and as “the relationship among various participants in determining the direction and performance of corporations” 
Governance for the Board today includes responsibility for business continuity, developing a shared sense of values within the organization, safeguarding corporate knowledge and management of human capital [76]. The role of corporate governance in ERP system implementation can be more easily understood given the business transformational nature of ERP systems and the consequent effects on everyday working practices as well as the accuracy and availability of corporate information. 
5.3.1.2 Executive Management
 is employed by the Board to carry out the business of the organization.  The Board delegates responsibility for organizational administration to the management team (Chief Executive Officer (CEO) and executives) who are responsible for achieving organizational targets, managing business activity and responding to various stakeholder needs but retains ultimate responsibility for administration of the organization and management of its resources [76]. 
From the brief outline above it is clear that the responsibility for ERP project advocacy, provision of adequate resources [76].control through project compliance and regulation [37] and ensuring oversight of human capital through appropriate change management are joint responsibilities of both the Board of Directors and the executive team. 
 The clear delineation of responsibilities of each group, together with management of the grey area which can sometimes occur between corporate governance and executive management [76].  will ensure a cohesive “top management” team to provide fully integrated support to the ERP system implementation project. 
5.3.1.3 Influences on ERP success (CSFs, risks and PM issues)
    • Top Management Support[9999] 
    • Commitment to change & organization-wide change management strategy (including user participation)  [76].
    • Ensuring good organizational fit with ERP [76].
    • Project Champion Development of management control structure [76].
    • Set in place focused project reporting to Chief Executive Officer (CEO) 
    • Re-design of business processes for enterprise wide design and vanilla implementation [76].
    • Assign clear project ownership and lines of authority for decision making, Making reasonable organizational commitments 
    • Organizational Governance Empowered decision makers [76].
5.3.2 IT Governance: 
IT governance describes how those in authority in an organization will consider and employ Information Technology (particularly in relation to its use in monitoring, control and direction) in the furthering of the goals of the organization [76].
IT governance is the responsibility of the Board and executive management and “is an integral part of enterprise governance: it consists of the leadership and organizational structures and processes that ensure that the organization’s IT sustains and extends the organization’s strategies and objectives” [102]. 
IT governance is not an isolated activity but is an integral part of organizational governance because it provides direction, through the implementation of an IT strategy, “for the purpose of achieving competitive advantage for the organization”  In addition the purpose of IT governance is to ensure IT alignment with organizational goals, that IT ensures competitive advantage, that resources are used responsibly and that IT-related risks are properly managed [76].
5.3.2.1 IT Governance role
  Individuals and committees who take responsibility for IT governance will also have an important role in any ERP system implementation through the following activities: 
    i. Assessing IS infrastructure risk and 
    ii. Ensuring adequate infrastructure [76].
    iii. Providing the project with adequate visibility  
    iv. Building in transparency  
    v. Overseeing IT infrastructure partner relationship management  
    vi. Providing a forum to which to escalate changes to project costs 
    vii. Timelines etc.
    viii. Establishing a clear process for exception handling  
    ix. Providing or ensuring the existence of a project champion to share a global view of the project with the project team and project benefits with the business stakeholders [Error: Reference source not found103],[Error: Reference source not found104]. 
5.3.2.2 Influences on ERP success (CSFs, risks and PM issues)
    • Adequate Infrastructure. 
    • First point of escalation for variances to project cost and timescale. 
    • Assign ownership and accountability for technical risks. 
    • Manage partner relationships and set the standards for service and partner qualifications [76]. 
    • IT Governance Ensure adequate visibility of the project
5.3.3 Project Governance: 
Project risks and critical success factors for implementation of large-scale software projects have been well documented and are also very relevant to of implementation of ERP systems  
5.3.3.1 Project Governance components:
Project governance includes [: 
    i. Definition of scope and goals [76]. 
    ii. Sound project management. 
    iii. Project methodology [100100]. 
    iv. Experienced project manager, small milestones [104], 
    v. Realistic schedule and well defined project objectives [76]. 
    vi. Attention to the stages of project management 
    vii. Clear roles and responsibilities, integration and testing [76]
    viii. Application domain experience  
5.3.3.2 Influences on ERP success (CSFs, risks and PM issues)
    • Employ sound project management techniques and controls [Error: Reference source not found10].  
    • Small scope and scale [Error: Reference source not found76] 
    • Request realistic and adequate budget [99]. 
    • Adhere to standardized specifications [105]. 
    • Project Governance Balanced team and best people full time [100100], [76], [106106], [Error: Reference source not found104]. 

5.3 The proposed Framework for management of ERP selection: 
5.3.1 Introduction:
Empirical research has shown that selecting an inappropriate system is a major reason for ERP implementation failures Review of literature has identified a need for methodologies that assist organizations in the ERP system and vendor selection process [107107] .The review of the state-of-the-art on ERP selection and evaluation revealed the following gaps [107107]:
    • There is a need for more intuitive, simple and cost-effective methods and methodologies that do not require expert skills and large amounts of time and resources 
    • There is a lack of methodologies that simultaneously focus on vendor evaluation and selection in addition to the evaluation of the ERP system itself
    • Current methods and methodologies for ERP selection largely fail to:
    • Capture aspects of business processes and organizational strategy
    • Emphasize the importance of strategic fit and functional integration
5.3.2   The proposed framework for management of ERP selection
Based on these findings presented by Ottar Bakås, Anita Romsdal and Erlend Alfnes [107107]  They developed a methodology that has a broader, more holistic focus than the existing methodologies for ERP selection - emphasizing the importance of linking the acquisition process with the organization's strategies, processes and infrastructure throughout the evaluation process  Also, the methodology incorporates evaluation and selection of both an ERP system and an ERP vendor  Their methodology describes four steps towards selection of an ERP system and vendor:
    • Preparation
    • Analysis
    • Evaluation
    • Selection
Nevertheless this framework does not include cultural issues, thus ERP selection becomes more challenging in Egyptian context because of the national and organizational cultures that have certain value and belief system, and so certain management styles, which all differ from the Western business culture which is embedded in the predefined standard business processes of foreign ERP packages. Thus, Egyptian organizational culture is outlined as an important determinant of ERP selection [9].  
5.3.3 Cultural Issues:
Cultural Issues play very important role in ERP selection, Culture is defined as the set of shared beliefs within a country where a person lives. It imposes rules, values and practices at the organizational and individual levels [9].  
At the organizational level, culture has definite influence on organizational structure, behaviour and management style. At the individual level, people bring to the workplace what can be regarded as cultural baggage.
Developing countries, when implementing western technologies management processes and implementation, find many difficulties due to the differences in cultures  This is commonly known as Information Technology Transfer (ITT) problems[9] In the traditional software, the development approach promotes building systems from scratch whereas in developed countries ERP encapsulates reusable best business practices.  
For identification of the Critical Success Factors (CSFs) for ERP selection a certain review to the related literature was performed and when reviewing potential software suppliers, many companies tend to focus only on the potential product’s functionality and cost. Although these elements are important to the selection process, this methodology neglects other areas of significant importance. A supplier’s ability to deliver product services goes well beyond price and feature options.  
Search, through an extensive literary review and many other interviews with some people including IT managers having previous experience in managing ERP selection and with a faculty member with a good background in this subject then a number of factors (12) were identified [6666] to assist organizations in the ERP system and vendor selection process in Egypt. 
Given the state of our global economy, researchers would imagine that prospective customers are allowing the supplier's longevity to play a more pertinent role in the list of selection criteria The ERP industry is so inundated with acquisitions, debt filled ERP providers are more the norm than the exception. This year more than any other, project teams should carefully review and focus on profitability, revenue per employee, and other indicators of financial solvency. 
5.5.4 Computer Culture:
The Computer culture as defined earlier is measured by the employees’ acceptance to technology and computer usage  That is the employees are interacting via intra-extranet and have an acceptance level of computer maturity and IT/IS commitment  Besides, within the Egyptian environment, Egyptians are increasingly using computers, internet and IS in their daily activities  It was found that ADSL subscribers have increased by almost 63% from Q1 in year 2008 to Q1 in year 2009 [74]. Furthermore, data analysis shows 22 2% of the organizations have implemented CRM, SCM, ERP, and KMS  Almost quarter of the number of organizations do have CRM, SCM, and ERP systems implemented and up and running.  
Their results[7474] show that 90% of international organizations under study obtained their competitive edge over their competitors in their respective fields of business stems from 'National factors', namely, 1) Information and Communications Technology (ICT) infrastructure, 2) Government regulatory, 3) Economic growth, and 3) Regional location of Egypt. 
Whereas the 'Manufacturing' factor is a common factor for all companies working in Egypt and has no significant role in the success of ERP selection in this context  Additionally, they examined the 'Organizational factors', to find some of them are of significance, namely, 1) Business size, 2) IT maturity, and 3) Computer culture  Whereas the Management commitment and Business Process Reengineering are common in all organizations and do not play a differential role in the ERP success implementation in Egypt [74].

5.5.5 Organizational Culture 
Egyptian organizational culture (i.e. the way that things are done in the organization) is analyzed the following points are identified to be associated with ERP selection and implementation success [9]  
5.5.6 A key selection criterion:
A key selection criterion includes 12 factors, figure [5.5]. Each factor is expressed by number of question with total 120 questions for all factors (explained in chapter 6 at section 6.2). According to the answers of these questions, if the organization has answers for at least 80% of the questions of each factor (total 96 governing questions), and then we can select the ERP system that fits the organization requirements as follows: 
    1) Corporate vision
    2) Business process
    3) Technology and System Architecture
    4) Database and network
    5) Hardware and software
    6) Customization effort implementation
    7) Services and support
    8) Product functionalities
    9) Product total owner cost
    10) Supplier longevity
    11) Computer Culture
    12) Organizational Culture 


Figure [5.5]:  The proposed framework for management of ERP selection

Our framework has the following advantages:
    • The framework is fairly intuitive, simple and cost-effective, and requires few specialist skills to plan and carry out the process from preparation to selection 
    • The framework addresses the evaluation and selection of ERP vendors as an integrated part of the process, and thereby helps the organization to avoid the risk of choosing an ERP system that does not have the required vendor support 
    • The fact that the framework aims to incorporate the dynamic complexity of the decision problem   through its iterative and flexible nature supports our argument that the methodology provides a perspective on the ERP selection process 
    • By continuously focusing on capturing the interrelationship of how the different components of the Strategic Alignment Model influence each other, the process model is able to capture the dynamics of the entire organizational system – thus achieving the required strategic fit and functional integration 
    • The framework are generic enough and have a dynamic and flexible nature, which make them useful for a wide range of industries and organizations of practically all sizes, while also being applicable to both business and technology driven ERP investments 
    • The proposed framework represents a useful tool for organizations with regards to the evaluation and selection of ERP systems and vendors 
    • The framework was successfully applied in 5 companies, which is now in the final stages of implementing the selected system 


5.6 The proposed Framework for Management of Successful ERP Implementation. 
5.6.1: Introduction:
For identification of the Critical Success Factors (CSFs) for ERP implementation a certain review to the related literature was performed  Some of the previous studies have also done this review before (e.g. , Magnusson, J , Nilsson, A &  Carlsson, F  on Forecasting ERP Implementation Success –Towards A Grounded  Framework [95]  Based on this research, a number of factors (16) were identified through an extensive literary review and many other interviews with some people including IT managers having previous experience in managing ERP implementation projects and with a faculty member with a good background in this subject 
The factors were then discussed and five factors were added namely:
1-Return on Investment (ROT)   F9 
2-Wide Commitment   F13
3-Resistance   F15 
3-Ease to use    F20 
5- Minimal customization F21
Along with a division of the known 21 factors into 3 categories (Top management, Project, Organization and System) our main concern while performing this study was to collect the factors that could be more beneficial to a developing country setting like Egypt  The final list included 21 factors, discussed later.  
This highlights the link applying the factors and a satisfactory outcome of the project, and also for the framework to be as usable as possible; the ratio of total level of factor fulfilment to how many of the final 21 factors were fulfilled is the base of evaluation figure [5.6].  
For instance, if the responding organization fulfils 67% percent of each factor (based on 6 questions per factor (explained in chapter 6 at section 6.3), 4 questions (governing questions)  must be replied by yes as a positive reply Except factor 15 and factor 18  (resistance and user ) must be replied by no to be a positive reply) the result will be 67% That is, the probability of success of this project is 67%, and so a text describing what the organization’s strengths and weaknesses will be described according to the different factors, along with a quick-list of possible future managerial actions to strengthen the identified weaknesses. 
Data collection is done using a survey and interviews with major players of the large companies working in the Egyptian market. Findings show that certain factors have more significance in these organizations and their influences vary on the ERP successful implementation. 


























Figure [5.6]: The proposed Framework for Management of Successful ERP Implementation.


A description of the 21 factors with the corresponding literary divided to pervious four categories support can be found in the following section:
5.6.2 Top Management Category factors 
5.6.2.1  F1 : Strategy and Careful package selection:
The organization should have a clear, communicated business strategy and an aligned IS projects strategy. Most ERP software vendors make assumptions about management philosophy and business practices  Thus, buying an enterprise application means much more than purchasing software-it means buying into the software's vendor's view of best practices for many of the company's processes. For this, the company must have a detailed requirements specification before ERP package selection [101, [8].
Factor F1: Egyptian Top Management strategy has a positive impact on ERP implementation success 
5.6.2.2 F2: Leadership
The organization should have a strong and committed leadership that has the ability to motivate the employees to change [91][ 95]. 
Factor F2: Egyptian Top Management leadership has a positive impact on ERP implementation success 
5.6.2.3 F3: Support
The organization should have a top management and steering committee of the ERP Implementation project that is highly committed to the implementation and is comprised of individuals with differentiated views of the  implementation [7575], [9191], [107]Error: Reference source not found, [8] . 
Factor F3: Egyptian Top management support has a positive impact on ERP implementation success 
5.6.2.3 F3: Competence and BPR 
The organization should have individuals with a broad competence of ERP, BPR or other IT-related projects involved in both the steering committee and the entire project  BPR is the fundamental rethinking and radical redesign of business processes to achieve dramatic improvements in critical, contemporary measures of performance, such as cost, quality, service and speed" ERP systems are built on best practices that are followed in the industry  Implementing an ERP system involves reengineering the existing business processes to align the best business standards  [94], [Error: Reference source not found108],[ 95]. 
Factor F3: Egyptian Competitive pressure to adopt an ERP system has a positive impact on ERP implementation success 
5.6.3 Project Category factors 
5.6.3.1 F5: Team 
The organization should have an Implementation project team that is comprised of individuals representing different views and perceptions of the enterprise and the enterprise system [75], [8].
Factor F5: Egyptian Project team for the ERP system has a negative impact on ERP implementation success 

5.6.3.2 F6: Management
The organization should have an excellent project management for the implementation project and ensure that the management does not present only a business- or technical perspective of the implementation [91], [107107], [8].
Factor F6: Egyptian Effective project management has a positive impact on ERP implementation success  
5.6.3.3 F7: Plan 
The organization should have a previously defined and well communicated project methodology that envelops both documentation procedures and clear performance measurements with routines for monitoring progress [109].
Factor F7: Egyptian Project planning to best of practices of an ERP system has a positive impact on ERP implementation success 
5.6.3.3 F8: External
The organization should have an ability to manage the influence of external consultants in the implementation project and also be able to optimally transfer the knowledge from the consultants into the organization [9]
Factor F8: Egyptian External support and consultants has a positive impact on ERP implementation success  
5.6.3.5 F9: Return On Investment (ROI)
The organization should have an Achieving expected payoff (Return On Investment) Calculating return on investment, (ROT) , which is based on comparing the costs of implementation to the benefits that you will receive by the integration of an ERP software package into your business structure  While the direct costs of the software itself, installation, training, and support can generally be quantified by the vendor, there are other indirect costs that will be generated within the business, such as reduced productivity during the integration process and training sessions 
Langenwalter [95] claims that the percentage of ERP implementations that can be classified as ‘‘failures’’ ranges from 30% to 60% or higher [Error: Reference source not found110] Ptak defines failure as an implementation that does not achieve the ROI identified in the project approval phase and finds that failure rates are in the range of 60–90% 
F9: Egyptian organizational Return On Investment (ROT) has a negative impact on ERP implementation success 
5.6.3 Organization category factors
5.6.3.1 F10: Culture
The organization should have a business culture that highlights the importance of learning, knowledge, past experience and change, as well as a strategy for knowledge management.  
The following points are identified to be associated with ERP implementation success [111]
i  Reliance on information
ii  Design of the general structure
iii  Design of Lateral links
iv  Centralization of decisions
 This restricts the need for information exchange among managers  Thus, ERP is used to reinforce hierarchical (vertical) control instead of peer-to-peer (horizontal) communication and cross functional integration which is the distinguishing characteristic of ERP  
v  High Context communication: Egyptian employees have highly collective nature.  This predisposes culture against computer based communications because these media mutate the group effect  Workers in collectivistic nature favor high personal meetings and phone calls on IT communication technologies  [101],[9],[66] [110].
Factor F10:  Egyptian organizational culture has a negative impact on ERP implementation success 
5.6.3.2 F11: Change 
The organization should have a fundamental willingness and readiness for change as well as an explicit change management strategy  [74],[75],[91], [107],[8] . 
Factor F11:  Egyptian organizational change has a negative impact on ERP implementation success 
5.6.3.3 F12: Process
The organization should have a high level of process-maturity and explicit guidelines for process management [[74], [91].
Factor F12:  Egyptian organizational process has a positive impact on ERP implementation success 
5.6.3.3 F13: Communication  
The organization should have a detailed communication plan and strategy that ensures the successful communication of project plan and progress to all relevant stakeholders [74]  [75], [91]. 
Factor F13: Egyptian organizational communication has a positive impact on ERP implementation success 
5.6.3.5 F13: Wide Commitment 
The organization should have a  ERP systems are enterprise-wide IS that integrate information  and information based processes within and  across all functional areas in an organization, it’s imperative to get support from all functional segments of the organization (Every person  and department is responsible accountable  for the overall system and key users from  different departments are ensured to commit  to the project implementation without being  called back to their prior functional job position frequently [9]. 
F13: Egyptian Company wide support has a positive impact on ERP implementation success 
5.6.3.6 F15: Resistance 
The organization should have an ERP systems usually introduce large-scale changes that can cause resistance, which may in turn decrease the expected benefits of the system.  Previous IS research has made substantial progress in understanding how resistance affect IS success [95][112][113].
Factor F15: Egyptian Organizational resistance has a negative impact with ERP implementation success 

5.6.5  System Category factors:
5.6.5.1 F16: Technology 
The organization should have a clear understanding of the existing legacy environment and the technological aspects involved in the implementation of the ERP system[74]], [101], [Error: Reference source not found], [75], [91], [107], [8].  
Factor F16: Egyptian Organizational Technology has a positive impact with ERP Implementation success 

5.6.5.2 F17: Training 
The organization should have a clear educational strategy concerning the ERP implementation that involves routines for early hands on training for the employees   [74] ,[75], [91], [8].
Factor F17: Egyptian training has a positive impact on ERP implementation success 
5.6.5.3 F18: User
The organization should have an implementation process that strives for a high level of user acceptance early on through the use of constant presumptive end-user consultations [91], [109],[111] 
Factor F18: Egyptian Users' involvement has a positive impact on ERP implementation success 
5.6.5.3 F19: Empowerment
The organization should have a high level of implementation process transparency and a staff policy that empowers team members, end-users and management, [75], [107],  
Factor F19: Egyptian Empowerment has a positive impact on ERP implementation success  
5.6.5.5 F20: Ease to use 	
The organization should have a strategy to select the ERP system to be ease of use  Ease of to use is the degree to which a particular system is perceived to be relatively free from physical and mental effort   Previous is Research found that ease of use has an impact on the intensions to use ERP systems [114].  
Factor F20: Egyptian Perceptions on the ease of use of the ERP system has a positive impact with ERP implementation success 
5.6.5.6 F21: Minimal customization 
Is using the vendors' code as much as possible.  Taming the package causes extra additional customization costs, inability to benefit from vendor software maintenance and upgrades, and inability to benefit from the standard best practices encapsulated in the package [9] 
Factor F21: Egyptian system Minimal customization of the ERP system has a positive impact with ERP implementation success 
During the industrial feedback sessions, the first draft of the conceptual framework, and the need for the user to see some sort of structure in the 21 factors all were identified (see Figure [5.6]) This resulted in the reorganizing the factors into four categories that would enhance and facilitate the way to use this framework The reliability and validity of such categorization was then considered to be irrelevant because there was a need for the future user to a more sharp focus 
These four categories were identified as Top Management, Project, Organization and System, and they are presented together with the underlying factors in Figure [5.6]. As previously described the fulfilment of the factors is in the basic outline of the framework measured by 6 questions each, resulting in a total of 126 questions.  These questions are described over here and they constantly revised and tested. 
Based on the above arguments and the suggested research framework we can summarize the following factors are postulated:
F1: Egyptian Top Management strategy has a positive impact on ERP implementation success 
F2: Egyptian Top Management leadership has a positive impact on ERP implementation success 
F3: Egyptian Top management support has a positive impact on ERP implementation success 
F3: Egyptian Competitive pressure to adopt an ERP system has a positive impact on ERP implementation success 
F5: Egyptian Project team for the ERP system has a negative impact on ERP implementation success 
F6: Egyptian Effective project management has a positive impact on ERP implementation success  
F7: Egyptian Project planning to best of practices of an ERP system has a positive impact on ERP implementation success 
F8: Egyptian External support and consultants has a positive impact on ERP implementation success  
F9: Egyptian organizational Return on Investment (ROT) has a negative impact on ERP implementation success 
F10:  Egyptian organizational culture has a negative impact on ERP implementation success 
F11:  Egyptian organizational change has a negative impact on ERP implementation success
F12:  Egyptian organizational process has a positive impact on ERP implementation success 
F13: Egyptian organizational communication has a positive impact on ERP implementation success 
F13: Egyptian Company wide support has a positive impact on ERP implementation success 
F15: Egyptian Organizational resistance has a negative impact with ERP implementation success 
F16: Egyptian Organizational Technology has a positive impact with ERP implementation success 
F17: Egyptian Users' involvement has a positive impact on ERP implementation success 
F18: Egyptian training has a positive impact on ERP implementation success
F19: Egyptian Empowerment has a positive impact on ERP implementation success  
F20: Egyptian Perceptions on the ease of use of the ERP system has a positive impact with ERP implementation success 
F21: Egyptian system Minimal customization of the ERP system has a positive impact with ERP implementation success.















5.7 Best practices  toward achieving a successful ERP implementation 
Here, we will attempt to share through ERP consultant’s experience, observation and research various strategies that give the best chance of achieving a successful ERP implementation experience. 
5.7.1 Strategic factor:
Top management supports have shown that the ERP implementation was in general a top-down decision and the success of such an implementation depended on the alignment of the ERP adoption with strategic business goals. Very important point is to buying agood ERP systems with little customization.
5.7.2 Tactical factors:
Effective project management – in order to successfully accomplish the decision to implement an ERP system, the effective project management comes into play to plan, coordinate and control such an intricate project Re-engineering business processes – it is very important to consider the extent to which the company needs to re-engineer its current business processes in order to be compatible with the ERP software  Suitability of software and hardware – management must make a careful choice of an ERP package that best matches the legacy systems, e g  the hardware platform, databases and operating systems. 
5.7.3 Operational factors: 
Education and training – when the ERP system is up and running it is very important that the users be capable to use it, hence they should be aware of the ERP logic and concepts and should be familiar with the system’s features. User involvement – participating in the system development and implementation, the users go through a transition period that gives them time to better understand the project’s consequences.
5.7.4 General factors:
    • Apply the suggested ERP selection framework 
    • Manage organization’s expectations 
    • Mitigate risks
    • Employment Rehabilitation
    • Exploit the best business practices built into the ERP software 
    • Get the step by step phase wise implementation
    • Prepare proper blueprint of ERP implementation
    • SRS study - this will help us in selection of software
    • GAP analysis to map organization process and ERP software
    • Selection of experienced ERP vendor- new company or vendor may not be able to give us proper support and service even after successful implementation.  
5.7.5 Implementation Consideration factors:
Take a systematic approach It is also important to point out early on in any discussion about successful ERP implementation some important points and realities about ERP implementations in general this can be:
 1- The ready to use or perfect ERP system does not exist  
2- ERP implementations are different in every organization – it never be the same as previous 
3- There is no perfect ERP implementation. 
4- No ERP implementation is ever complete- It requires support and services, upgrades and updates, technological changes; etc Organization should be open for these situations and ready to adopt new challenges and opportunities. 
5.7.6 The key critical success factors for ERP evaluations and implementations:

According to ERP REPORT 2010 from Panorama Consulting Group LLC. Here are the key critical success factors have observed in best-in-class ERP evaluations and implementations:
1. Focus on business processes and requirements first. Too often, companies get tied up in the technical capabilities or platforms that a particular software system can support. More important is the identification of key business requirements and the proper alignment of software with business operations. Once these needs are defined, organizations can more effectively choose the software that fits their unique business needs and implement it in a way that does not require extensive customization.
2. Don’t rush the ERP evaluation process. Too many companies rush into ERP implementation without taking the time to clearly define their specific business requirements, thoroughly evaluate the various vendors, and plan for a successful project. Companies should spend at least three to four months on the selection and planning process. Organizations with over 1,000 employees or $500 million in annual revenues should plan to spend even more time on this step.
3. Focus on achieving a healthy ERP ROI, including post-implementation performance measurement. This requires more than just developing a high-level business case to solicit approval from upper management or a board of directors. It also entails establishing key performance measures, setting baselines and targets for those measures and tracking performance after the go-live. This is the only way to truly realize the benefit potential and success of ERP software.
4. Gain commitment from company executives. Any ERP project without support from its top management will fail. Support from a CIO or IT director alone is not enough. No matter how well executed a project may be, obstacles will arise during the implementation. The entire executive staff needs to be involved to resolve issues as they occur.
5. Develop a realistic project plan and implementation timeframe. It may seem obvious that companies don't know their true costs until they develop an implementation plan, but too many companies try to develop an estimate before a plan has been identified. This is a primary cause of significant cost and time overruns. In addition, many companies in our study failed to recognize that an implementation plan and budget should include non-vendor line items such as process and workflow definition, data migration, and customization of training materials to match unique business processes. Most software vendors do not include these and other activities in their time or cost estimates.
6. Commit strong project management and resources to the project. At the end of the day, a company implementing ERP owns the success or failure of the implementation. Whether positive or negative, these results must be managed accordingly by a team that includes a strong project manager and other “A-players” from several departments at the company.
7. Ensure adequate organizational change management and training. ERP systems bring enormous changes to employees. The system - no matter how advanced - will prove to be ineffective if the staff does not understand how to use it. A focus on training, organizational change management, job design and other employee support measures is crucial to any ERP project.
8. Limit software customization. While it may seem an easy choice to “pave the cowpaths” and install new software to run the business the way it has always been run, these customizations can quickly drive up prices and slow down benefits realization. Changes to software source code add to implementation cost, duration, and risk, so it is important to limit customization to areas that are “must-have” competitive advantages to your organization.
9. Carefully understand the advantages and disadvantages of multiple software delivery options. All ERP solutions have strengths, weaknesses, and tradeoffs. Organizations have a wide spectrum of options to choose from including SaaS solutions, on-premise solutions and even hybrid solutions that combine benefits of both. It is important to gain an independent and objective perspective on various options prior to making a final decision.
10. Leverage independent ERP expertise. As outlined in our research, ERP selection and implementation initiatives are challenging and require strong expertise. It is often less costly in the long-run to bring in external experts to ensure that your evaluation and implementation goes smoothly. The best-in-class companies leverage third-party expertise to help their internal teams select the right software, implement effectively, and manage organizational change.

5.7.7 Top 10 ERP Predictions for 2010
Based on the above data and the trends to analysis conducted in previous years, the study expect to see ten key trends emerge or continue in the ERP market in 2010:
1. Diligent focus on ERP software benefits realization and ROI. Long gone are the days of throwing money at a problem and hoping for the best. CIOs and COOs will continue to face pressure to prove that every dime of investment in ERP systems is justified and generates a solid return on investment. Look for more deliberate spending, more phased rollouts, as needed license purchases, and hesitancy to invest in more expensive advanced enterprise software modules.
2. Small business to get back into the ERP software market. The bright spot in any recovering economy is usually small business (SMBs). As the economy emerges from the recession, SMBs will look for small business software to automate their operations and scale for growth. In addition, large software vendors such as SAP and Oracle will continue to focus on the SMB market to reinvigorate their revenue growth in software license sales.
3. Increased adoption of software as a service (SaaS) at SMBs. While SMBs may lead the charge in their small business software investments, they will likely still have difficulty making the necessary investments. Given that tight credit markets will likely continue into the new decade, many SMBs will look to SaaS ERP software to help them minimize up front capital IT costs.
4. Lots of ERP SaaS talk, but not as much action at large organizations. Larger companies,on the other hand, are much less likely than their SMB counterparts to commit to SaaS options. As software vendors expand hybrid solutions combining the benefits of SaaS with the flexibility of traditional ERP (e.g., Oracle’s On Demand and SAP’s Business By Design), larger organizations will continue opting for non-SaaS options to reduce cost and risk while maximizing business benefits in the long-term. These companies will, however, be more inclined to leverage SaaS for some niche functions such as document management systems (DMS), human resource management software (HRM/HCM), product lifecycle management (PLM), and customer relationship management (CRM).
5. Increasing focus on organizational change management and ERP benefits realization. As demonstrated by the exponential growth in Panorama’s organizational change management practice, companies are allocating much of their ERP software investments to ensure effective implementation and buy-in. The need to more effectively manage organizational and business risk will likely result in a continuation of this trend in 2010.
6. With ERP software, it’s still a buyers’ market. According to our study, 56% of companies plan to replace or upgrade their enterprise software in 2010 (compared to 53% in 2009). Even in the most optimistic scenario, however, overall 2010 enterprise software spending will not return to pre-recession levels. This means ERP software buyers will remain in the driver’s seat, which will be reflected in aggressive software pricing and shared benefits implementation models.
7. Enterprise software risk management. As CIOs and executive teams must continue to prove the value of their investments, risk management will be the name of the game. Look for more ERP implementations to leverage organizational change management and independent oversight of software vendors to help mitigate business risk.
8. ERP software vendor consolidation. Vendor competition was fierce before the recession and is even more so now. Dozens of smaller vendors are starved for cash and unable to fuel R&D and other product innovations without infusions of capital. Add the facts that larger vendors have cash and that some have grown successfully via acquisition to date (e.g., Oracle and Infor), and continued vendor consolidation looks inevitable.
9. Focus on integration rather than major ERP package enhancements. Given corporateaversion to risk, companies are going to be less likely to bet on entirely new products or risky upgrades. As a result, vendors are more likely to invest in incremental product enhancements and tighter integration between modules rather than revolutionary changes to their software.
10. Niches, low-hanging fruit and business value. Look for companies to be very deliberate about how they invest in enterprise software, the risks they’re willing to take, and how they manage implementations. If executives aren’t convinced that their enterprise software investments will deliver measurable business value, they won’t invest in it. Areas that deliver immediate value will be priorities for the coming year.












Conclusion
As the findings of the 2010 ERP Report indicate, ERP software is a double-edged sword. On the one hand, it has the ability to transform organizations by making them more competitive, decreasing costs, and providing a foundation for growth. On the other hand, the selection and implementation process can be very difficult - or even disastrous - if not managed appropriately. The companies that enjoy successful implementations are those that adhere to the best practices outlined above, have a clear vision of their ERP objectives, and leverage internal and external ERP expertise to reduce business risk.
By providing the pervious framework our aim to offers independent tools for IS development software implementation, ERP software selection and implementation expertise and tools to reduce the total cost of ERP implementation and optimize measurable business benefits.











































6-1 Questioner that related to the proposed Framework for Management of Successful IS Development Software implementation: 
Hint: first four questions in each factor is governing questions.
6.1.1 Top Management category factors
 F1: Senior Management Commitment: 
Questions that measure factor F1:
    1. Does the organization have a project management for the implementation project? 
    2. Is this project management excellent? 
    3. Does the project management ensure that the management presents business and technical perspectives of the implementation? 
    4. Are there managing criteria and life cycle for a project that has a beginning and an end? 
    5. Are the project methodologies appropriate to the task and the organization? 
    6. Is there a well structured approach in complex projects to set up and approve the project? 
F2: Leadership:
Questions that measure factor F2:
    1. Does the organization have a strong and committed leadership?  
    2. Does the leadership have the ability to motivate the employees to change? 
    3. Does the leadership build support for goals and projects from people who do not report to him and over whom he has no authority? 
    4. Does the leadership have the ability to prepare a good project time plan? 
    5. Is the leadership capable of determining whether the candidate’s style is congruent with the culture of the organization? 
    6. Is the leadership capable of encouraging the team members to ask questions about various portions of the project? 
F3: Competence and BPR 
Questions that measure factor F3:
    1. Are the individuals in the organization broadly competent with IS related projects? 
    2. Does BPR achieve improvements in critical, contemporary measures of performance?  
    3. Does BPR achieve improvements in cost, quality, service and speed? 
    4. Is the IS software built on best practices that are followed in the industry? 
    5. Does the IS software involve the existing processes to align the best business standards? 
    6. Does the organization have the principles for business process reengineering? 
F3: SPI objectives and goals 
Questions that measure factor F3:
    1. Does the Organizational Strategy identify its Objectives, Initiatives and Goals?
    2. Does the organization have a clear, communicated business strategy?  
    3. Does the organization have an aligned IS strategy? 
    4. Does the leadership build support for goals and projects from people who do not report to him and over whom he has no authority? 
    5. Does the organization have the principles for business process reengineering? 
    6. Does the organization have an expected payoff (return on investment)?



6.1.2 Project category factors
F5: Staff involvement 
Questions that measure factor F5:
    1. Does the organization have a project management for the project implementation?
    2. Does the project management ensure that the management presents business and technical perspectives of the implementation? 
    3. Is there a well structured approach in complex projects to set up and approve the project? 
    4. Can the IS developers work with the implementation team to develop effective, successful customized training for the organization? 
    5. Are there differences in user acceptance of an IS Projects between users belonging to different departments? 
    6. Are there differences in user acceptance of an IS Projects between users in different positions? 
F6: Experience Staff:
Questions that measure factor F6:
    1. Are the individuals in the organization representing different views and perceptions of the enterprise and the enterprise system? 
    2. Can the organization's members enhance the software application, handle bottlenecks, tweak and improve the system? 
    3. Can the development team work with the implementation team to develop effective, successful customized training for the organization? 
    4. Is the support staff well qualified? 
    5. Are there criteria on which is the success of the support team measured? 
    6. Are there differences in user acceptance of an IS Projects between user project implementation experiences? 
F7: Return On Investment (ROI)
Questions that measure factor F7:
    1. Does the organization have an expected payoff (return on investment)? 
    2. Are the indirect costs of the software (as the reduced productivity during the integration process and training sessions) generated within the business? 
    3. Isn’t ROI too complicated for most learning and HR professionals? 
    4. Is it true that the ROI process does not reveal program weaknesses or strengths? 
    5. Is it possible to isolate the effects of any program from other factors?
    6. Does the ROI process result in recommendations for improvement? 
F8: SPI awareness and Implementation methodology 
Questions that measure factor F8:
    1. Does the organization have previously defined and well communicated project methodology? 
    2. Does the project methodology envelop documentation procedures? 
    3. Does the project methodology envelop clear performance measurements with routines for monitoring progress? 
    4. Does the organization determine which Partners or Collaborators will be needed? 
    5. Does the organization determine if any Specific Information or Advice will be needed? 
    6. Are there guidelines to define each one's duty? 


6.1.3 Organization category factors
F9: Organizational Culture 
Questions that measure factor F9:
    1. Does the organization have a business culture highlighting the importance of learning, knowledge, past experience and change? 
    2. Does the organization have a strategy for knowledge management?  
    3. Is the information perceived to be an organizational resource in the Egyptian organizations culture? 
    4. Do top managers rely on the implemented information system?
    5. Is cooperation across different functional areas in the Egyptian organization entailed by IS projects achieved? 
    6. Does the Egyptian organization have an effective design of lateral links? 
F10: Organizational Politics
Questions that measure factor F10:
    1. Does the organization have willingness and readiness for change? 
    2. Does the organization have an explicit change management strategy? 
    3. Does the organization have common pitfalls when implementing organizational change? 
    4. Does the organization have tools to minimize resistance from middle management in implementing this change? 
    5. Does the organization have buzzword should to implement? 
    6. Are there criteria for designing and innovating the overall work system?
F11: Communication and Collaboration
Questions that measure factor F11:
    1. Is there a detailed communication plan and strategy within the organization? 
    2. Does this plan (if present) ensure the successful communication of project plan and progress to all relevant stakeholders? 
    3. Is there Critical Strategic Communications Practices within the organization? 
    4. Are there criteria for assessing Current Performance and Capacity? 
    5. Are there criteria to Identify Possible Levels of Practice? 
    6. Are there criteria to Identify Areas for Improvement? 

F12: Wide Commitment 
Questions that measure factor F12:
    1. Does the organization have an IS Systems that integrates information and information based process within and across all functional areas in the organization? 
    2. Are the persons and departments responsible for the overall system? 
    3. Are the key users from different departments ensured to commit to the project implementation? 
    4. Are these departments frequently being called back to their prior functional job position? 
    5. Is there a prepared list of what is required from each of the functional areas of the company? 
    6. Is the global team well trained in the organization? 


F13: Resistance:
Questions that measure factor F13:
    1. Does the IS systems introduce large-scale changes that cause resistance? 
    2. Does this resistance decrease the expected benefits of the system? 
    3. Is there in the company any parochial self interest? 
    4. Is there in the company any misunderstanding and lack of trust? 
    5. Is there in the company low tolerance for change? 
    6. Does the company introduce a single method for assessment? 

6.1.4 System category  factors
F13: Allocation of Resources: 
Questions that measure factor F13:
    1. If the resources ($) to develop systems and hire & train skilled personnel available?
    2. Have roles & responsibilities been firmly established?
    3. Is there a capacity (data systems & infrastructure) to collect reliable data & report credible information?
    4. Is there an adequate analytical capacity (skilled personnel)?
    5. Is there a Policy and a set of Standards in place that describe roles, responsibilities & expectations of the operation of the IS Projects?
    6. Is the IS projects that gets reported credible, timely & responding to the priority issues? 
F15 : Training and mentoring 
Questions that measure factor F15:
    1. Is there a clear educational strategy concerning the SPI implementation? 
    2. Does this strategy involve routines for early hands on training for the employees? 
    3. Are there definite training issues in implementing a new IS projects? 
    4. Is the training curriculum designed for the new organizational roles and tasks? 
    5. Is the training customized for your specific business?  
    6. Are the learning materials developed by experienced instructional designers and tailored to different learning styles 
F16 : Sustainability
Questions that measure factor F16:
    1. If IS software Improving branding and transparency with advanced reporting?
    2. Does the organization improving the bottom line with positive sustainability impacts?
    3. Does the organization go further and use sustainability as a lever for increasing operational efficiency?
    4. Does the organization improving the top line with a sustainable portfolio approach?
    5. If the organizations that fall into this category are the most mature, and have shifted their approach from cost to revenue?
    6. If Innovators are looking to improve their top-line through a sustainable product/services portfolio approach to differentiate better in their existing markets or enter new ones?
F17: Ease to use 	
Questions that measure factor F17:
    1. Does the organization have a strategy to select the IS system to be easy to use? 
    2. Do the User concerns and issues set the balance and priorities in creating Usability goals? 
    3. Are the software developers continually improving their products with new features? 
    4. Does the organization rank highest in decision criteria especially when one product looks a lot easier to use than another  
    5. Does the application content of an IS systems software exceed the expectations of buyers? 
    6. Does the organization select the IS systems that is easy to train new employees and easier to support? 
F18: Minimal customization 
Questions that measure factor F18:
    1. Does the organization minimize customazitation of the IS software? 
    2. Does the organization differentiate between the two key types of customizations - usability and functionality? 
    3. Does the organization understand that the issue of customization has been plaguing the IS systems industry since its inception? 
    4. Do the Organizations deploy an IS software that is being customized to fit their needs only to then discover that the cost of applying maintenance? 
    5. Does the organization know the Reasons for IS software customization prior to “going-live” and after “going-live”? 
    6. Do the organization Factors include the need to address strategic and cost implications, organizational adaptation to IS software functionality, deploying strategies to minimize customizations  





















6.2 Questioner that related to the proposed Framework for Management of Successful ERP Selection.
Hint: first bold  questions in each factor is governing questions.
F1: Corporate Vision 
Questions that measure factor F1:
    • What major organizational changes has the supplier made in recent years?
    • What major product changes have occurred in recent years? 
    • What major product changes does the company foresee or have planned in the coming years? 
    • What level of involvement does the executive staff have in the company’s daily operations?
    • Is the executive staff knowledgeable of industry trends and developing technology? 
F2: Business processes
Questions that measure factor F2:
    • Does the vendor promise any reduction in lead times of those business processes in which you have some interest?
    • What is the minimum processing time for MRP (material requirement planning)?
    • What is the maximum processing time for MRP?
    • What is the minimum processing time for MPS (master production schedule)?
    • What is the maximum processing time for MPS?
    • Does the software optimize the business processes after implementation?
    • Does the software use a built-in business process modeler?
F3 Technology and System Architecture
Questions that measure factor F3:
    • Is the technology robust enough to handle current and future transaction load? Is it scalable?
    • Is the system’s speed acceptable for daily usage? 
    • Is source code provided so customizations or modifications can be made without hefty charges?
    • Do customizations hamper upgrading to future software releases? 
    • Does the package allow a number of database and server options? 
    • Is the software ODBC compliant? 
    • Does the software support eCommerce, RF and bar coding, and EDI transactions? 
    • Does the software support multi-company, multi-division, and multi-currency environments? 
    • Are there any restrictions to this type of environment? 
F4 Database and network
Questions that measure factor F4:
    • How many user licenses are required?
    • Is the ERP designed to work with different RDBMS (relational database management systems), such as Oracle, Sybase, and Informix?
    • Does the vendor have any built-in programs to handle integration?
    • How will the data warehousing aspects be addressed?
    • What is the maximum time it takes for uploading the remote data?
    • What is the minimum time it takes for uploading the remote data?
    • Does the software support distributed data processing?
    • Does the software support a parallel processing option?
    • Has the vendor had any problems in the past regarding concurrency?
    • Does the software have an audit trail on key transactions?
    • How many security layers have been incorporated into the software?
    • What kind of networking protocols does the software support?
    • Does the software support LONG and BLOB data types, etc.?
    • What is the largest database the vendor has handled so far for the modules you're interested in?
    • What is the smallest database size handled by the vendor so far for the modules you're interested in?
F5 Hardware and software
Questions that measure factor F5:
    • What kind of hardware support does the vendor offer?
    • How many years of experience does the vendor have with the hardware/software that will be used for your project?
    • Who are the alliance partners for the hardware support?
    • What is the upgrade support for the software?
    • Does the software have any interface to support the latest technology?
    • How is the vendor maintaining the documentation for the software?
    • Is the software Web-enabled?
    • Will the software be implemented in modules?
    • Will the software be purchased in modules?
    • Will the software accounting adhere to international standards and adhere to each country’s standards?
    • How many operating systems does the software support?
    • Does the software allow posting of transaction both in batch mode and online?
    • Does the software support multilingual operation?
F6:Customization effort implementation
Questions that measure factor F1:
    • Has the vendor implemented sites in this region?
    • Has the vendor implemented ERP in your industry segment?
    • Has the vendor implemented the same modules that your organization needs?
    • Will there be immediate delivery of the product?
    • Does the vendor have a specific implementation plan?
    • How long did it take for the vendor to implement the same modules elsewhere?
    • How many years of experience does the vendor have with implementation?
    • Does the vendor have good project plan initiatives?
    • Does the vendor have a good implementation team with the required skills?
    • Does the vendor have the Certification of Excellence given by other customers?
    • What is the minimum implementation time for the modules you've chosen?
    • What is the maximum implementation time for the modules you've chosen? 

F7 Service and Support
Questions that measure factor F7:
    • Was the team comfortable with the sales process and representative? 
    • Were the team’s questions answered in an open and honest forum or were they avoided by the supplier? 
    • Can the supplier provide a complete turn-key solution? 
    • What type of project management is available? 
    • What type of training is available? 
    • What is the average technical support person’s experience level and tenure with the company? 
How quick are non-critical software bugs fixed? 
    • Is 23/7 support available? 
    • Is Application Service Provider (ASP) available if desired? 
    • Can the supplier meet the required “go live” date? 
    • Does the supplier offer business process re-engineering as part of the implementation process? 
    • Does the supplier have experience in industries similar to yours? 
    • What support will the vendor provide after implementation?
    • If the vendor is out-of-country, how is support provided? 
    • How much time will the vendor devote to ERP training for end users?
    • Describe the UI (user interface)/GUI (graphical user interface) package support and how each will give end users ease of operation 
    • Did the vendor complete any customization at any previously implemented sites? (Describe by percentage and the modules )
    • How will the vendor complete the reports' customization?
    • Does the software have any built-in programs to handle data conversions?
    • Is the front-end application developed using proprietary software?
    • Is the customization cost included in the ERP cost?
    • Can the vendor give approval for accessing other customers' data?
    • Does the vendor have any test data built into the software for proper training?
    • If any bugs are found in the software during or after implementation, what is the replacement support?
    • Is the vendor ready to work with third-party tools and software?
F8 Product Functionality 
Questions that measure factor F8:
    • Does this package meet the overall requirements listing?
    • Is the menu structure easy to follow and understand? 
    • Are the help files easily assessable and easy for users to understand?
    • Can the user customize help to meet the individual needs of the organization? 
    • Is the product overly complex or too sophisticated for the average user? 
    • Are there standard reports available, and are they useful?
F9 Product total owner cost   
Questions that measure factor F9:
    • Are the license costs justified given the functionality offering? 
    • Is the required database affordable? 
    • Are annual maintenance charges reasonable and in line with the industry average of 15-22%? 
    • Are payments for annual maintenance charges in line with industry norms of being due within 90 days of contract signing or some other time frame? 
    • What is the true implementation services-to-software ratio for implementations with comparably-sized companies? This can range from a 1:1 to 5+:1 services-to-software ratio depending upon the given software supplier and its track record  
    • Can the estimated ROI be achieved with this product? 
    • How quickly can payback be received? 
F10 Supplier Longevity 
Questions that measure factor F10:
    • How many years has the company been actively engaged in this software industry? 
    • When was the product’s first release? What is the current release version being quoted? 
    • Has the company been consistently profitable year over year? 
    • Has there been recent turnover in the management staff? 
    • Over the last year has the supplier increased or reduced overall headcount? 
    • Are customer references available? May we visit a customer reference site prior to contract signing? 
Given the state of our global economy, researchers would imagine that prospective customers are allowing the supplier's longevity to play a more pertinent role in the list of selection criteria The ERP industry is so inundated with acquisitions, debt filled ERP providers are more the norm than the exception. This year more than any other, project teams should carefully review and focus on profitability, revenue per employee, and other indicators of financial solvency 
F11 Computer Culture:
Questions that measure factor F11:
    • Do employees accept to technology and computer usage?
    • Do they interact via intra-extranet?
    • Do they have an acceptance level of computer maturity and IT/IS commitment?
    • Did organizations obtain their competitive edge over their competitors in their respective fields of business stems from Information and Communications Technology (ICT) infrastructure, Government regulations, Economic growth and Regional location of Egypt?
    • Did the Companies in Egypt examine the significance of 'Organizational factors to find Business size, IT maturity and Computer culture?
    • Did the Companies in Egypt examine play a differential role in the ERP success implementation in Egypt?
F12 Organizational Culture 
Questions that measure factor F12:
Egyptian organizational culture (i.e. the way that things are done in the organization) is analyzed the following points are identified to be associated with ERP selection and implementation success [9]  
    1) Reliance on information
    2) Design of the general structure
    3) Design of Lateral links
    4) Centralization of decisions
    5) High Context communication
    • Are the most Egyptian management information systems restricted to managers?
    • Are the Data resided in soft form in the minds of top managers?
    • Do Managers rely on information systems?
    • Is the general structure represented by a basic organizational chart?
    • Is More emphasis put on in-group relationships built over long time?
    • Are the in-group relationships stable and difficult for outsiders' access?
    • IS the cooperation across different functional areas entailed by ERP less likely to be achieved?
    • Does the design of lateral links show the overall process and communication linkages among different units?
    • Are the Egyptian organizations loosely linked?
    • Does the haphazard flow of documents and information among functional departments hinder the process of ERP?
    • Are the Egyptian organizations managed in a highly hierarchical, authoritarian and centralized manner relative to their Anglo-American counterparts?
    • Does Centralization of decisions restrict the need for information exchange among managers?
    • Do the Egyptian employees have highly collective nature? 
    • Does High Context communication predispose culture against computer based communications?
    • Do workers in collectivistic nature favor high personal meetings and phone calls on IT communication technologies?

















6.3 Questioner that related to the proposed Framework for Management of Successful ERP systems Implementation.
Hint: first four questions in each factor is governing questions.
6.3.1 Top Management Category factors 
 F1 : Strategy and Careful package selection:
Questions that measure factor F1:
    1. Does the organization have a clear, communicated business strategy?  
    2. Does the organization have an aligned IS strategy? 
    3. Does the organization buy an enterprise application? 
    4. Is there a detailed requirement specification before ERP package selection? 
    5. Does the organization have methods to evaluate employees' job performance? 
    6. Does the Organizational Strategy identify its Objectives, Initiatives and Goals?
F2: Leadership
Questions that measure factor F2:
    1. Does the organization have a strong and committed leadership?  
    2. Does the leadership have the ability to motivate the employees to change? 
    3. Does the leadership build support for goals and projects from people who do not report to him and over whom he has no authority? 
    4. Does the leadership have the ability to prepare a good project time plan? 
    5. Is the leadership capable of determining whether the candidate’s style is congruent with the culture of the organization? 
    6. Is the leadership capable of encouraging the team members to ask questions about various portions of the project? 
F3: Support
The organization should have a top management and steering committee of the ERP 
Questions that measure factor F3:
    1. Is there a top management committee of the ERP implementation project? 
    2. Is the committee committed to the implementation?  
    3. Is the committee comprised of individuals with differentiated views of the implementation? 
    4. Does the Steering Committee shift focus to emphasize adoption, utilization, measurement and refinement? 
    5. Does post software implementation Verify that information and knowledge are being centrally stored and shared? 
    6. Does post software implementation Verify that users' are actually using, benefiting by and endorsing the business software application  
 F3: Competence and BPR 
Questions that measure factor F3:
    1. Are the individuals in the organization broadly competent with ERP, or other IT related projects? 
    2. Does BPR achieve improvements in critical, contemporary measures of performance?  
    3. Does BPR achieve improvements in cost, quality, service and speed? 
    4. Is the ERP system built on best practices that are followed in the industry? 
    5. Does the ERP system involve the existing processes to align the best business standards? 
    6. Does the organization have the principles for business process reengineering? 
6.3.2 Project Category factors 
 F5: Team 
Questions that measure factor F5:
    1. Are the individuals in the organization representing different views and perceptions of the enterprise and the enterprise system? 
    2. Does the Organization retain a subset of the installation team? 
    3. Can the organization's members enhance the ERP application, handle bottlenecks, tweak and improve the system? 
    4. Can the ERP vendor work with the implementation team to develop effective, successful customized training for the organization? 
    5. Is the support staff well qualified? 
    6. Are there criteria on which is the success of the support team measured? 
 F6: Management
Questions that measure factor F6:
    1. Does the organization have a project management for the implementation project? 
    2. Is this project management excellent? 
    3. Does the project management ensure that the management presents business and technical perspectives of the implementation? 
    4. Are there managing criteria and life cycle for a project that has a beginning and an end? 
    5. Are the project methodologies appropriate to the task and the organization? 
    6. Is there a well structured approach in complex projects to set up and approve the project? 
 F7: Plan 
Questions that measure factor F7:
    1. Does the organization have previously defined and well communicated project methodology? 
    2. Does the project methodology envelop documentation procedures? 
    3. Does the project methodology envelop clear performance measurements with routines for monitoring progress? 
    4. Does the organization determine which Partners or Collaborators will be needed? 
    5. Does the organization determine if any Specific Information or Advice will be needed? 
    6. Are there guidelines to define each one's duty? 
F8: External
Questions that measure factor F8:
    1. Is the organization capable of managing the influences of external consultants in the implementation project? 
    2. Is it capable of optimally transferring the knowledge from the consultants into the organization? 
    3. Do Project management consultants distance themselves from politics, conflicts with other managers and chit-chats with company employees? 
    4. Are the external project managers highly efficient? 
    5. Does the external project manager work with the team members more than 6 months? 
    6. Are internal project managers better than external ones? 

F9: Return On Investment (ROI)
Questions that measure factor F9:
    1. Does the organization have an expected payoff (return on investment)? 
    2. Are the indirect costs of the software (as the reduced productivity during the integration process and training sessions) generated within the business? 
    3. Isn’t ROI too complicated for most learning and HR professionals? 
    4. Is it true that the ROI process does not reveal program weaknesses or strengths? 
    5. Is it possible to isolate the effects of any program from other factors? 
    6. Does the ROI process result in recommendations for improvement? 
6.3.3 Organization category factors
F10: Culture
Questions that measure factor F10:
    1. Does the organization have a business culture highlighting the importance of learning, knowledge, past experience and change? 
    2. Does the organization have a strategy for knowledge management?  
    3. Is the information perceived to be an organizational resource in the Egyptian organizations culture? 
    4. Do top managers rely on the implemented information system?
    5. Is cooperation across different functional areas in the Egyptian organization entailed by ERP achieved? 
    6. Does the Egyptian organization have an effective design of lateral links? 
F11: Change 
Questions that measure factor F11:
    1. Does the organization have willingness and readiness for change? 
    2. Does the organization have an explicit change management strategy? 
    3. Does the organization have common pitfalls when implementing organizational change? 
    4. Does the organization have tools to minimize resistance from middle management in implementing this change? 
    5. Does the organization have buzzword should to implement? 
    6. Does the organization get benefit from a consultant? 
F12: Process
Questions that measure factor F12:
    1. Are there guidelines for process management within the organization? 
    2. Are there criteria for designing and innovating the overall work system? 
    3. Are there criteria by which the work systems and key work processes relate to and capitalize on your core competencies? 
    4. Are there criteria to ensure that the day-to-day operation of these processes meets their key process requirements? 
    5. Are there measures to control the overall costs of your work processes and prevent defects, service errors, and rework? 
    6. Are there measures taken so that work process improvements and lessons learned shared with other units and processes to drive learning and innovation? 
F13: Communication  
Questions that measure factor F13:
    1. Is there a detailed communication plan and strategy within the organization? 
    2. Does this plan (if present) ensure the successful communication of project plan and progress to all relevant stakeholders? 
    3. Is there Critical Strategic Communications Practices within the organization? 
    4. Are there criteria for assessing Current Performance and Capacity? 
    5. Are there criteria to Identify Possible Levels of Practice? 
    6. Are there criteria to Identify Areas for Improvement? 
F13: Wide Commitment 
Questions that measure factor F13:
    1. Does the organization have an ERP system that integrates information and information based process within and across all functional areas in the organization? 
    2. Are the persons and departments responsible for the overall system? 
    3. Are the key users from different departments ensured to commit to the project implementation? 
    4. Are these departments frequently being called back to their prior functional job position? 
    5. Is there a prepared list of what is required from each of the functional areas of the company? 
    6. Is the global team well trained in the organization? 
F15: Resistance 
Questions that measure factor F15:
    1. Does the ERP system introduce large-scale changes that cause resistance? 
    2. Does this resistance decrease the expected benefits of the system? 
    3. Is there in the company any parochial self interest? 
    4. Is there in the company any misunderstanding and lack of trust? 
    5. Is there in the company low tolerance for change? 
    6. Does the company introduce a single method for assessment? 
6.3.4  System Category factors:
F16: Technology 
Questions that measure factor F16:
    1. Is the organization technology integrated with the ERP solution to boost the organization's return on investment? 
    2. Is there a clear understanding of the existing legacy environment? 
    3. Is there are a clear technological aspects involved in the implementation of the ERP system? 
    4. Is there a well performed Hardware and networking for ERP system? 
    5. Does the ERP software vendor generally certify which hardware (and hardware configurations) must be used to run the ERP system? 
    6. Is the Hardware selection driven by the firm's choice of an ERP software package? 
F17: Training 
Questions that measure factor F17:
    1. Is there a clear educational strategy concerning the ERP implementation? 
    2. Does this strategy involve routines for early hands on training for the employees? 
    3. Are there definite training issues in implementing a new ERP system? 
    4. Is the training curriculum designed for the new organizational roles and tasks? 
    5. Is the training customized for your specific business?  
    6. Are the learning materials developed by experienced instructional designers and tailored to different learning styles 
F18: User
Questions that measure factor F18:
    1. Does the implementation process not strive for a high level of user acceptance? 
    2. Does the organization not use constant presumptive end-user consultations? 
    3. Are there differences in user acceptance of an ERP system between users belonging to different departments? 
    4. Are there differences in user acceptance of an ERP system between users in different positions? 
    5. Are there differences in user acceptance of an ERP system between user tenure? 
    6. Are there differences in user acceptance of an ERP system between user ERP implementation experiences? 
F19: Empowerment
Questions that measure factor F19:
    1. Does the organization have a high level of implementation process transparency? 
    2. Does the organization have a staff policy that empowers team members, end-users and management? 
    3. Is the user interface consistent throughout the application? 
    4. Is the software licensed? 
    5. Can a non-programmer develop a new business process in the system? 
    6. Are there criteria to know that the proposed solution support the style of manufacturing? 
F20: Ease to use 	
Questions that measure factor F20:
    1. Does the organization have a strategy to select the ERP system to be easy to use? 
    2. Do the User concerns and issues set the balance and priorities in creating Usability goals? 
    3. Are the ERP vendors continually improving their products with new features? 
    4. Does the organization rank highest in decision criteria especially when one product looks a lot easier to use than another  
    5. Does the application content of an ERP product exceed the expectations of buyers? 
    6. Does the organization select the ERP system that is easy to train new employees and easier to support? 

F21: Minimal customization 
Questions that measure factor F21:
    1. Does the organization minimize customization of the ERP system? 
    2. Does the organization differentiate between the two key types of customizations - usability and functionality? 
    3. Does the organization understand that the issue of customization has been plaguing the ERP software industry since its inception? 
    4. Do the Organizations deploy an ERP that is being customized to fit their needs only to then discover that the cost of applying maintenance? 
    5. Does the organization know the Reasons for ERP system customization prior to “going-live” and after “going-live”? 
    6. Do the organization Factors include the need to address strategic and cost implications, organizational adaptation to ERP functionality, deploying strategies to minimize customizations  

Based on the above arguments and the suggested research framework we can summarize the following factors are postulated:
F1: Egyptian Top Management strategy has a positive impact on ERP implementation success 
F2: Egyptian Top Management leadership has a positive impact on ERP implementation success 
F3: Egyptian Top management support has a positive impact on ERP implementation success 
F3: Egyptian Competitive pressure to adopt an ERP system has a positive impact on ERP implementation success 
F5: Egyptian Project team for the ERP system has a negative impact on ERP implementation success 
F6: Egyptian Effective project management has a positive impact on ERP implementation success  
F7: Egyptian Project planning to best of practices of an ERP system has a positive impact on ERP implementation success 
F8: Egyptian External support and consultants has a positive impact on ERP implementation success  
F9: Egyptian organizational Return on Investment (ROT) has a negative impact on ERP implementation success 
F10:  Egyptian organizational culture has a negative impact on ERP implementation success 
F11:  Egyptian organizational change has a negative impact on ERP implementation success
F12:  Egyptian organizational process has a positive impact on ERP implementation success 
F13: Egyptian organizational communication has a positive impact on ERP implementation success 
F13: Egyptian Company wide support has a positive impact on ERP implementation success 
F15: Egyptian Organizational resistance has a negative impact with ERP implementation success 
F16: Egyptian Organizational Technology has a positive impact with ERP implementation success 
F17: Egyptian Users' involvement has a positive impact on ERP implementation success 
F18: Egyptian training has a positive impact on ERP implementation success
F19: Egyptian Empowerment has a positive impact on ERP implementation success  
F20: Egyptian Perceptions on the ease of use of the ERP system has a positive impact with ERP implementation success 
F21: Egyptian system Minimal customization of the ERP system has a positive impact with ERP implementation success 


6.4 Results:
After Appling our framework about the Critical Success Factors (CSFs) that ensure ERP systems implementation success on three big organizations in Egypt we got the following results:
Organization O1 achieved 96% success rate (Success ERP project) figure [6.1] 
Organization O2 achieved 35% success rate (Failed ERP project) figure [6.2] 
Organization O3 achieved 93% success rate (Success ERP project) figure [6.3)]

6.4.1 Results of Organization O1:

Figure [6.1] Success ERP implementation

From figure [6.1] we conclude that most factors (16 factors out of 21) 76% achieved 100% success rate and the remaining factors 23% achieved 83% success rate indicating the success ERP implementation in AY Organization as the following: 
    1. For the top management category we find that the two factors achieve 100% success rate especially the Strategy and careful package selection factor (F1) and the support factor (F2) that refer to the good management in this  organization (O1) 
    2. For the project category we find that three factors achieve 100% success rate , team factor (F5) ,the management factor (F6) and the external factor (F8)  that also refer to the success  the project category in this organization 
    3. For the organization category  we find that all related factors (Culture (F10) ,Change (F11) ,Communication (F13),Wide commitment (F13)  and Resistance factor ( F15) ) except only one factor (Process factor ( F12))  achieve the 100% success rate that  refers to the high success rate at the organization category in this organization 
    4. For the system category we find that all related factors (Technology (F16), Training (F17),User (F18), Empowerment (F19) ,Ease to use (F20) and  Minimal Customization (F21) ) all achieve 100% success rate that refer to the complete success rate for the system category at this organization  

6.4.2 Results of Organization O2:

Figure [6.2] failed ERP implementation
 
From figure [6.2] we conclude that:
    • 29% of  the factors achieved 67% success rate (6 factors out of 21), 
    • 19% of  the factors achieved 50% success rate (3 factors out of 21),
    • 19% of  the factors achieved 33% success rate (3 factors out of  21),
    • 10% of the factors achieved 17% success rate (2 factors out  of 21),
    • 5% of the factors achieved 100% success rate (one factor out  of 21),
    • 5% of the factors achieved 83% success rate (one factors out of 21),
    • 13% of the factors achieved 0% success rate (3 factors out  of 21),
Indicating failure ERP implementation in AYE Organization as the following:
    1. For the top management category we find that  only the support factor (F3) achieve exactly the percentage for the successes any factor (67% success rate) but the other factors (Strategy and careful package selection (F1), Leadership (F2), Competence and BPR  (F3)) do not  achieve the percentage for the success of this category at this organization (O2) 
    2. For the project category that include five factors we find that only one factor achieve exactly the percentage for the successes (67% success rate) plan factor (F7) but the other factors: team factor (F5), the management factor (F6), the external factor (F8) and the ROI factor (F9) do not achieve the success rate that perform the success of this category in this organization (O2) 
    3. For the organization category we find that only 50% of related factors (Culture (F10), Communication (F13), Wide Commitment (F13) achieve exactly the percentage for the successes (67% success rate) but the other factors Change (F11) ,process (F12) , resistance (F15) do not achieve the success rate that perform to the success of this category in this organization (O2) 
    4. For the system category that include 6 factors we find that only three factors achieve success rate as the following: (Training (F17) achieve 100%, Empowerment (F19) achieve exactly the percentage for the successes (67% success rate), Ease to use (F20) achieve 83% success rate but the other factors (Technology (F16),User (F18) ,Minimal Customization (F21)  do not achieve the success rate that perform to the success of this category in this organization (O2) 

6.4.3 Results of Organization O3:

Figure [6.3] success ERP implementation

From figure [6.3] we conclude that most factors (16 factor out of 21) 76% achieved 100% success rate  , two  factors  ( 2 factor out of 21) 13% achieved 83% success rate and the remaining factors (3 out 21) 5% achieved 67% success rate indicating the success ERP implementation in PETROBEL organization 
    1. For the top management category we find that all factors achieve 100% success rate that refer to the very good management in this organization (O3) 
    2. For the project category that include five factors we find that two  factors achieve 67% success rate , team factor (F5) ,the external factor(F8)  and two factors achieve 83% success rate ( ROI (F9), Minimal customization (F6) that also refer to the success  the project category in this organization(O3) 
    3. For the organization category  we find that all related factors achieve 100% success rate except the Change (F11) factor  that achieve 83% that  refers to the high success rate at the organization category in this organization  
    4. For the system category we find that all related factors achieve 100% success rate except the Minimal customization (F21) that achieves 83% success rate and refer to the complete success rate for the system category at this organization 


Figure [6.4] summary of ERP implementation 
Figure [6.4] shows the summary of all the pervious results according to our framework for Critical Success Factors (CSFs) for ERP implementation 

this figure shows that the  known 21 factors are divided  into 3 categories (Top management, Project, Organization and System) that first organization O1 achieve 96% as average success rate, second organization O2 achieve 35%, and last organization achieve 83% average success rate 






















































7.1 Conclusion
Egypt's expenditure on IS projects and other enterprise systems is growing, and these systems can undoubtedly deliver benefits to organizations in developing countries[115],[116]  However, high failure rates continue to block the delivery of such benefits. Research to date, though, often appears partial, focusing on only some aspects of system outcome and/or focusing only on certain specific implementation factors.
In this study we adopted three frameworks , the first Framework for Management of  Successful IS Development Software implementation, the known 18 factors were divided into the same 3 categories (Top management, Project, Organization and System)  The final list of this framework included 18 factors whose reliability and validity are tested by using it with corresponding 108 questions  
These questions were distributed as 6 question per each factor grouped into 3 categories (Top management, Project, Organization and System) as a model, After that we used the model for following a smaller number of organizations through an implementation  
Another proposed Framework for management of Successful ERP Projects Implementation, Through an extensive literary review and many other interviews with some people including IT managers having previous experience in managing ERP implementation and with a faculty member with a good background in this subject, Five implementation factors were added in this research (1- Return on Investment (ROT) F9, 2-Wide Commitment F13, 3-Resistance F15, 3-Ease to use   F20, 5- Minimal customization F21) 
Along with a division of the known 21 factors into 3 categories (Top management, Project, Organization and System) our main concern while performing this study was to collect the factors that could be more beneficial to a developing country setting like Egypt. This research concentrated on practical testing of the framework. This is mainly done through testing the reliability and validity of the framework by using it with corresponding 126 questions.  
In both framework, For instance, if the responding organization fulfils 67% percent of each factor (based on 6 questions per factor, 3 questions per each factor must be replied by yes as a positive reply Except factor 15 and factor 18 (resistance and user) for the second framework must be replied by no to be a positive reply) the result will be 67%  That is, the probability of success of this project is 67%, and so a text describing what the organization’s strengths and weaknesses will be described according to the different factors, along with a quick-list of possible future managerial actions to strengthen the identified weaknesses.
Third proposed framework we presented for management of ERP selection and adopt critical factors to provide the organization with the necessary information to make a well-informed, quantitative software selection, toward achieving a successful ERP implementation , through an extensive literary review a number of factors (12) were identified to assist organizations in the ERP system and vendor selection process in Egypt. 
After this we got statistical reports and graphs about the outcome of each factor corresponding to the organizations under study and we got statistical reports and graphs about the outcome of the 3 categories (Top management, Project, Organization and System) for all organizations under study indicating the average success rate for ERP Implementation of each organization. 
This research focuses on ERP implementation in Egypt .So we developed and tested a framework that investigates ERP implementation success in literature and Egyptian culture of organization. By this framework, ERP implementation success is predicted for a given ERP implementation case.
I think that this research adds to the growing body of knowledge on IS development software and ERP systems implementation, helping studying IS software implementation in the Egyptian environment. For practitioners, it provides IS software development and ERP adopters with a self-evaluation tool that helps them to monitor and predict the likelihood of project success.
7.2 Future Work 
In terms of future research, due to the limited number of existing models for IS projects and other enterprise systems implementation, more research is still needed to investigate the correlation between the Critical Success Factors (CSFs) for IS projects and other enterprise systems and the failure or success of the IS projects implementation  Also, the generalisability of the framework described in this research to other industries, larger organizations, and technology driven IS projects investments should be investigated.
Also our future study will be concentrated on building an expert system for the suggested framework to represent a self-assessment tool for IS projects implementers in Egypt  Combining both detailed case study and a large survey would be an ideal method for researchers in the IS projects implementation field. 
Also the future study will represent a self-assessment tool for ERP implementers in Egypt   Combining both detailed case study and a large survey would be an ideal method for researchers in the IS projects implementation field. 












 References:
    1. C.Clegg, C.Axtell, L. Damadoran,B.Farbey,R.Hull, R.Lloyd-Jones,J. Nicholls,R. Seell , AndC.Tomlinson , “Information Technology: A Study Of Performance And The Role Of Human And Organizational Factors,” Ergonomics Journal, Vol. 30, No  9, pp. 851-871,1997. 
    2. M.Keil, P.Cule, K.Lyytenen And R.Schmidt,"A Framework For Identifying Software Project Risks", Communications Of The ACM, 31, 11, pp. 76-83,1998   
    3. R.Fielding, "IT Projects Doomed to Failure", Computing, Vnunet Com, http://www.genecaresearchreports.com. November 2002, last accessed 25-5-2012. 
    4. The Register, “IT Project Failure Is Rampant” – KPMG, Electric news Net, November 2002.
    5. R. Jaques, "UK Wasting Billions On IT Projects", Computing, Vnunet Com, April 2003. 
    6. P. Dorsey , President Of Dulcian, Inc , Oracle Consulting Firm That Specializes In Data Warehousing, Paul Is An Associate Editor Of SELECT Magazine And Is President Of The NY Oracle Users’ "Top 10 Reasons Why Systems Projects Fail " ,  April 2005.
    7. T.L. Griffith, L. Zammuto,And L. Aiman-Smith, "Why New Technologies Fail?" Industrial Management: pp. 29-33, 1999. 
    8. E.J. Umble, "Avoiding ERP Implementation Failure", Industrial Management, pp. 1-9. February, 2003. 
    9. M.H. Rasmy, A.Tharwat And S.Ashraf "Enterprise Resource Planning (ERP) Implementation In The Egyptian Organizational", Cairo University, Egypt, 2005. 
    10. R.A.Rahman Department Of Information Technology Audit Bureau Of Jordan, "Why IT Project Fail" , pp 1-16, 2006 
    11. Galorath Incorporated, SEER Solutions Enable Engineers, Http://Www.Galorath.Com/Wp/Software-Project-Failure-Costs-Billions-Better-Estimation-Planning-Can-Help.Php, Reviewed 10/1/2011
    12. I.B.Setiawan   References For "IT Project Managers" May 25, 2012 Http://Itpmpro.Blogspot.Com., Source: Project Management of Body Knowledge (PMBOK® Guide) Last Reviewed 28-5-2012.
    13. C.Daniel,Chan, NYS Chief Information Officer Acting Director of Office For Technology," system development lifecycle" ,pp. 1-30, http://www.tenstep.com.br/br/LifecycleStep/open/430.0.htm.Last Reviewd 28-4-2012 , 
    14. International Standard [ISO/IEC 13763:2006 Software Engineering — Software Life Cycle Processes — Maintenance]. Http://Www.Iso.Org/Iso/Home.Htm,Last Reviewed 24-4-2012 
    15.  Http://En.Wikipedia.Org/Wiki/File:Systems_Development_Life_Cycle.Jpg Last Viewed 20/2/2012.
    16. [Chapman, James R , Project Integration Management ,1997, Version 1 3a , Principle Based Project Management Website: Http://Www.Hyperthot.Com/Pm_Meth1.Htm Last Reviwed 25-4-2012 .
    17. American National Standards Institute (ANSI/PMI 99-001-2008)  "A Guide To The Project Management Body Of Knowledge (PMBOK Guide)" The Third Edition (2003) Was Recognised As A Standard By The Institute Of Electrical And Electronics Engineers — IEEE 1390-2003  Is A Book Which Presents A Set Of Standard Terminology And Guidelines For Project Management.
    18. Http://Www.Tenstep.Com.Br/Br/Lifecyclestep/Open/440.0.Htm Last Reviewed 25-4-2012
    19. Http://Www.Lifecyclestep.Com/Open/450.0IMPLEMENTPHASE.Htm , Tenstep Site Last Reviewed 28-4-2012.  
    20. Craig Borysowich ,Chief Technology Tactician ,Oshawa, Ontario, Canada , Dec 13, 2007., Http://It.Toolbox.Com/Blogs/Enterprise-Solutions/Sample-Checklist-For-Unit-Integration-Test-Activities-21231. Last Accessed 20-4-2012.
    21. E. Burt Swanson, The Dimensions Of Maintenance  Proceedings Of The 2nd International Conference On Software Engineering, San Francisco, 1976, Pp 392 — 397. 
    22. Wallace, D. R , Peng, W.W , & Ippolito, L  M  (1992)  Software Quality Assurance: Documentation And Reviews (NISTIR 3909)  Gaithersburg, MD: U S  Department Of Commerce Technology Administration, National Institute Of Standards And Technology, Computer Systems Laboratory.
    23. IEEE STANDARD  1058-1998 - IEEE Standard For Software Project Management Plans : Http://Standards Ieee Org/Findstds/Standard/1058-1998 Html.
    24. ANSI/ASME N35 2-1977, ANSI/ASME NQA-1, " The Quality Assurance Program"  10CFR50, Appendix B,1989 Edition Through NQA-1C-1992 Addenda, NQA- 2, 1989 Edition Through NQA-2B Addenda, Federal Government Specifications And Standards CAN3-Z299 3-85, CAN3-Z286 2-86, CAN/CSA-Q396 1.1-89 And CAN/CSAQ396 1.2- 89  
    25. ISO Technical Committee ISO/TC 176, Quality Management And Quality Assurance, Which Is Responsible For Developing And Maintaining The ISO 9000 Standards Http://Www.Iso. Org/Iso/Qmp. Last Reviewed 28-4-2012 
    26. M. B., Stewart," Risk Estimation From Technology Project Failure", School Of Computing, University Of West Of Scotland, Paisley, 4th European Conference On Management Of Technology . PAGES 1-19, 2009.
    27. Royal Academy Of Engineering, 2002, Common Methodologies For Risk Assessment And Management, And The Societal Aspects Of Risk, The Royal Academy Of Engineering, London   (See Http://Www Raeng Org Uk/News/Publications/List/Default Htm?Typeid=2&Pubtype=Reports).
    28. Bronte-Stewart, M ,"Developing A Risk Estimation Model From IT Project Failure Research", School Of Computing University Of Paisley , COMPUTING AND INFORMATION SYSTEMS,  2005, VOL 9, NUMB 3, Pages 8-31.
    29. ICE System Lifecycle Management Handbook October 2004 , ICE Electronic Library Under Governance Documents At HTTP://DOCUMENTS.ICE.DHS.GOV,Last Reviewed 28-4-2012. 
    30. Augustine Ong,Gek Woo Tan,  Atreyi Kankanhalli " Team Expertise And Performance In Information Systems Development Projects, School Of Computing National University Of Singapore.
    31. Soraya J  Netoalvarez  ,March 2003 "PROJECT MANAGEMENT FAILURE: MAIN CAUSES " A Graduate Research Report Submitted For INSS 690 In Partial Fulfillment Of The Requirements Of The Degree Of Master Of Science In Management Information Systems Bowie State University Maryland In Europe.
    32. Standish Group International Inc (1999) Chaos: A Recipe For Success, The Standish Group International Inc.
    33. Rupinder Kaur, Dr. Jyotsna Sengupta " Software Process Models And Analysis On Failure Of Software Development Projects" International Journal Of Scientific & Engineering Research Volume 2, Issue 2, February-2011 1 ISSN 2229-5518.
    34. UK Passport Service Annual Report And Accounts, "Government IT Projects Summary ", Passport Service, HC969, POST Report 200 July 2003.
    35. Lyytinen, K  And Hirschheim, R , 1987, “Information System Failures: A Survey And Classification Of The Empirical Literature”, In Oxford Surveys In Information Technology, Oxford University Press.
    36. Peterson D  K , And Kim C  S , 2000, “Information System Objectives: Effects Of Experience, Position Level And Education On Developers”, Journal Of Information Technology Management, Volume 11, ISSN #1032-1319. 
    37. K. Ewusi-Mensah, "Critical Issues In Abandoned Information System Development Projects", Communications Of The ACM, Volume 30, 9 .1997.
    38. C. Tom , CHAOS, The Standish Group International, http://www.spinroot.com/spin/ Doc/course/ Standish_Survey.htm, 1995. Last accessed 5-5-2012.
    39. " Failure Rate: Statistics over IT projects failure rate. " Http://Www.It-Cortex.Com/Stat_Failure_Rate.Htm "Statistics Over IT Projects Failure Rate" last reviewed  2-5-2012.
    40. The Bull Survey, The French Computer Manufacturer And Systems Integrator, BULL, An Independent Research Company, Spikes Cavell To Conduct A Survey In The UK To Identify The,' Major Causes Of IT Project Failure In The Finance Sector' ,1998.
    41. Taylor, A , 2001, “IT Projects Sink Or Swim”, British Computer Society, Review 2001 .
    42. Sauer, C , And Cuthbertson, C , November 2003, “The State Of IT Project Management In The UK ” Templeton College, Oxford University .
    43. The Standish Group's, Boston, Massachusetts, - New Standish Group Report "More Project Failing And Less Successful Projects", April 23, 2009.
    44. Tata Consultancy Services (TCS)  IT Services, Consulting And Business Solutions Partner, Leader In The Global Marketplace And Among The Top 10 Technology Firms In The World. Http://Www.Tcs.Com/About/Pages/Default.Aspx Last Reviewed 25-03-2012.
    45. Software Project Failure Costs Billions.. Better Estimation & Planning Can Help, Http://Www.Galorath.Com/Wp/Software-Project-Failure-Costs-Billions-Better-Estimation-Planning-Can-Help.Php , SEER GALORATH , Dan Galorath On Estimating,  Last Accessed 2-5-2012 
    46. From ESSU (European Services Strategy Unit) Research Report No 3 “Cost Overruns, Delays And Terminations” On IT Projects 2007.
    47. Boston, Massachusetts, The Standish Group International, Inc, March 3, 2011 . 
    48. David Jones, Teresa Lynch, A Model For The Design Of Web-Based Systems That Supports Adoption, Appropriation, And Evolution, Proceedings Of The 1st ICSE Workshop On Web Engineering, Murugesan, S. & Deshpande, Y. (Eds), Los Angeles, Pp 47-56 
    49. Dosani F , May 2001, Quoted By Robert Scheier In “Stabilizing Your Risk”, Computer World Magazine .
    50. Parliamentary Office Of Science And Technology "Government IT Projects", July 2003 Report 200.
    51. Computer Weekly, January 2003, Courts Libra System ‘Is One Of The Worst IT Projects I Have Ever Seen ’.
    52. J. Fortune, And G. Peters “Information Systems: Achieving Success By Avoiding Failure”, Wiley, 2005.
    53. BBC,“Intelligence System Faces Delays” Http://Newsvote.Bbc.Co.Uk/Mpapps/ Pagetools/ Print/News.Bbc.Co Uk/1/Hi/Uk/3321331.Stm., 2005,
    54. Cross, M , , “Public Sector IT Failures”, Prospect, Pages 38-52., October 2005.
    55. M. Krigsman ," Worldwide Cost of  IT Failure", Http://Www.Zdnet.Com/ Blog/Projectfailures/ Worldwide-Cost-Of-It-Failure-62-Trillion/7627, $6.2 Trillion By | December 22, 2009.
    56. The IT Complexity Crisis: Danger And Opportunity By Roger Sessions Nov 2009.
    57. Michael Krigsman ," 68 Percent Of IT Projects Fail Worldwide Cost Of IT Failure", Http://Www.Zdnet.Com/Blog/Projectfailures/Study-68-Percent-Of-It-Projects-Fail/1175.
    58. OASIG, 1996, “The Performance Of Information Technology And The Role Of Human And Organisational Factors”Http://Www.Shef.Ac.Uk/~Iwp/ Publications/Reports/ Itperf.Html.
    59. Keil, M , Tiwana, A , And Bush, A , 2002, “Reconciling User And Project Manager Perceptions Of IT Project Risk: A Delphi Study ” Information Systems Journal, Pages 103-119, Volume 12, Blackwell Science Ltd .
    60. NAO/OGC, 2002, “Common Causes Of Project Failure”, National Audit Office And The Office Of Government Commerce.
    61. M. Krigsman ," CRM Failure Rates: 2001-2009", Http://Www.Zdnet.Com/Blog/ Projectfailures /Study-68-Percent-Of-It-Projects-Fail /1175. August 3, 2009.
    62. M. Krigsman , "ERP Failure : New Research And Statistics: E-Business Insight - ERP, CRM And Supply Chain Management", 2005-03-12, Http://Www  Sysoptima Com/Erp/ Cost_Of_Erp  Php , February 3, (2010)
    63. Rashed ,M  (2011) "Critical Success Factor In Implementing Enterprise Resource Planning (ERP) Systems In EGYPT"  Maastricht School Of Management, Msm Maastricht, The Netherlans : 20-21.
    64. Panorama Consulting Groups (2011)   2010 ERP REPORT ERP Vendor Analysis  Avalabile Http:// Panorama-Consulting Com /Documents/ 2010%20ERP%20 Vendor%20 Analysis%20Report Pdf  Last Accessed Niv-2011.
    65. Richard G. Ligus Is President Of Rockford Consulting Group Located In Rockford,IL , Http://Www.Articlesbase.Com/Management-Articles/The-12-Cardinal-Sins-Of-Erp-Implementation Edit Article | Posted: Feb 01, 2009.
    66. Abdelmoniem,E M, Mazen,A S  Hassanein,E E  (2011) "Management & Governance Of Successful ERP Implementation In Egyptian Environment" Fifth International Conference On Intelligent Computing And Information Systems (Of ACM, ICICIS,3 JULY 2011, Cairo, Egypt, 231:250
    67. A.H.Yousef, A.Gamal, A.Warda, M.Mahmoud ,"Software Projects Success Factors Identification Using Data Mining" ,Computer And Systems Engineering Department,Ain Shams University,Cairo ,Egypt.
    68. Symbyo Technologies , "Egyptian Software Industry Is Still Alive" , Software Outsourcing Offshore Software Outsourcing Egypt, Outsourcing Application Development, Outsource Software Development, Dated: Oct 28, 2009.
    69. The Information Technology Industry Development Agency, ITIDA , ITIDA Is The Executive IT Arm Of The Ministry Of Communications And Information Technology, Http://Www.Itida.Gov.Eg/En/Aboutus/Biographies/Pages/Default.Aspx Last Accessed 5-5-2012. 
    70. Brynjolfsson, E , And Hitt, L , 1998, “Beyond The Productivity Paradox”, Communications Of The ACM, Volume 31, No 8, Pages 39-55.
    71. Khaled Al-Fawaz ,  Zahran Al-Salti ,  Tillal Eldabi , "CRITICAL SUCCESS FACTORS IN ERP IMPLEMENTATION: A REVIEW" , European And Mediterranean Conference On Information Systems 2008 (EMCIS2008) May 25-26 2008, Al Bustan Rotana Hotel, Dubai
    72. Glaser, J (2004)"Management's Role In IT Project Failures" ,Healthcare Financial Management, October .
    73. Armour, P (2005) Project Portfolios: Organizational Management Of Risk Communications Of The ACM, Volume 38, Issue 3, Page 17.
    74. Abdelghaffar, H  And Abdel Azim, R  H  "Significant Factors Influencing ERP Implementation In Large Organizations", Evidence From Egypt European, Mediterranean & Middle Eastern Conference On Information Systems 2010 April 12-13 2010, Abu Dhabi, UAE.
    75. Mabert, V A , Soni, A  & Venkataramanan, M A  2001  Enterprise Resource Planning: Common Myths Versus Evolving Reality  Business Horizon, May-June  2001. 
    76. Lois Fitz-Gerald, Jennie Carroll, "The Role Of Governance In ERP System Implementation" Department Of Information Systems,University Of Melbourne,Melbourne, Victoria. 2003.
    77. Thomas H. Davenport, Computer World ERP Trends, " Putting The Enterprise Into The Enterprise System", Harvard Business Review Vol 76,No 3 ,Pp  121-131,2001.
    78. Seddon, P. B.  Et Al (1999)  Dimensions Of Information Systems Success, Communications Of AIS, 2(20) .
    79. Alter, S  (1999) A General, Yet Useful Theory Of Information Systems, Communications Of The Association For Information Systems"  Vol 1 No 13,Pp  37, 1999.
    80. Panorama Consulting Groups (2012 "Are ERP Systems Really Dead?" Posted By Eric Kimberling On February 22, 2012.
    81. Abdelmoniem,E M, Mazen,A S  Hassanein,E E  (2011) "An Enhanced Framework For Measuring ERP Implementation Success In The Egyptian Environment" Forty Six International Conference For Statistical ,Computer Science And Operations Research From 26 To 29 December 2011, Cairo, Egypt, 231:250.
    82. HABIB , Z  2009 ," The Critical Success Factors In Implementation Of Software Process Improvement Efforts", Master Thesis In Software Engineering And Management Report No  2009:056 ISSN: 1651-3769 .
    83. Lahey  R   2011 ّ A Framework for Developing an Effective Monitoring and Evaluation System in the Public Sector – Key Considerations from International Experience"@   President REL Solutions Inc , Canada RELahey@rogers com.
    84. R.A.A.  ,2010  " A Framework for Successful Enterprise Systems Implementation: Preliminary Findings from a Case"  Queensland University of Technology, This material is brought to you by the Australasian (ACIS) at AIS Electronic Library (AISeL)  It has been accepted for inclusion in ACIS 2010.
    85. http://www buzzle com/articles/waterfall-model-diagram html By Shah Newaz Alam  Last Updated: 2/27/2012.
    86. Beck, Kent; et al. (2001). "Manifesto for Agile Software Development" (http:/ / agilemanifesto. org/ ). Agile Alliance. Last accessed  15-5-2102.
    87. M. A. Awad ,"A Comparison between Agile and Traditional Software Development Methodologies ", This report is submitted as partial fulfilment  of the requirements for the Honours Programme of the School of Computer Science and software Engineering,The University of Western Australia, 2005.
    88. Gray Pilgrim " Waterfall Model Vs Agile" , http://www.buzzle.com/articles/waterfall-model-vs-agile.html Last Updated: 1/17/2012 , last accessed 15-5-2012 
    89. Elizabeth Whitworth, "Introduction to agile software development" Excerpt from Master’s Thesis: Agile Experience: Communication and Collaboration in Agile Software Development Teams, 2007.
    90.  Mohd Hairul Nizam Nasir1, Shamsul Sahibuddin,"Critical success factors for software projects: A comparative study" ,  Scientific Research and Essays Vol. 6(10), pp. 2174-2186, 18 May, 2011 Available online at http://www.academicjournals.org/SRE ISSN 1992-2248 ©2011 Academic Journals.
    91. Mandal, P  & Gunasekaran, A  2003  Issues in implementing ERP: A case study  European Journal of operational Research 136:273-283.
    92. Sarker, S  & Lee, A S  2003  Using a case study to test the role of three key social enablers in ERP implementation, Information and management  In press Schneider, P  1999  Wanted: ERP People Skills  CIO March.
    93. Whyte, D  & Fortune, J  2002  "Current practice in project management – an empirical study".
    94. Hammer, M  and J  Champy  2001, ‘Reengineering the Corporation: A Manifesto for Business Revolution’, Harper Business, New York, NY, USA,work organization? Strategic Change, 11:263-270.
    95. Magnusson, J , Nilsson, A &  Carlsson, F ,"Forecasting Erp Implementation Success –Towards A Grounded Framework" University Of Gothenburg, Department Of Informatics 
    96. Stelzer, D , and Millis, W  (1999) Success Factors of Organizational Change in Software Process Improvement‟, John Wiley & Sons Ltd .
    97. Niazi, M , Willson D  and Zowghi D  (2006) Critical Success Factors for Software Process Improvement Implementation: An Empirical Study, Software Process: Improvement and Practice Journal, Vol  11, Issue  2, pp  193-211. 
    98. Ashim Raj Singla , " Impact Of Erp Systems On Small And Mid Sized Public Sector Enterprises " ,Institute Of Management Technology Ghaziabad, India., Journal of Theoretical and Applied Information Technology,- 2008, pp 1-13 .
    99. Jurison, J  (1999) Software Project Management: The Manager's View, Communications of the Association for Information Systems 2: 29 .
    100. Schmidt, R  Lyytinen, K  Keil, M  and Cule, P  (2001) Identifying Software Project Risks: An International Delphi Study, Journal of Management Information Systems, 17:3 Spring p5-36 .
    101. Holland, C  & Light, B  (1999)  A critical success factors model for ERP implementation  IEEE Software May/June 30-35 .
    102. Annual Report ISACA® and IT Governance Institute," Trust And Value " International President, 2010-2011. 
    103. Fiona Fui-Hoon Nah and Janet Lee-Shang Lau" Critical factors for successful implementation of enterprise systems", University of Nebraska-Lincoln, Lincoln, Nebraska, USA, and Jinghua Kuang University of Texas-Austin, Austin, Texas, USA, , registers., Business Process Management Journal, Vol. 7 No. 3, 2001,pp. 285-296. # MCB University Press, 1463-7154, The research register for this journal is available at http://www.mcbup.com/ research.
    104. J. D. Procaccino, J. M. Verner, and S. P. Overmyer." Case Study: Factors for Early Prediction of Software Success & Failure", College of Information Science & Technology, Drexel University,3141 Chestnut Street, Philadelphia, Pa. 19104-2875 USA, 2000.
    105. Fiona Fui-Hoon Nah ," Resource Planning Implementation And Upgrade ", University Of Nebraska-Lincoln Lincoln, Nebraska 68588-0491 Santiago Delgado National Instruments Austin, Texas 78759-3504 ,2004 
    106. `Shattock, M  (2001) CAPSA and its implementation, Part B: Review of University Management and governance issues arising out of the CAPSA project, in Report to the  Audit Committee and Board of Scrutiny,University of Cambridge  October: 179-203 .
    107. Bakås,A Romsdal and E Alfnes " Holistic ERP Selection Methodology" SINTEF Technology & Society, Operations Management, N-7365 Trondheim, Norway 2 Norwegian University of Science and Technology, Department of Production & Quality Engineering, N-7391 Trondheim, Norway,2007 .
    108. Ike C. Ehie , Mogens Madsen " Identifying critical issues in enterprise resource ,planning (ERP) implementation, " a College of Business Administration, Kansas State University, Manhattan, KS 66506-0501, USA b Accenture, Global Business Solutions, P.O. Box 18499, London EC4N 4TN, UK ,Received 29 March 2004; received in revised form 14 December 2004; accepted 13 February 2005 , Available online 5 July 2005.
    109. Procaccino, J D , Verner, J M , Overmeyer, S P  & Darter, M E  2002  Case study: factors for early prediction of software development success.
    110. Elisabeth J. Umble , Ronald R. Haft , M. Michael Umble ," Enterprise resource planning: Implementation procedures and critical success factors" , Department of  Management, Hankamer School of Business, Baylor University, P.O. Box 98006, Waco, TX 76798-8006, USA, b Huck Fasteners, 8001 Imperial Drive, P.O. Box 8117, Waco, TX 76714-8117, USA.
    111. L. Ganesh 1, Arpita Mehta1" Critical success factors for successful enterprise resource planning implementation at Indian SMEs", International Journal of Business, Management and Social Sciences,Vol. 1, No. 1, 2010, pp. 65-78. Communications of AIS Volume 1 Article 13
    112. S. Alter ,"A General, Yet Useful Theory of Information Systems" ,  McLaren School of Business University of San Francisco,San Francisco, CA 94117, USA, Volume 1, Article 13 March 1999.
    113. Sherry Finney , Martin Corbett ,"ERP implementation: a compilation and analysis of critical success factors" , Department of Organization and Management, Cape Breton University, Sydney, Canada, and Industrial Relations and Organizational Behavior Group, Warwick Business School, University of Warwick, Coventry, UK,2003.
    114. Davis, F   Bagozzi, R , & Warshaw, P  (1989)  User acceptance of computer technology: A comparison of two theoretical models  Management Science, 35(8), 982-1003 .
    115. Ala'a Hawari & Richard Heeks ," Explaining ERP Failure in Developing Countries: A Jordanian Case Study ", Centre for Development Informatics, Working Paper 45 ,IDPM, University of Manchester, UK, 2010.
    116.  Mohammad Reza Moohebat, Asefeh Asemi1,  Mohammad Davarpanah Jazi "  A Comparative Study of Critical Success Factors (CSFs) in Implementation of ERP in Developed and Developing Countries",  International Journal of Advancements in Computing Technology Volume 2, Number 5, December 2010.
