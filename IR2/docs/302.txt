Unifying NoSQL Datastores By Using An Intelligent Layer 
By

Sarah Hassan Kamal Mahmoud
Under the supervision of

                                                   Prof. Ehab E. Hassanein
Abstract
Over the year's cloud computing technology is growing rapidly, the requirements for enormous systems and storage have brought great challenges to relational database management systems (RDBMS) [1]. These important challenges of RDBMS are its inability to deal with Big Data and handle high concurrency applications that demand for high availability, high scalability and high elasticity [2].
     Elasticity in specific is contradicted by strict transaction support with ACID properties (atomicity, consistency, isolation, and durability) in traditional RDBMS. These systems are also inflexible to scale to a very big size or with a very high cost. In addition, RDBMS always provide an extremely large feature set which increase cost and complexity however many of the characters are used. Hence, applications that can tolerate reduced or even removed ACID properties are good candidates for using alternate ways of storing data - especially more applicable in cloud environments, where scalability and elasticity requirements are very high. This forced a rising number of companies to improve various types of non-relational database that are in general mentioned to as NoSQL (Not Only Structured Query Language) [3]. 
      A NoSQL technology is a category of database management systems that considered an alternative to relational database; do not store data using traditional fixed table schemas and use different query languages suitable for serving such applications [4]. The main characteristic of NoSQL datastores is that they look for elasticity at the expense of losing SQL integrity capabilities and some processes such as no join; non-relational, easy replication support. An extremely large numbers of different and diverse NoSQL datastores have been developed. The most prominent examples include Apache Cassandra, MongoDB, Voldemort, Apache HBase, SimpleDB, Azure Table Storage, CouchDB, Riak, Redis, and BigTable. 
Unfortunately, these systems are in the early stages of development and their pros, cons, and suitability for different problems have not been fully assessed. Besides, since each system is more suitable for a subset of problems, users have to learn and use different systems [5]. 
In this thesis, we study different existing NoSQL datastores to assess their pros, cons, and suitability to different problems. In addition we present an intensive analysis to assess a qualitative and a quantitative analysis among the three most popular of NOSQL datastores. These datastores are Redis DB, Neo4j DB, and Mongo DB. In this analysis, we conduct two studies; the first study presents a qualitative comparison among three popular NoSQL datastores and presenting real cases for each system. The second study provides a quantitative comparison of three NoSQL datastores such are MongoDB, Redis and Neo4j. The goal of this comparison is to evaluate the needed time for each of these datastores to insert as much data as possible and calculate the size of stored data in these datastores. Finally we design an intelligent layer which is called: "Unifying NoSQL Datastores by Using An intelligent Layer". 
This layer should be able to free the users from the need to know the details of the underlying datastores. It also should be able to meet different user requirement by mapping data and queries to the suitable system. It also can work with different types of NoSQL datastores flexibly and without causing any interruption or error. It should be efficient to minimize the time of mapping a given query to the suitable system. It will be tested to ensure its validity and efficiency. The testing of our layer depends on the results and rules which extract from qualitative and quantitative analysis.

Unifying NoSQL Datastores By Using An Intelligent Layer 
By

Sarah Hassan Kamal Mahmoud
Under the supervision of

                                                   Prof. Ehab E. Hassanein
Abstract
Over the year's cloud computing technology is growing rapidly, the requirements for enormous systems and storage have brought great challenges to relational database management systems (RDBMS) [1]. These important challenges of RDBMS are its inability to deal with Big Data and handle high concurrency applications that demand for high availability, high scalability and high elasticity [2].
     Elasticity in specific is contradicted by strict transaction support with ACID properties (atomicity, consistency, isolation, and durability) in traditional RDBMS. These systems are also inflexible to scale to a very big size or with a very high cost. In addition, RDBMS always provide an extremely large feature set which increase cost and complexity however many of the characters are used. Hence, applications that can tolerate reduced or even removed ACID properties are good candidates for using alternate ways of storing data - especially more applicable in cloud environments, where scalability and elasticity requirements are very high. This forced a rising number of companies to improve various types of non-relational database that are in general mentioned to as NoSQL (Not Only Structured Query Language) [3]. 
      A NoSQL technology is a category of database management systems that considered an alternative to relational database; do not store data using traditional fixed table schemas and use different query languages suitable for serving such applications [4]. The main characteristic of NoSQL datastores is that they look for elasticity at the expense of losing SQL integrity capabilities and some processes such as no join; non-relational, easy replication support. An extremely large numbers of different and diverse NoSQL datastores have been developed. The most prominent examples include Apache Cassandra, MongoDB, Voldemort, Apache HBase, SimpleDB, Azure Table Storage, CouchDB, Riak, Redis, and BigTable. 
Unfortunately, these systems are in the early stages of development and their pros, cons, and suitability for different problems have not been fully assessed. Besides, since each system is more suitable for a subset of problems, users have to learn and use different systems [5]. 
In this thesis, we study different existing NoSQL datastores to assess their pros, cons, and suitability to different problems. In addition we present an intensive analysis to assess a qualitative and a quantitative analysis among the three most popular of NOSQL datastores. These datastores are Redis DB, Neo4j DB, and Mongo DB. In this analysis, we conduct two studies; the first study presents a qualitative comparison among three popular NoSQL datastores and presenting real cases for each system. The second study provides a quantitative comparison of three NoSQL datastores such are MongoDB, Redis and Neo4j. The goal of this comparison is to evaluate the needed time for each of these datastores to insert as much data as possible and calculate the size of stored data in these datastores. Finally we design an intelligent layer which is called: "Unifying NoSQL Datastores by Using An intelligent Layer". 
This layer should be able to free the users from the need to know the details of the underlying datastores. It also should be able to meet different user requirement by mapping data and queries to the suitable system. It also can work with different types of NoSQL datastores flexibly and without causing any interruption or error. It should be efficient to minimize the time of mapping a given query to the suitable system. It will be tested to ensure its validity and efficiency. The testing of our layer depends on the results and rules which extract from qualitative and quantitative analysis.

Unifying NoSQL Datastores By Using An Intelligent Layer 
By

Sarah Hassan Kamal Mahmoud
Under the supervision of

                                                   Prof. Ehab E. Hassanein
Abstract
Over the year's cloud computing technology is growing rapidly, the requirements for enormous systems and storage have brought great challenges to relational database management systems (RDBMS) [1]. These important challenges of RDBMS are its inability to deal with Big Data and handle high concurrency applications that demand for high availability, high scalability and high elasticity [2].
     Elasticity in specific is contradicted by strict transaction support with ACID properties (atomicity, consistency, isolation, and durability) in traditional RDBMS. These systems are also inflexible to scale to a very big size or with a very high cost. In addition, RDBMS always provide an extremely large feature set which increase cost and complexity however many of the characters are used. Hence, applications that can tolerate reduced or even removed ACID properties are good candidates for using alternate ways of storing data - especially more applicable in cloud environments, where scalability and elasticity requirements are very high. This forced a rising number of companies to improve various types of non-relational database that are in general mentioned to as NoSQL (Not Only Structured Query Language) [3]. 
      A NoSQL technology is a category of database management systems that considered an alternative to relational database; do not store data using traditional fixed table schemas and use different query languages suitable for serving such applications [4]. The main characteristic of NoSQL datastores is that they look for elasticity at the expense of losing SQL integrity capabilities and some processes such as no join; non-relational, easy replication support. An extremely large numbers of different and diverse NoSQL datastores have been developed. The most prominent examples include Apache Cassandra, MongoDB, Voldemort, Apache HBase, SimpleDB, Azure Table Storage, CouchDB, Riak, Redis, and BigTable. 
Unfortunately, these systems are in the early stages of development and their pros, cons, and suitability for different problems have not been fully assessed. Besides, since each system is more suitable for a subset of problems, users have to learn and use different systems [5]. 
In this thesis, we study different existing NoSQL datastores to assess their pros, cons, and suitability to different problems. In addition we present an intensive analysis to assess a qualitative and a quantitative analysis among the three most popular of NOSQL datastores. These datastores are Redis DB, Neo4j DB, and Mongo DB. In this analysis, we conduct two studies; the first study presents a qualitative comparison among three popular NoSQL datastores and presenting real cases for each system. The second study provides a quantitative comparison of three NoSQL datastores such are MongoDB, Redis and Neo4j. The goal of this comparison is to evaluate the needed time for each of these datastores to insert as much data as possible and calculate the size of stored data in these datastores. Finally we design an intelligent layer which is called: "Unifying NoSQL Datastores by Using An intelligent Layer". 
This layer should be able to free the users from the need to know the details of the underlying datastores. It also should be able to meet different user requirement by mapping data and queries to the suitable system. It also can work with different types of NoSQL datastores flexibly and without causing any interruption or error. It should be efficient to minimize the time of mapping a given query to the suitable system. It will be tested to ensure its validity and efficiency. The testing of our layer depends on the results and rules which extract from qualitative and quantitative analysis.


Unifying NoSQL Datastores By Using An Intelligent Layer 
By

Sarah Hassan Kamal Mahmoud
Under the supervision of

                                                   Prof. Ehab E. Hassanein
Abstract
Over the year's cloud computing technology is growing rapidly, the requirements for enormous systems and storage have brought great challenges to relational database management systems (RDBMS) [1]. These important challenges of RDBMS are its inability to deal with Big Data and handle high concurrency applications that demand for high availability, high scalability and high elasticity [2].
     Elasticity in specific is contradicted by strict transaction support with ACID properties (atomicity, consistency, isolation, and durability) in traditional RDBMS. These systems are also inflexible to scale to a very big size or with a very high cost. In addition, RDBMS always provide an extremely large feature set which increase cost and complexity however many of the characters are used. Hence, applications that can tolerate reduced or even removed ACID properties are good candidates for using alternate ways of storing data - especially more applicable in cloud environments, where scalability and elasticity requirements are very high. This forced a rising number of companies to improve various types of non-relational database that are in general mentioned to as NoSQL (Not Only Structured Query Language) [3]. 
      A NoSQL technology is a category of database management systems that considered an alternative to relational database; do not store data using traditional fixed table schemas and use different query languages suitable for serving such applications [4]. The main characteristic of NoSQL datastores is that they look for elasticity at the expense of losing SQL integrity capabilities and some processes such as no join; non-relational, easy replication support. An extremely large numbers of different and diverse NoSQL datastores have been developed. The most prominent examples include Apache Cassandra, MongoDB, Voldemort, Apache HBase, SimpleDB, Azure Table Storage, CouchDB, Riak, Redis, and BigTable. 
Unfortunately, these systems are in the early stages of development and their pros, cons, and suitability for different problems have not been fully assessed. Besides, since each system is more suitable for a subset of problems, users have to learn and use different systems [5]. 
In this thesis, we study different existing NoSQL datastores to assess their pros, cons, and suitability to different problems. In addition we present an intensive analysis to assess a qualitative and a quantitative analysis among the three most popular of NOSQL datastores. These datastores are Redis DB, Neo4j DB, and Mongo DB. In this analysis, we conduct two studies; the first study presents a qualitative comparison among three popular NoSQL datastores and presenting real cases for each system. The second study provides a quantitative comparison of three NoSQL datastores such are MongoDB, Redis and Neo4j. The goal of this comparison is to evaluate the needed time for each of these datastores to insert as much data as possible and calculate the size of stored data in these datastores. Finally we design an intelligent layer which is called: "Unifying NoSQL Datastores by Using An intelligent Layer". 
This layer should be able to free the users from the need to know the details of the underlying datastores. It also should be able to meet different user requirement by mapping data and queries to the suitable system. It also can work with different types of NoSQL datastores flexibly and without causing any interruption or error. It should be efficient to minimize the time of mapping a given query to the suitable system. It will be tested to ensure its validity and efficiency. The testing of our layer depends on the results and rules which extract from qualitative and quantitative analysis.

Unifying NoSQL Datastores By Using An Intelligent Layer 
By

Sarah Hassan Kamal Mahmoud
Under the supervision of

                                                   Prof. Ehab E. Hassanein
Abstract
Over the year's cloud computing technology is growing rapidly, the requirements for enormous systems and storage have brought great challenges to relational database management systems (RDBMS) [1]. These important challenges of RDBMS are its inability to deal with Big Data and handle high concurrency applications that demand for high availability, high scalability and high elasticity [2].
     Elasticity in specific is contradicted by strict transaction support with ACID properties (atomicity, consistency, isolation, and durability) in traditional RDBMS. These systems are also inflexible to scale to a very big size or with a very high cost. In addition, RDBMS always provide an extremely large feature set which increase cost and complexity however many of the characters are used. Hence, applications that can tolerate reduced or even removed ACID properties are good candidates for using alternate ways of storing data - especially more applicable in cloud environments, where scalability and elasticity requirements are very high. This forced a rising number of companies to improve various types of non-relational database that are in general mentioned to as NoSQL (Not Only Structured Query Language) [3]. 
      A NoSQL technology is a category of database management systems that considered an alternative to relational database; do not store data using traditional fixed table schemas and use different query languages suitable for serving such applications [4]. The main characteristic of NoSQL datastores is that they look for elasticity at the expense of losing SQL integrity capabilities and some processes such as no join; non-relational, easy replication support. An extremely large numbers of different and diverse NoSQL datastores have been developed. The most prominent examples include Apache Cassandra, MongoDB, Voldemort, Apache HBase, SimpleDB, Azure Table Storage, CouchDB, Riak, Redis, and BigTable. 
Unfortunately, these systems are in the early stages of development and their pros, cons, and suitability for different problems have not been fully assessed. Besides, since each system is more suitable for a subset of problems, users have to learn and use different systems [5]. 
In this thesis, we study different existing NoSQL datastores to assess their pros, cons, and suitability to different problems. In addition we present an intensive analysis to assess a qualitative and a quantitative analysis among the three most popular of NOSQL datastores. These datastores are Redis DB, Neo4j DB, and Mongo DB. In this analysis, we conduct two studies; the first study presents a qualitative comparison among three popular NoSQL datastores and presenting real cases for each system. The second study provides a quantitative comparison of three NoSQL datastores such are MongoDB, Redis and Neo4j. The goal of this comparison is to evaluate the needed time for each of these datastores to insert as much data as possible and calculate the size of stored data in these datastores. Finally we design an intelligent layer which is called: "Unifying NoSQL Datastores by Using An intelligent Layer". 
This layer should be able to free the users from the need to know the details of the underlying datastores. It also should be able to meet different user requirement by mapping data and queries to the suitable system. It also can work with different types of NoSQL datastores flexibly and without causing any interruption or error. It should be efficient to minimize the time of mapping a given query to the suitable system. It will be tested to ensure its validity and efficiency. The testing of our layer depends on the results and rules which extract from qualitative and quantitative analysis.

Unifying NoSQL Datastores By Using An Intelligent Layer 
By

Sarah Hassan Kamal Mahmoud
Under the supervision of

                                                   Prof. Ehab E. Hassanein
Abstract
Over the year's cloud computing technology is growing rapidly, the requirements for enormous systems and storage have brought great challenges to relational database management systems (RDBMS) [1]. These important challenges of RDBMS are its inability to deal with Big Data and handle high concurrency applications that demand for high availability, high scalability and high elasticity [2].
     Elasticity in specific is contradicted by strict transaction support with ACID properties (atomicity, consistency, isolation, and durability) in traditional RDBMS. These systems are also inflexible to scale to a very big size or with a very high cost. In addition, RDBMS always provide an extremely large feature set which increase cost and complexity however many of the characters are used. Hence, applications that can tolerate reduced or even removed ACID properties are good candidates for using alternate ways of storing data - especially more applicable in cloud environments, where scalability and elasticity requirements are very high. This forced a rising number of companies to improve various types of non-relational database that are in general mentioned to as NoSQL (Not Only Structured Query Language) [3]. 
      A NoSQL technology is a category of database management systems that considered an alternative to relational database; do not store data using traditional fixed table schemas and use different query languages suitable for serving such applications [4]. The main characteristic of NoSQL datastores is that they look for elasticity at the expense of losing SQL integrity capabilities and some processes such as no join; non-relational, easy replication support. An extremely large numbers of different and diverse NoSQL datastores have been developed. The most prominent examples include Apache Cassandra, MongoDB, Voldemort, Apache HBase, SimpleDB, Azure Table Storage, CouchDB, Riak, Redis, and BigTable. 
Unfortunately, these systems are in the early stages of development and their pros, cons, and suitability for different problems have not been fully assessed. Besides, since each system is more suitable for a subset of problems, users have to learn and use different systems [5]. 
In this thesis, we study different existing NoSQL datastores to assess their pros, cons, and suitability to different problems. In addition we present an intensive analysis to assess a qualitative and a quantitative analysis among the three most popular of NOSQL datastores. These datastores are Redis DB, Neo4j DB, and Mongo DB. In this analysis, we conduct two studies; the first study presents a qualitative comparison among three popular NoSQL datastores and presenting real cases for each system. The second study provides a quantitative comparison of three NoSQL datastores such are MongoDB, Redis and Neo4j. The goal of this comparison is to evaluate the needed time for each of these datastores to insert as much data as possible and calculate the size of stored data in these datastores. Finally we design an intelligent layer which is called: "Unifying NoSQL Datastores by Using An intelligent Layer". 
This layer should be able to free the users from the need to know the details of the underlying datastores. It also should be able to meet different user requirement by mapping data and queries to the suitable system. It also can work with different types of NoSQL datastores flexibly and without causing any interruption or error. It should be efficient to minimize the time of mapping a given query to the suitable system. It will be tested to ensure its validity and efficiency. The testing of our layer depends on the results and rules which extract from qualitative and quantitative analysis.



